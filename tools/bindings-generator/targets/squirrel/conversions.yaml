definitions:
  # the names of the functions - we use this to generate the code and to register the functions in
  # the javascript class
  ifunction: "squirrel_${generator.prefix}_${class_name}_${func_name}"
  sfunction: "squirrel_${generator.prefix}_${class_name}_${func_name}"
  constructor: "squirrel_${generator.prefix}_${class_name}_constructor"
conversions:
  # some times you want to use a special native type when converting from spidermonkey to native
  # the most common case would be from JS-boolean to bool. Using "bool" will fail here since we
  # pass the address to the conversion method, and a JSBool is defined as an integer in spidermonkey
  native_types:
#    float: "float"
    short: "int32_t"
    "unsigned char": "uint16_t"
    "char": "int32_t"
    "@std::basic_string<char>": "std::string"
#    "@std::vector<std::(basic_string<char>|string)>.>.>": "std::vector<std::string>"
    "@std::vector<int.*>.>": "std::vector<int>"
    "@cocos2d::Map<std::(basic_string<char>|string),": "cocos2d::Map<std::string,"
    "@, std::allocator<[^>]*> ": ""
  ns_map:
    "cocos2d::experimental::ui::": "ccexp."
    "cocos2d::experimental::": "ccexp."
    "cocos2d::extension::": "cc."
    "cocos2d::ui::": "ccui."
    "cocos2d::": "cc."
    "spine::": "sp."
    "cocostudio::timeline::": "ccs."
    "cocostudio::": "ccs."
    "cocosbuilder::": "cc."
    "CocosDenshion::": "cc."

  to_native:
    # squirrel to native
    #int: "ok &= sqval_to_int32(vm, ${arg_idx},(int *)&${out_value})"
    int: "ok &= sqval_to_int32(vm, ${arg_idx}, (int *)&${out_value})"
    #"unsigned int": "ok &= sqval_to_uint32(vm, ${arg_idx},&${out_value})"
    "unsigned int": "ok &= sqval_to_uint32(vm, ${arg_idx}, &${out_value})"
    "unsigned char": "ok &= sqval_to_uint16(vm, ${arg_idx}, (uint16_t *)&${out_value})"
    short: "ok &= sqval_to_int32(vm, ${arg_idx}, &${out_value})"
    "unsigned short": "ok &= sqval_to_ushort(vm, ${arg_idx}, &${out_value})"
    char: "ok &= sqval_to_int32(vm, ${arg_idx}, &${out_value})"
    bool: "ok &= sqval_to_boolean(vm, ${arg_idx}, &${out_value})" 
    float: "ok &= sqval_to_float(vm, ${arg_idx}, &${out_value})"
    double: "ok &= sqval_to_number(vm, ${arg_idx}, &${out_value})"
    long: "ok &= sqval_to_long(vm, ${arg_idx}, &${out_value})"
    ssize_t: "ok &= sqval_to_ssize(vm, ${arg_idx}, &${out_value})"
    "unsigned long": "ok &= sqval_to_ulong(vm, ${arg_idx}, &${out_value})"
    "long long": "ok &= sqval_to_long_long(vm, ${arg_idx}, &${out_value})"
    "std::string": "ok &= sqval_to_std_string(vm, ${arg_idx}, &${out_value})"
    "String*": "std::string ${out_value}_tmp; ok &= sqval_to_std_string(vm, ${arg_idx}, &${out_value}_tmp); ${out_value} = cocos2d::String::create(${out_value}_tmp)"
    "char*": "std::string ${out_value}_tmp; ok &= sqval_to_std_string(vm, ${arg_idx}, &${out_value}_tmp); ${out_value} = ${out_value}_tmp.c_str()"
    "Point": "ok &= sqval_to_point(vm, ${arg_idx}, &${out_value})"
    "Vec2": "cocos2d::Vec2* ptr${arg_idx} = nullptr; ok &= sqval_to_vec2(vm, ${arg_idx}, ptr${arg_idx}); ${out_value} = *ptr${arg_idx}"
    "Vec3": "cocos2d::Vec3* ptr${arg_idx} = nullptr; ok &= sqval_to_vec3(vm, ${arg_idx}, ptr${arg_idx}); ${out_value} = *ptr${arg_idx}"
    "Vec4": "cocos2d::Vec4* ptr${arg_idx} = nullptr; ok &= sqval_to_vec4(vm, ${arg_idx}, ptr${arg_idx}); ${out_value} = *ptr${arg_idx}"
    "Rect": "cocos2d::Rect* ptr${arg_idx} = nullptr; ok &= sqval_to_rect(vm, ${arg_idx}, ptr${arg_idx}); ${out_value} = *ptr${arg_idx}"
    "Size": "cocos2d::Size* ptr${arg_idx} = nullptr; ok &= sqval_to_size(vm, ${arg_idx}, ptr${arg_idx}); ${out_value} = *ptr${arg_idx}"
    "Color4B": "cocos2d::Color4B *ptr${arg_idx} = nullptr; ok &=sqval_to_color4b(vm, ${arg_idx}, ptr${arg_idx}); ${out_value} = *ptr${arg_idx}"
    "Color4F": "cocos2d::Color4F *ptr${arg_idx} = nullptr; ok &=sqval_to_color4f(vm, ${arg_idx}, ptr${arg_idx}); ${out_value} = *ptr${arg_idx}"
    "Color3B": "cocos2d::Color3B *ptr${arg_idx} = nullptr; ok &= sqval_to_color3b(vm, ${arg_idx}, ptr${arg_idx}); ${out_value} = *ptr${arg_idx}"
    "PhysicsMaterial": "cocos2d::PhysicsMaterial *ptr${arg_idx} = nullptr; ok &= sqval_to_physics_material(vm, ${arg_idx}, ptr${arg_idx}); ${out_value} = *ptr${arg_idx}"
    "Quaternion": "cocos2d::Quaternion *ptr${arg_idx} = nullptr; ok &= sqval_to_quaternion(vm, ${arg_idx}, ptr${arg_idx}); ${out_value} = *ptr${arg_idx}"
    "Quaternion*": "ok &= sqval_to_quaternion(vm, ${arg_idx}, ${out_value})"
    "Array*": "ok &= sqval_to_array(vm, ${arg_idx}, &${out_value})"
    "Dictionary*": "ok &= sqval_to_dictionary(vm, ${arg_idx}, &${out_value})"
    "AffineTransform": "cocos2d::AffineTransform *ptr${arg_idx} = nullptr; ok &= sqval_to_affinetransform(vm, ${arg_idx}, ptr${arg_idx}); ${out_value} = *ptr${arg_idx}"
    "FontDefinition":  "cocos2d::FontDefinition *ptr${arg_idx} = nullptr; ok &= sqval_to_fontdefinition(vm, ${arg_idx}, ptr${arg_idx}); ${out_value} = *ptr${arg_idx}"
    "@Map<std::(basic_string<char>|string)>": "ok &= sqval_to_ccmap_string_key(vm, ${arg_idx}, &${out_value})"
    "Value": "ok &= sqval_to_ccvalue(vm, ${arg_idx}, &${out_value})"
    "ValueMap": "ok &= sqval_to_ccvaluemap(vm, ${arg_idx}, &${out_value})"
    "ValueMapIntKey": "ok &= sqval_to_ccvaluemapintkey(vm, ${arg_idx}, &${out_value})"
    "ValueVector": "ok &= sqval_to_ccvaluevector(vm, ${arg_idx}, &${out_value})"
    "kmMat4": "ok &= sqval_to_kmMat4(vm, ${arg_idx}, &${out_value})"
    "Mat4": "cocos2d::Mat4 *ptr${arg_idx} = nullptr; ok &= sqval_to_mat4(vm, ${arg_idx}, ptr${arg_idx}); ${out_value} = *ptr${arg_idx}"
    "BlendFunc": "cocos2d::BlendFunc *ptr${arg_idx} = nullptr; ok &= sqval_to_blendfunc(vm, ${arg_idx}, ptr${arg_idx}); ${out_value} = *ptr${arg_idx}"
    "_ttfConfig": "cocos2d::_ttfConfig *ptr${arg_idx} = nullptr; ok &= sqval_to_ttfconfig(vm, ${arg_idx}, ptr${arg_idx}); ${out_value} = *ptr${arg_idx}"
    "MeshVertexAttrib": "cocos2d::MeshVertexAttrib *ptr${arg_idx} = nullptr; ok &= sqval_to_mesh_vertex_attrib(vm, ${arg_idx}, ptr${arg_idx}); ${out_value} = *ptr${arg_idx}"
    "T2F_Quad": "cocos2d::T2F_Quad *ptr${arg_idx} = nullptr; ok &= sqval_to_t2fquad(vm, ${arg_idx}, ptr${arg_idx}); ${out_value} = *ptr${arg_idx}"
    "Animation3DData": "cocos2d::Animation3DData *ptr${arg_idx} = nullptr; ok &= sqval_to_animation3ddata(vm, ${arg_idx}, ptr${arg_idx}); ${out_value} = *ptr${arg_idx}"
    "Acceleration": "cocos2d::Acceleration *ptr${arg_idx} = nullptr; ok &= sqval_to_acceleration(vm, ${arg_idx}, ptr${arg_idx}); ${out_value} = *ptr${arg_idx}"
    "GLContextAttrs": "GLContextAttrs *ptr${arg_idx} = nullptr; ok &= sqval_to_glcontextattrs(vm, ${arg_idx}, ptr${arg_idx}); ${out_value} = *ptr${arg_idx}"
#    "Acceleration*": "ok &= sqval_to_acceleration(vm, ${arg_idx}, ${out_value})"
    "@vector<std::(basic_string<char>|string).*>": "ok &= sqval_to_std_vector_string(vm, ${arg_idx}, &${out_value})"
    "@vector<int.*>": "ok &= sqval_to_std_vector_int(vm, ${arg_idx}, &${out_value})"
    "@vector<float.*>": "ok &= sqval_to_std_vector_float(vm, ${arg_idx}, &${out_value})"
    "@vector<unsigned short.*>": "ok &= sqval_to_std_vector_ushort(vm, ${arg_idx}, &${out_value})"
    "@Vector<.*>": "ok &= sqval_to_ccvector(vm, ${arg_idx}, &${out_value})"
    "@vector<.*>": "ok &= sqval_to_ccvector_object<${arg.get_type_name($generator, True)}>(vm, ${arg_idx}, ${out_value})"
    "float*": "ok &= sqval_to_float_array(vm, ${arg_idx}, (const float **)&${out_value})"

    object: "ok &= sqval_to_object<${arg.to_string($generator).replace(\"*\", \"\")}>(vm, ${arg_idx}, &${out_value})"

  from_native:
    # native to lua
    int: "sq_pushinteger(vm, (SQInteger)${in_value})"
    "unsigned int": "sq_pushinteger(vm, (SQInteger)${in_value})"
    "unsigned short": "sq_pushinteger(vm, (SQInteger)${in_value})"
    "unsigned char": "sq_pushinteger(vm, (SQInteger)${in_value})"
    short: "sq_pushinteger(vm, (SQInteger)${in_value})"
    char: "sq_pushinteger(vm, (SQInteger)${in_value})"
    "long long": "sq_pushinteger(vm, (const SQInteger)${in_value})"
    "std::string": "sq_pushstring(vm, (const SQChar *)${in_value}.c_str(), -1)"
    "char*": "sq_pushstring(vm, (const SQChar *)${in_value}, -1)"
    "String*": "sq_pushstring(vm, (const SQChar *)${in_value}->getCString(), -1)"
    bool: "sq_pushbool(vm, (SQBool)${in_value})"
    float: "sq_pushfloat(vm, (SQFloat)${in_value})"
    double: "sq_pushfloat(vm, (SQFloat)${in_value})"
    long: "sq_pushinteger(vm, (SQInteger)${in_value})"
    ssize_t: "sq_pushinteger(vm, (SQInteger)${in_value})"
    "unsigned long": "sq_pushinteger(vm, (SQInteger)${in_value})"
    "Point": "point_to_sqval(vm, ${in_value})"
    "Vec2": "vec2_to_sqval(vm, ${in_value})"
    "Vec3": "vec3_to_sqval(vm, ${in_value})"
    "Vec4": "vec4_to_sqval(vm, ${in_value})"
    "Rect": "rect_to_sqval(vm, ${in_value})"
    "Size": "size_to_sqval(vm, ${in_value})"
    "Color4B": "color4b_to_sqval(vm, ${in_value})"
    "Color4F": "color4f_to_sqval(vm, ${in_value})"
    "Color3B": "color3b_to_sqval(vm, ${in_value})"
    "PhysicsMaterial": "physics_material_to_sqval(vm, ${in_value})"
    "PhysicsContactData*": "physics_contactdata_to_sqval(vm, ${in_value})"
    "PhysicsRayCastInfo": "physics_raycastinfo_to_sqval(vm, ${in_value})"
    "Array*": "array_to_sqval(vm, ${in_value})"
    "Dictionary*": "dictionary_to_sqval(vm, ${in_value})"
    "AffineTransform": "affinetransform_to_sqval(vm, ${in_value})"
    "FontDefinition": "fontdefinition_to_sqval(vm, ${in_value})"
    "@Vector<.*>": "ccvector_to_sqval(vm, ${in_value})"
    "@Map<std::(basic_string<char>|string)>": "ccmap_string_key_to_sqval(vm, ${in_value})"
    "Value": "ccvalue_to_sqval(vm, ${in_value})"
    "ValueMap": "ccvaluemap_to_sqval(vm, ${in_value})"
    "ValueMapIntKey": "ccvaluemapintkey_to_sqval(vm, ${in_value})"
    "ValueVector": "ccvaluevector_to_sqval(vm, ${in_value})"
    "Mat4": "mat4_to_sqval(vm, ${in_value})"
    "BlendFunc": "blendfunc_to_sqval(vm, ${in_value})"
    "_ttfConfig": "ttfconfig_to_sqval(vm, ${in_value})"
    "MeshVertexAttrib": "mesh_vertex_attrib_to_sqval(vm, ${in_value})"
    "T2F_Quad": "t2fquad_to_sqval(vm, ${in_value})"
    "Animation3DData": "animation3ddata_to_sqval(vm, ${in_value})"
    "Acceleration*": "acceleration_to_sqval(vm, ${in_value})"
    "Quaternion": "quaternion_to_sqval(vm, ${in_value})"
    "GLContextAttrs": "glcontextattrs_to_sqval(vm, ${in_value})"
    "AABB": "aabb_to_sqval(vm, ${in_value})"
    "Sprite3DData*": "sprite3ddata_to_sqval(vm, ${in_value})"
    "@vector<int.*>": "ccvector_int_to_sqval(vm, ${in_value})"
    "@vector<float.*>": "ccvector_float_to_sqval(vm, ${in_value})"
    "@vector<unsigned short.*>": "ccvector_ushort_to_sqval(vm, ${in_value})"
    "@vector<std::(basic_string<char>|string).*>": "ccvector_string_to_sqval(vm, ${in_value})"
    "@vector<.*>( &)?": "ccvector_object_to_sqval<${ntype.get_type_name($generator, True)}>(vm, \"${scriptname[1:-1]}\", ${in_value})"
    "std::function": "ccfunction_to_sqval(vm, ${in_value.split('->')[0]}, \"${in_value.split('->')[1]}\")"

    object: "object_to_sqval<${ntype.get_type_name($generator)}>(vm, \"${scriptname}\", (${ntype.get_type_name($generator)}*)${in_value})"

  to_native_var:
    int: "to_squirrel_variable_integer(vm, \"${arg_name}\", (SQInteger)${out_value}, SQTrue)"
    short: "to_squirrel_variable_integer(vm, \"${arg_name}\", (SQInteger)${out_value}, SQTrue)"
    long: "to_squirrel_variable_integer(vm, \"${arg_name}\", (SQInteger)${out_value}, SQTrue)"
    long long: "to_squirrel_variable_integer(vm, \"${arg_name}\", (SQInteger)${out_value}, SQTrue)"
    float: "to_squirrel_variable_float(vm, \"${arg_name}\", (SQFloat)${out_value}, SQTrue)"
    double: "to_squirrel_variable_float(vm, \"${arg_name}\", (SQFloat)${out_value}, SQTrue)"
    bool: "to_squirrel_variable_bool(vm, \"${arg_name}\", (SQBool)${out_value}, SQTrue)"
    "char*": "to_squirrel_variable_char(vm, \"${arg_name}\", ${out_value}, SQTrue)"
    "std::string": "to_squirrel_variable_string(vm, \"${arg_name}\", ${out_value}, SQTrue)"

    object: "to_squirrel_variable_object(vm, \"${arg_name}\", (SQUserPointer)&${out_value}, SQTrue)"

  to_script_type:
    int: "OT_INTEGER"
    "unsigned int": "OT_INTEGER"
    "unsigned char": "OT_INTEGER"
    short: "OT_INTEGER"
    "unsigned short": "OT_INTEGER"
    char: "OT_INTEGER"
    bool: "OT_BOOL"
    float: "OT_FLOAT"
    double: "OT_FLOAT"
    long: "OT_INTEGER"
    ssize_t: "OT_INTEGER"
    "unsigned long": "OT_INTEGER"
    "long long": "OT_INTEGER"
    "std::string": "OT_STRING"
    "String*": "OT_STRING"
    "char*": "OT_STRING"
    "Array*": "OT_ARRAY"
    "Dictionary*": "OT_TABLE"
    "@Vector<.*>": "OT_ARRAY"
    "@Map<std::(basic_string<char>|string)>": "OT_TABLE"
    "ValueMap": "OT_TABLE"
    "ValueMapIntKey": "OT_TABLE"
    "ValueVector": "OT_ARRAY"
    "@vector<std::(basic_string<char>|string)>": "OT_TABLE"
    "@vector<int.*>": "OT_ARRAY"
    "@vector<float.*>": "OT_ARRAY"
    "@vector<unsigned short.*>": "OT_ARRAY"
    "float*": "OT_ARRAY"
    "@std::function<.*>": "OT_CLOSURE"
    "@.*": "OT_INSTANCE"
