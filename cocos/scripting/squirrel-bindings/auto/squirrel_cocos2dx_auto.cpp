#include "squirrel_cocos2dx_auto.hpp"
#include "cocos2d.h"
#include "CocosGUI.h"
#include "SquirrelBasicConversion.h"


SQInteger squirrel_cocos2dx_Console_stop(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Console* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Console_stop'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->stop();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "stop", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Console_listenOnTCP(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Console* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Console_listenOnTCP'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        int arg0;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if (!ok)
            return 0;
        bool ret = cobj->listenOnTCP(arg0);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "listenOnTCP", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Console_listenOnFileDescriptor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Console* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Console_listenOnFileDescriptor'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        int arg0;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if (!ok)
            return 0;
        bool ret = cobj->listenOnFileDescriptor(arg0);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "listenOnFileDescriptor", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Console_log(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Console* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Console_log'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        const char* arg0;

        std::string arg0_tmp; ok &= sqval_to_std_string(vm, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
        if (!ok)
            return 0;
        cobj->log(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "log", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_Console_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.Console", -1);
    return 1;
}

void squirrel_cocos2dx_Console_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::Console", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_Console(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("Console"), -1);


    sq_pushstring(vm, _SC("Ref"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "stop", squirrel_cocos2dx_Console_stop);
    to_squirrel_function(vm, "listenOnTCP", squirrel_cocos2dx_Console_listenOnTCP);
    to_squirrel_function(vm, "listenOnFileDescriptor", squirrel_cocos2dx_Console_listenOnFileDescriptor);
    to_squirrel_function(vm, "log", squirrel_cocos2dx_Console_log);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_Console_typeof_meta);



    squirrel_cocos2dx_Console_push_c_class(vm);

    std::string typeName = typeid(cocos2d::Console).name();
    g_sqType[typeName] = "cc.Console";

    return 1;
}
SQInteger squirrel_cocos2dx_TransitionMoveInB_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        float arg0;
        cocos2d::Scene* arg1;
        ok &= sqval_to_float(vm, 2, &arg0);
        ok &= sqval_to_object<cocos2d::Scene>(vm, 3, &arg1);
        if(!ok)
            return 0;
        cocos2d::TransitionMoveInB* ret = cocos2d::TransitionMoveInB::create(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.TransitionMoveInB");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_TransitionMoveInB_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.TransitionMoveInB", -1);
    return 1;
}

void squirrel_cocos2dx_TransitionMoveInB_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::TransitionMoveInB", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::TransitionMoveInL", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TransitionScene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Scene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TransitionEaseScene", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_TransitionMoveInB(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("TransitionMoveInB"), -1);


    sq_pushstring(vm, _SC("TransitionMoveInL"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_TransitionMoveInB_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_TransitionMoveInB_typeof_meta);



    squirrel_cocos2dx_TransitionMoveInB_push_c_class(vm);

    std::string typeName = typeid(cocos2d::TransitionMoveInB).name();
    g_sqType[typeName] = "cc.TransitionMoveInB";

    return 1;
}
SQInteger squirrel_cocos2dx_TransitionMoveInL_action(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TransitionMoveInL* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TransitionMoveInL_action'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::ActionInterval* ret = cobj->action();
        object_to_sqval<cocos2d::ActionInterval>(vm, "cc.ActionInterval", (cocos2d::ActionInterval*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "action", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_TransitionMoveInL_easeActionWithAction(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TransitionMoveInL* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TransitionMoveInL_easeActionWithAction'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::ActionInterval* arg0;

        ok &= sqval_to_object<cocos2d::ActionInterval>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cocos2d::ActionInterval* ret = cobj->easeActionWithAction(arg0);
        object_to_sqval<cocos2d::ActionInterval>(vm, "cc.ActionInterval", (cocos2d::ActionInterval*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "easeActionWithAction", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TransitionMoveInL_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        float arg0;
        cocos2d::Scene* arg1;
        ok &= sqval_to_float(vm, 2, &arg0);
        ok &= sqval_to_object<cocos2d::Scene>(vm, 3, &arg1);
        if(!ok)
            return 0;
        cocos2d::TransitionMoveInL* ret = cocos2d::TransitionMoveInL::create(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.TransitionMoveInL");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_TransitionMoveInL_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.TransitionMoveInL", -1);
    return 1;
}

void squirrel_cocos2dx_TransitionMoveInL_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::TransitionMoveInL", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::TransitionScene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Scene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TransitionEaseScene", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_TransitionMoveInL(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("TransitionMoveInL"), -1);


    sq_pushstring(vm, _SC("TransitionScene"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "action", squirrel_cocos2dx_TransitionMoveInL_action);
    to_squirrel_function(vm, "easeActionWithAction", squirrel_cocos2dx_TransitionMoveInL_easeActionWithAction);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_TransitionMoveInL_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_TransitionMoveInL_typeof_meta);



    squirrel_cocos2dx_TransitionMoveInL_push_c_class(vm);

    std::string typeName = typeid(cocos2d::TransitionMoveInL).name();
    g_sqType[typeName] = "cc.TransitionMoveInL";

    return 1;
}
SQInteger squirrel_cocos2dx_TileMapAtlas_initWithTileFile(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TileMapAtlas* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TileMapAtlas_initWithTileFile'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 4) 
    {
        std::string arg0;
        std::string arg1;
        int arg2;
        int arg3;

        ok &= sqval_to_std_string(vm, 2, &arg0);

        ok &= sqval_to_std_string(vm, 3, &arg1);

        ok &= sqval_to_int32(vm, 4, (int *)&arg2);

        ok &= sqval_to_int32(vm, 5, (int *)&arg3);
        if (!ok)
            return 0;
        bool ret = cobj->initWithTileFile(arg0, arg1, arg2, arg3);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "initWithTileFile", (int)argc, 4);
    return 0;
}
SQInteger squirrel_cocos2dx_TileMapAtlas_releaseMap(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TileMapAtlas* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TileMapAtlas_releaseMap'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->releaseMap();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "releaseMap", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_TileMapAtlas_getTileAt(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TileMapAtlas* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TileMapAtlas_getTileAt'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec2 arg0;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cocos2d::Color3B ret = cobj->getTileAt(arg0);
        color3b_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getTileAt", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TileMapAtlas_setTile(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TileMapAtlas* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TileMapAtlas_setTile'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        cocos2d::Color3B arg0;
        cocos2d::Vec2 arg1;

        cocos2d::Color3B *ptr2 = nullptr; ok &= sqval_to_color3b(vm, 2, ptr2); arg0 = *ptr2;

        cocos2d::Vec2* ptr3 = nullptr; ok &= sqval_to_vec2(vm, 3, ptr3); arg1 = *ptr3;
        if (!ok)
            return 0;
        cobj->setTile(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setTile", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_TileMapAtlas_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 4)
    {
        std::string arg0;
        std::string arg1;
        int arg2;
        int arg3;
        ok &= sqval_to_std_string(vm, 2, &arg0);
        ok &= sqval_to_std_string(vm, 3, &arg1);
        ok &= sqval_to_int32(vm, 4, (int *)&arg2);
        ok &= sqval_to_int32(vm, 5, (int *)&arg3);
        if(!ok)
            return 0;
        cocos2d::TileMapAtlas* ret = cocos2d::TileMapAtlas::create(arg0, arg1, arg2, arg3);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.TileMapAtlas");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 4);
    return 0;
}
SQInteger squirrel_cocos2dx_TileMapAtlas_constructor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TileMapAtlas* cobj = nullptr;
    bool ok  = true;

    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj = new cocos2d::TileMapAtlas();
        sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
        cobj->retain();
        sq_setreleasehook(vm, 1, squirrel_releasehook_Ref);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "TileMapAtlas", (int)argc, 0);
    return 0;
}


SQInteger squirrel_cocos2dx_TileMapAtlas_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.TileMapAtlas", -1);
    return 1;
}

void squirrel_cocos2dx_TileMapAtlas_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::TileMapAtlas", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::AtlasNode", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TextureProtocol", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::BlendProtocol", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_TileMapAtlas(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("TileMapAtlas"), -1);


    sq_pushstring(vm, _SC("AtlasNode"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "constructor", squirrel_cocos2dx_TileMapAtlas_constructor);
    to_squirrel_function(vm, "initWithTileFile", squirrel_cocos2dx_TileMapAtlas_initWithTileFile);
    to_squirrel_function(vm, "releaseMap", squirrel_cocos2dx_TileMapAtlas_releaseMap);
    to_squirrel_function(vm, "getTileAt", squirrel_cocos2dx_TileMapAtlas_getTileAt);
    to_squirrel_function(vm, "setTile", squirrel_cocos2dx_TileMapAtlas_setTile);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_TileMapAtlas_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_TileMapAtlas_typeof_meta);



    squirrel_cocos2dx_TileMapAtlas_push_c_class(vm);

    std::string typeName = typeid(cocos2d::TileMapAtlas).name();
    g_sqType[typeName] = "cc.TileMapAtlas";

    return 1;
}
SQInteger squirrel_cocos2dx_TransitionMoveInT_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        float arg0;
        cocos2d::Scene* arg1;
        ok &= sqval_to_float(vm, 2, &arg0);
        ok &= sqval_to_object<cocos2d::Scene>(vm, 3, &arg1);
        if(!ok)
            return 0;
        cocos2d::TransitionMoveInT* ret = cocos2d::TransitionMoveInT::create(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.TransitionMoveInT");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_TransitionMoveInT_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.TransitionMoveInT", -1);
    return 1;
}

void squirrel_cocos2dx_TransitionMoveInT_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::TransitionMoveInT", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::TransitionMoveInL", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TransitionScene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Scene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TransitionEaseScene", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_TransitionMoveInT(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("TransitionMoveInT"), -1);


    sq_pushstring(vm, _SC("TransitionMoveInL"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_TransitionMoveInT_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_TransitionMoveInT_typeof_meta);



    squirrel_cocos2dx_TransitionMoveInT_push_c_class(vm);

    std::string typeName = typeid(cocos2d::TransitionMoveInT).name();
    g_sqType[typeName] = "cc.TransitionMoveInT";

    return 1;
}
SQInteger squirrel_cocos2dx_TMXTilesetInfo_getRectForGID(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TMXTilesetInfo* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXTilesetInfo_getRectForGID'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        unsigned int arg0;

        ok &= sqval_to_uint32(vm, 2, &arg0);
        if (!ok)
            return 0;
        cocos2d::Rect ret = cobj->getRectForGID(arg0);
        rect_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getRectForGID", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXTilesetInfo_constructor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TMXTilesetInfo* cobj = nullptr;
    bool ok  = true;

    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj = new cocos2d::TMXTilesetInfo();
        sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
        cobj->retain();
        sq_setreleasehook(vm, 1, squirrel_releasehook_Ref);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "TMXTilesetInfo", (int)argc, 0);
    return 0;
}


SQInteger squirrel_cocos2dx_TMXTilesetInfo_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.TMXTilesetInfo", -1);
    return 1;
}

void squirrel_cocos2dx_TMXTilesetInfo_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::TMXTilesetInfo", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_TMXTilesetInfo(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("TMXTilesetInfo"), -1);


    sq_pushstring(vm, _SC("Ref"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "constructor", squirrel_cocos2dx_TMXTilesetInfo_constructor);
    to_squirrel_function(vm, "getRectForGID", squirrel_cocos2dx_TMXTilesetInfo_getRectForGID);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_TMXTilesetInfo_typeof_meta);



    squirrel_cocos2dx_TMXTilesetInfo_push_c_class(vm);

    std::string typeName = typeid(cocos2d::TMXTilesetInfo).name();
    g_sqType[typeName] = "cc.TMXTilesetInfo";

    return 1;
}
SQInteger squirrel_cocos2dx_TransitionMoveInR_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        float arg0;
        cocos2d::Scene* arg1;
        ok &= sqval_to_float(vm, 2, &arg0);
        ok &= sqval_to_object<cocos2d::Scene>(vm, 3, &arg1);
        if(!ok)
            return 0;
        cocos2d::TransitionMoveInR* ret = cocos2d::TransitionMoveInR::create(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.TransitionMoveInR");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_TransitionMoveInR_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.TransitionMoveInR", -1);
    return 1;
}

void squirrel_cocos2dx_TransitionMoveInR_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::TransitionMoveInR", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::TransitionMoveInL", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TransitionScene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Scene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TransitionEaseScene", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_TransitionMoveInR(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("TransitionMoveInR"), -1);


    sq_pushstring(vm, _SC("TransitionMoveInL"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_TransitionMoveInR_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_TransitionMoveInR_typeof_meta);



    squirrel_cocos2dx_TransitionMoveInR_push_c_class(vm);

    std::string typeName = typeid(cocos2d::TransitionMoveInR).name();
    g_sqType[typeName] = "cc.TransitionMoveInR";

    return 1;
}
SQInteger squirrel_cocos2dx_Color4F_equals(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Color4F* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Color4F_equals'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Color4F arg0;

        cocos2d::Color4F *ptr2 = nullptr; ok &=sqval_to_color4f(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        bool ret = cobj->equals(arg0);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "equals", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Color4F_constructor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Color4F* cobj = nullptr;
    bool ok  = true;

    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 4) {
            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INTEGER && sq_gettype(vm, 5) != OT_FLOAT) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);

            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);

            if (!ok) { break; }
            float arg2;
            ok &= sqval_to_float(vm, 4, &arg2);

            if (!ok) { break; }
            float arg3;
            ok &= sqval_to_float(vm, 5, &arg3);

            if (!ok) { break; }
            cobj = new cocos2d::Color4F(arg0, arg1, arg2, arg3);
            sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
            sq_setreleasehook(vm, 1, squirrel_releasehook_Color4F);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 0) {

            cobj = new cocos2d::Color4F();
            sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
            sq_setreleasehook(vm, 1, squirrel_releasehook_Color4F);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Color3B")) {
                break;
            }

            cocos2d::Color3B arg0;
            cocos2d::Color3B *ptr2 = nullptr; ok &= sqval_to_color3b(vm, 2, ptr2); arg0 = *ptr2;

            if (!ok) { break; }
            cobj = new cocos2d::Color4F(arg0);
            sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
            sq_setreleasehook(vm, 1, squirrel_releasehook_Color4F);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Color4B")) {
                break;
            }

            cocos2d::Color4B arg0;
            cocos2d::Color4B *ptr2 = nullptr; ok &=sqval_to_color4b(vm, 2, ptr2); arg0 = *ptr2;

            if (!ok) { break; }
            cobj = new cocos2d::Color4F(arg0);
            sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
            sq_setreleasehook(vm, 1, squirrel_releasehook_Color4F);
            return 1;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "Color4F", (int)argc, 1);
    return 0;
}


SQInteger squirrel_cocos2dx_Color4F_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.Color4F", -1);
    return 1;
}

SQInteger squirrel_cocos2dx_Color4F_get_meta(HSQUIRRELVM vm)
{
    cocos2d::Color4F *cobj = nullptr;
    if (SQ_FAILED(sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0))) {
        CCLOG("cocos2d::Color4F sq_getinstanceup failed.");
        sq_pushnull(vm);
        return 1;
    }

    const char *varName = nullptr;
    sq_getstring(vm, 2, &varName);
    
    do {
        if (strcmp(varName, "r") == 0) {
            sq_pushfloat(vm, (SQFloat)cobj->r);
            break;
        }
        if (strcmp(varName, "g") == 0) {
            sq_pushfloat(vm, (SQFloat)cobj->g);
            break;
        }
        if (strcmp(varName, "b") == 0) {
            sq_pushfloat(vm, (SQFloat)cobj->b);
            break;
        }
        if (strcmp(varName, "a") == 0) {
            sq_pushfloat(vm, (SQFloat)cobj->a);
            break;
        }

        return 0;
        
    } while(0);

    return 1;
}

SQInteger squirrel_cocos2dx_Color4F_set_meta(HSQUIRRELVM vm)
{
    cocos2d::Color4F *cobj = nullptr;
    if (SQ_FAILED(sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0))) {
        CCLOG("cocos2d::Color4F sq_getinstanceup failed.");
        return 0;
    }

    bool ok  = true;
    const char *varName = nullptr;
    sq_getstring(vm, 2, &varName);
    
    do {
        if (strcmp(varName, "r") == 0) {
            ok &= sqval_to_float(vm, 3, &cobj->r);
            if (! ok) {
                return 0;
            }
            break;
        }
        if (strcmp(varName, "g") == 0) {
            ok &= sqval_to_float(vm, 3, &cobj->g);
            if (! ok) {
                return 0;
            }
            break;
        }
        if (strcmp(varName, "b") == 0) {
            ok &= sqval_to_float(vm, 3, &cobj->b);
            if (! ok) {
                return 0;
            }
            break;
        }
        if (strcmp(varName, "a") == 0) {
            ok &= sqval_to_float(vm, 3, &cobj->a);
            if (! ok) {
                return 0;
            }
            break;
        }

        CCLOG("specified variable is not found in cocos2d::Color4F");
    } while(0);

    return 0;
}

void squirrel_cocos2dx_Color4F_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::Color4F", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_Color4F(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("Color4F"), -1);

    sq_newclass(vm, SQFalse);

    to_squirrel_function(vm, "constructor", squirrel_cocos2dx_Color4F_constructor);
    to_squirrel_function(vm, "equals", squirrel_cocos2dx_Color4F_equals);

    to_squirrel_function(vm, "_get", squirrel_cocos2dx_Color4F_get_meta);
    to_squirrel_function(vm, "_set", squirrel_cocos2dx_Color4F_set_meta);
    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_Color4F_typeof_meta);

    to_squirrel_variable_object(vm, "WHITE", (SQUserPointer)&cocos2d::Color4F::WHITE, SQTrue);
    to_squirrel_variable_object(vm, "YELLOW", (SQUserPointer)&cocos2d::Color4F::YELLOW, SQTrue);
    to_squirrel_variable_object(vm, "BLUE", (SQUserPointer)&cocos2d::Color4F::BLUE, SQTrue);
    to_squirrel_variable_object(vm, "GREEN", (SQUserPointer)&cocos2d::Color4F::GREEN, SQTrue);
    to_squirrel_variable_object(vm, "RED", (SQUserPointer)&cocos2d::Color4F::RED, SQTrue);
    to_squirrel_variable_object(vm, "MAGENTA", (SQUserPointer)&cocos2d::Color4F::MAGENTA, SQTrue);
    to_squirrel_variable_object(vm, "BLACK", (SQUserPointer)&cocos2d::Color4F::BLACK, SQTrue);
    to_squirrel_variable_object(vm, "ORANGE", (SQUserPointer)&cocos2d::Color4F::ORANGE, SQTrue);
    to_squirrel_variable_object(vm, "GRAY", (SQUserPointer)&cocos2d::Color4F::GRAY, SQTrue);


    squirrel_cocos2dx_Color4F_push_c_class(vm);

    std::string typeName = typeid(cocos2d::Color4F).name();
    g_sqType[typeName] = "cc.Color4F";

    return 1;
}
SQInteger squirrel_cocos2dx_Hide_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        cocos2d::Hide* ret = cocos2d::Hide::create();
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.Hide");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 0);
    return 0;
}

SQInteger squirrel_cocos2dx_Hide_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.Hide", -1);
    return 1;
}

void squirrel_cocos2dx_Hide_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::Hide", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionInstant", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_Hide(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("Hide"), -1);


    sq_pushstring(vm, _SC("ActionInstant"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_Hide_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_Hide_typeof_meta);



    squirrel_cocos2dx_Hide_push_c_class(vm);

    std::string typeName = typeid(cocos2d::Hide).name();
    g_sqType[typeName] = "cc.Hide";

    return 1;
}
SQInteger squirrel_cocos2dx_Scheduler_setTimeScale(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Scheduler* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Scheduler_setTimeScale'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setTimeScale(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setTimeScale", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Scheduler_getTimeScale(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Scheduler* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Scheduler_getTimeScale'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getTimeScale();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getTimeScale", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Scheduler_constructor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Scheduler* cobj = nullptr;
    bool ok  = true;

    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj = new cocos2d::Scheduler();
        sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
        cobj->retain();
        sq_setreleasehook(vm, 1, squirrel_releasehook_Ref);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "Scheduler", (int)argc, 0);
    return 0;
}


SQInteger squirrel_cocos2dx_Scheduler_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.Scheduler", -1);
    return 1;
}

void squirrel_cocos2dx_Scheduler_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::Scheduler", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_Scheduler(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("Scheduler"), -1);


    sq_pushstring(vm, _SC("Ref"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "constructor", squirrel_cocos2dx_Scheduler_constructor);
    to_squirrel_function(vm, "setTimeScale", squirrel_cocos2dx_Scheduler_setTimeScale);
    to_squirrel_function(vm, "getTimeScale", squirrel_cocos2dx_Scheduler_getTimeScale);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_Scheduler_typeof_meta);

    to_squirrel_variable_integer(vm, "PRIORITY_SYSTEM", (SQInteger)cocos2d::Scheduler::PRIORITY_SYSTEM, SQTrue);
    to_squirrel_variable_integer(vm, "PRIORITY_NON_SYSTEM_MIN", (SQInteger)cocos2d::Scheduler::PRIORITY_NON_SYSTEM_MIN, SQTrue);


    squirrel_cocos2dx_Scheduler_push_c_class(vm);

    std::string typeName = typeid(cocos2d::Scheduler).name();
    g_sqType[typeName] = "cc.Scheduler";

    return 1;
}
SQInteger squirrel_cocos2dx_Color4B_constructor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Color4B* cobj = nullptr;
    bool ok  = true;

    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 4) {
            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INTEGER && sq_gettype(vm, 5) != OT_FLOAT) {
                break;
            }

            uint16_t arg0;
            ok &= sqval_to_uint16(vm, 2, (uint16_t *)&arg0);

            if (!ok) { break; }
            uint16_t arg1;
            ok &= sqval_to_uint16(vm, 3, (uint16_t *)&arg1);

            if (!ok) { break; }
            uint16_t arg2;
            ok &= sqval_to_uint16(vm, 4, (uint16_t *)&arg2);

            if (!ok) { break; }
            uint16_t arg3;
            ok &= sqval_to_uint16(vm, 5, (uint16_t *)&arg3);

            if (!ok) { break; }
            cobj = new cocos2d::Color4B(arg0, arg1, arg2, arg3);
            sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
            sq_setreleasehook(vm, 1, squirrel_releasehook_Color4B);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 0) {

            cobj = new cocos2d::Color4B();
            sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
            sq_setreleasehook(vm, 1, squirrel_releasehook_Color4B);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Color3B")) {
                break;
            }

            cocos2d::Color3B arg0;
            cocos2d::Color3B *ptr2 = nullptr; ok &= sqval_to_color3b(vm, 2, ptr2); arg0 = *ptr2;

            if (!ok) { break; }
            cobj = new cocos2d::Color4B(arg0);
            sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
            sq_setreleasehook(vm, 1, squirrel_releasehook_Color4B);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Color4F")) {
                break;
            }

            cocos2d::Color4F arg0;
            cocos2d::Color4F *ptr2 = nullptr; ok &=sqval_to_color4f(vm, 2, ptr2); arg0 = *ptr2;

            if (!ok) { break; }
            cobj = new cocos2d::Color4B(arg0);
            sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
            sq_setreleasehook(vm, 1, squirrel_releasehook_Color4B);
            return 1;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "Color4B", (int)argc, 1);
    return 0;
}


SQInteger squirrel_cocos2dx_Color4B_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.Color4B", -1);
    return 1;
}

SQInteger squirrel_cocos2dx_Color4B_get_meta(HSQUIRRELVM vm)
{
    cocos2d::Color4B *cobj = nullptr;
    if (SQ_FAILED(sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0))) {
        CCLOG("cocos2d::Color4B sq_getinstanceup failed.");
        sq_pushnull(vm);
        return 1;
    }

    const char *varName = nullptr;
    sq_getstring(vm, 2, &varName);
    
    do {
        if (strcmp(varName, "r") == 0) {
            sq_pushinteger(vm, (SQInteger)cobj->r);
            break;
        }
        if (strcmp(varName, "g") == 0) {
            sq_pushinteger(vm, (SQInteger)cobj->g);
            break;
        }
        if (strcmp(varName, "b") == 0) {
            sq_pushinteger(vm, (SQInteger)cobj->b);
            break;
        }
        if (strcmp(varName, "a") == 0) {
            sq_pushinteger(vm, (SQInteger)cobj->a);
            break;
        }

        return 0;
        
    } while(0);

    return 1;
}

SQInteger squirrel_cocos2dx_Color4B_set_meta(HSQUIRRELVM vm)
{
    cocos2d::Color4B *cobj = nullptr;
    if (SQ_FAILED(sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0))) {
        CCLOG("cocos2d::Color4B sq_getinstanceup failed.");
        return 0;
    }

    bool ok  = true;
    const char *varName = nullptr;
    sq_getstring(vm, 2, &varName);
    
    do {
        if (strcmp(varName, "r") == 0) {
            ok &= sqval_to_uint16(vm, 3, (uint16_t *)&cobj->r);
            if (! ok) {
                return 0;
            }
            break;
        }
        if (strcmp(varName, "g") == 0) {
            ok &= sqval_to_uint16(vm, 3, (uint16_t *)&cobj->g);
            if (! ok) {
                return 0;
            }
            break;
        }
        if (strcmp(varName, "b") == 0) {
            ok &= sqval_to_uint16(vm, 3, (uint16_t *)&cobj->b);
            if (! ok) {
                return 0;
            }
            break;
        }
        if (strcmp(varName, "a") == 0) {
            ok &= sqval_to_uint16(vm, 3, (uint16_t *)&cobj->a);
            if (! ok) {
                return 0;
            }
            break;
        }

        CCLOG("specified variable is not found in cocos2d::Color4B");
    } while(0);

    return 0;
}

void squirrel_cocos2dx_Color4B_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::Color4B", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_Color4B(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("Color4B"), -1);

    sq_newclass(vm, SQFalse);

    to_squirrel_function(vm, "constructor", squirrel_cocos2dx_Color4B_constructor);

    to_squirrel_function(vm, "_get", squirrel_cocos2dx_Color4B_get_meta);
    to_squirrel_function(vm, "_set", squirrel_cocos2dx_Color4B_set_meta);
    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_Color4B_typeof_meta);

    to_squirrel_variable_object(vm, "WHITE", (SQUserPointer)&cocos2d::Color4B::WHITE, SQTrue);
    to_squirrel_variable_object(vm, "YELLOW", (SQUserPointer)&cocos2d::Color4B::YELLOW, SQTrue);
    to_squirrel_variable_object(vm, "BLUE", (SQUserPointer)&cocos2d::Color4B::BLUE, SQTrue);
    to_squirrel_variable_object(vm, "GREEN", (SQUserPointer)&cocos2d::Color4B::GREEN, SQTrue);
    to_squirrel_variable_object(vm, "RED", (SQUserPointer)&cocos2d::Color4B::RED, SQTrue);
    to_squirrel_variable_object(vm, "MAGENTA", (SQUserPointer)&cocos2d::Color4B::MAGENTA, SQTrue);
    to_squirrel_variable_object(vm, "BLACK", (SQUserPointer)&cocos2d::Color4B::BLACK, SQTrue);
    to_squirrel_variable_object(vm, "ORANGE", (SQUserPointer)&cocos2d::Color4B::ORANGE, SQTrue);
    to_squirrel_variable_object(vm, "GRAY", (SQUserPointer)&cocos2d::Color4B::GRAY, SQTrue);


    squirrel_cocos2dx_Color4B_push_c_class(vm);

    std::string typeName = typeid(cocos2d::Color4B).name();
    g_sqType[typeName] = "cc.Color4B";

    return 1;
}
SQInteger squirrel_cocos2dx_AnimationCache_getAnimation(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::AnimationCache* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_AnimationCache_getAnimation'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        cocos2d::Animation* ret = cobj->getAnimation(arg0);
        object_to_sqval<cocos2d::Animation>(vm, "cc.Animation", (cocos2d::Animation*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getAnimation", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_AnimationCache_addAnimation(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::AnimationCache* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_AnimationCache_addAnimation'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        cocos2d::Animation* arg0;
        std::string arg1;

        ok &= sqval_to_object<cocos2d::Animation>(vm, 2, &arg0);

        ok &= sqval_to_std_string(vm, 3, &arg1);
        if (!ok)
            return 0;
        cobj->addAnimation(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "addAnimation", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_AnimationCache_addAnimationsWithFile(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::AnimationCache* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_AnimationCache_addAnimationsWithFile'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->addAnimationsWithFile(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "addAnimationsWithFile", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_AnimationCache_init(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::AnimationCache* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_AnimationCache_init'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->init();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "init", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_AnimationCache_addAnimationsWithDictionary(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::AnimationCache* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_AnimationCache_addAnimationsWithDictionary'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        cocos2d::ValueMap arg0;
        std::string arg1;

        ok &= sqval_to_ccvaluemap(vm, 2, &arg0);

        ok &= sqval_to_std_string(vm, 3, &arg1);
        if (!ok)
            return 0;
        cobj->addAnimationsWithDictionary(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "addAnimationsWithDictionary", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_AnimationCache_removeAnimation(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::AnimationCache* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_AnimationCache_removeAnimation'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->removeAnimation(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "removeAnimation", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_AnimationCache_destroyInstance_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        cocos2d::AnimationCache::destroyInstance();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "destroyInstance", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_AnimationCache_getInstance_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        cocos2d::AnimationCache* ret = cocos2d::AnimationCache::getInstance();
        object_to_sqval<cocos2d::AnimationCache>(vm, "cc.AnimationCache", (cocos2d::AnimationCache*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "getInstance", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_AnimationCache_constructor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::AnimationCache* cobj = nullptr;
    bool ok  = true;

    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj = new cocos2d::AnimationCache();
        sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
        cobj->retain();
        sq_setreleasehook(vm, 1, squirrel_releasehook_Ref);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "AnimationCache", (int)argc, 0);
    return 0;
}


SQInteger squirrel_cocos2dx_AnimationCache_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.AnimationCache", -1);
    return 1;
}

void squirrel_cocos2dx_AnimationCache_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::AnimationCache", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_AnimationCache(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("AnimationCache"), -1);


    sq_pushstring(vm, _SC("Ref"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "constructor", squirrel_cocos2dx_AnimationCache_constructor);
    to_squirrel_function(vm, "getAnimation", squirrel_cocos2dx_AnimationCache_getAnimation);
    to_squirrel_function(vm, "addAnimation", squirrel_cocos2dx_AnimationCache_addAnimation);
    to_squirrel_function(vm, "addAnimationsWithFile", squirrel_cocos2dx_AnimationCache_addAnimationsWithFile);
    to_squirrel_function(vm, "init", squirrel_cocos2dx_AnimationCache_init);
    to_squirrel_function(vm, "addAnimationsWithDictionary", squirrel_cocos2dx_AnimationCache_addAnimationsWithDictionary);
    to_squirrel_function(vm, "removeAnimation", squirrel_cocos2dx_AnimationCache_removeAnimation);
    to_squirrel_function(vm, "destroyInstance", squirrel_cocos2dx_AnimationCache_destroyInstance_static, SQTrue);
    to_squirrel_function(vm, "getInstance", squirrel_cocos2dx_AnimationCache_getInstance_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_AnimationCache_typeof_meta);



    squirrel_cocos2dx_AnimationCache_push_c_class(vm);

    std::string typeName = typeid(cocos2d::AnimationCache).name();
    g_sqType[typeName] = "cc.AnimationCache";

    return 1;
}
SQInteger squirrel_cocos2dx_ActionCamera_setEye(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ActionCamera* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ActionCamera_setEye'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 3) {
            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);

            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);

            if (!ok) { break; }
            float arg2;
            ok &= sqval_to_float(vm, 4, &arg2);

            if (!ok) { break; }
            cobj->setEye(arg0, arg1, arg2);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Vec3")) {
                break;
            }

            cocos2d::Vec3 arg0;
            cocos2d::Vec3* ptr2 = nullptr; ok &= sqval_to_vec3(vm, 2, ptr2); arg0 = *ptr2;

            if (!ok) { break; }
            cobj->setEye(arg0);
            return 0;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setEye", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ActionCamera_getEye(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ActionCamera* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ActionCamera_getEye'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::Vec3& ret = cobj->getEye();
        vec3_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getEye", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ActionCamera_setUp(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ActionCamera* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ActionCamera_setUp'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec3 arg0;

        cocos2d::Vec3* ptr2 = nullptr; ok &= sqval_to_vec3(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->setUp(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setUp", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ActionCamera_getCenter(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ActionCamera* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ActionCamera_getCenter'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::Vec3& ret = cobj->getCenter();
        vec3_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getCenter", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ActionCamera_setCenter(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ActionCamera* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ActionCamera_setCenter'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec3 arg0;

        cocos2d::Vec3* ptr2 = nullptr; ok &= sqval_to_vec3(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->setCenter(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setCenter", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ActionCamera_getUp(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ActionCamera* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ActionCamera_getUp'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::Vec3& ret = cobj->getUp();
        vec3_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getUp", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ActionCamera_constructor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ActionCamera* cobj = nullptr;
    bool ok  = true;

    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj = new cocos2d::ActionCamera();
        sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
        cobj->retain();
        sq_setreleasehook(vm, 1, squirrel_releasehook_Ref);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "ActionCamera", (int)argc, 0);
    return 0;
}


SQInteger squirrel_cocos2dx_ActionCamera_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.ActionCamera", -1);
    return 1;
}

void squirrel_cocos2dx_ActionCamera_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::ActionCamera", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_ActionCamera(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("ActionCamera"), -1);


    sq_pushstring(vm, _SC("ActionInterval"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "constructor", squirrel_cocos2dx_ActionCamera_constructor);
    to_squirrel_function(vm, "setEye", squirrel_cocos2dx_ActionCamera_setEye);
    to_squirrel_function(vm, "getEye", squirrel_cocos2dx_ActionCamera_getEye);
    to_squirrel_function(vm, "setUp", squirrel_cocos2dx_ActionCamera_setUp);
    to_squirrel_function(vm, "getCenter", squirrel_cocos2dx_ActionCamera_getCenter);
    to_squirrel_function(vm, "setCenter", squirrel_cocos2dx_ActionCamera_setCenter);
    to_squirrel_function(vm, "getUp", squirrel_cocos2dx_ActionCamera_getUp);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_ActionCamera_typeof_meta);



    squirrel_cocos2dx_ActionCamera_push_c_class(vm);

    std::string typeName = typeid(cocos2d::ActionCamera).name();
    g_sqType[typeName] = "cc.ActionCamera";

    return 1;
}
SQInteger squirrel_cocos2dx_ProgressFromTo_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 3)
    {
        float arg0;
        float arg1;
        float arg2;
        ok &= sqval_to_float(vm, 2, &arg0);
        ok &= sqval_to_float(vm, 3, &arg1);
        ok &= sqval_to_float(vm, 4, &arg2);
        if(!ok)
            return 0;
        cocos2d::ProgressFromTo* ret = cocos2d::ProgressFromTo::create(arg0, arg1, arg2);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.ProgressFromTo");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 3);
    return 0;
}

SQInteger squirrel_cocos2dx_ProgressFromTo_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.ProgressFromTo", -1);
    return 1;
}

void squirrel_cocos2dx_ProgressFromTo_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::ProgressFromTo", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_ProgressFromTo(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("ProgressFromTo"), -1);


    sq_pushstring(vm, _SC("ActionInterval"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_ProgressFromTo_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_ProgressFromTo_typeof_meta);



    squirrel_cocos2dx_ProgressFromTo_push_c_class(vm);

    std::string typeName = typeid(cocos2d::ProgressFromTo).name();
    g_sqType[typeName] = "cc.ProgressFromTo";

    return 1;
}
SQInteger squirrel_cocos2dx_ParticleSmoke_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        cocos2d::ParticleSmoke* ret = cocos2d::ParticleSmoke::create();
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.ParticleSmoke");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSmoke_createWithTotalParticles_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if(!ok)
            return 0;
        cocos2d::ParticleSmoke* ret = cocos2d::ParticleSmoke::createWithTotalParticles(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.ParticleSmoke");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "createWithTotalParticles", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_ParticleSmoke_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.ParticleSmoke", -1);
    return 1;
}

void squirrel_cocos2dx_ParticleSmoke_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::ParticleSmoke", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ParticleSystemQuad", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ParticleSystem", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TextureProtocol", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::BlendProtocol", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_ParticleSmoke(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("ParticleSmoke"), -1);


    sq_pushstring(vm, _SC("ParticleSystemQuad"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_ParticleSmoke_create_static, SQTrue);
    to_squirrel_function(vm, "createWithTotalParticles", squirrel_cocos2dx_ParticleSmoke_createWithTotalParticles_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_ParticleSmoke_typeof_meta);



    squirrel_cocos2dx_ParticleSmoke_push_c_class(vm);

    std::string typeName = typeid(cocos2d::ParticleSmoke).name();
    g_sqType[typeName] = "cc.ParticleSmoke";

    return 1;
}
SQInteger squirrel_cocos2dx_MoveTo_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        float arg0;
        cocos2d::Vec2 arg1;
        ok &= sqval_to_float(vm, 2, &arg0);
        cocos2d::Vec2* ptr3 = nullptr; ok &= sqval_to_vec2(vm, 3, ptr3); arg1 = *ptr3;
        if(!ok)
            return 0;
        cocos2d::MoveTo* ret = cocos2d::MoveTo::create(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.MoveTo");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_MoveTo_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.MoveTo", -1);
    return 1;
}

void squirrel_cocos2dx_MoveTo_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::MoveTo", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::MoveBy", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_MoveTo(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("MoveTo"), -1);


    sq_pushstring(vm, _SC("MoveBy"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_MoveTo_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_MoveTo_typeof_meta);



    squirrel_cocos2dx_MoveTo_push_c_class(vm);

    std::string typeName = typeid(cocos2d::MoveTo).name();
    g_sqType[typeName] = "cc.MoveTo";

    return 1;
}
SQInteger squirrel_cocos2dx_JumpBy_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 4)
    {
        float arg0;
        cocos2d::Vec2 arg1;
        float arg2;
        int arg3;
        ok &= sqval_to_float(vm, 2, &arg0);
        cocos2d::Vec2* ptr3 = nullptr; ok &= sqval_to_vec2(vm, 3, ptr3); arg1 = *ptr3;
        ok &= sqval_to_float(vm, 4, &arg2);
        ok &= sqval_to_int32(vm, 5, (int *)&arg3);
        if(!ok)
            return 0;
        cocos2d::JumpBy* ret = cocos2d::JumpBy::create(arg0, arg1, arg2, arg3);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.JumpBy");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 4);
    return 0;
}

SQInteger squirrel_cocos2dx_JumpBy_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.JumpBy", -1);
    return 1;
}

void squirrel_cocos2dx_JumpBy_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::JumpBy", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_JumpBy(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("JumpBy"), -1);


    sq_pushstring(vm, _SC("ActionInterval"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_JumpBy_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_JumpBy_typeof_meta);



    squirrel_cocos2dx_JumpBy_push_c_class(vm);

    std::string typeName = typeid(cocos2d::JumpBy).name();
    g_sqType[typeName] = "cc.JumpBy";

    return 1;
}
SQInteger squirrel_cocos2dx_EventListenerKeyboard_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        cocos2d::EventListenerKeyboard* ret = cocos2d::EventListenerKeyboard::create();
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.EventListenerKeyboard");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 0);
    return 0;
}

SQInteger squirrel_cocos2dx_EventListenerKeyboard_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.EventListenerKeyboard", -1);
    return 1;
}

void squirrel_cocos2dx_EventListenerKeyboard_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::EventListenerKeyboard", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::EventListener", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_EventListenerKeyboard(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("EventListenerKeyboard"), -1);


    sq_pushstring(vm, _SC("EventListener"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_EventListenerKeyboard_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_EventListenerKeyboard_typeof_meta);

    to_squirrel_variable_string(vm, "LISTENER_ID", cocos2d::EventListenerKeyboard::LISTENER_ID, SQTrue);


    squirrel_cocos2dx_EventListenerKeyboard_push_c_class(vm);

    std::string typeName = typeid(cocos2d::EventListenerKeyboard).name();
    g_sqType[typeName] = "cc.EventListenerKeyboard";

    return 1;
}
SQInteger squirrel_cocos2dx_EventListenerMouse_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        cocos2d::EventListenerMouse* ret = cocos2d::EventListenerMouse::create();
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.EventListenerMouse");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 0);
    return 0;
}

SQInteger squirrel_cocos2dx_EventListenerMouse_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.EventListenerMouse", -1);
    return 1;
}

SQInteger squirrel_cocos2dx_EventListenerMouse_get_meta(HSQUIRRELVM vm)
{
    cocos2d::EventListenerMouse *cobj = nullptr;
    if (SQ_FAILED(sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0))) {
        CCLOG("cocos2d::EventListenerMouse sq_getinstanceup failed.");
        sq_pushnull(vm);
        return 1;
    }

    const char *varName = nullptr;
    sq_getstring(vm, 2, &varName);
    
    do {
        if (strcmp(varName, "onMouseDown") == 0) {
            ccfunction_to_sqval(vm, cobj, "onMouseDown");
            break;
        }
        if (strcmp(varName, "onMouseUp") == 0) {
            ccfunction_to_sqval(vm, cobj, "onMouseUp");
            break;
        }
        if (strcmp(varName, "onMouseMove") == 0) {
            ccfunction_to_sqval(vm, cobj, "onMouseMove");
            break;
        }
        if (strcmp(varName, "onMouseScroll") == 0) {
            ccfunction_to_sqval(vm, cobj, "onMouseScroll");
            break;
        }

        return 0;
        
    } while(0);

    return 1;
}

SQInteger squirrel_cocos2dx_EventListenerMouse_set_meta(HSQUIRRELVM vm)
{
    cocos2d::EventListenerMouse *cobj = nullptr;
    if (SQ_FAILED(sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0))) {
        CCLOG("cocos2d::EventListenerMouse sq_getinstanceup failed.");
        return 0;
    }

    bool ok  = true;
    const char *varName = nullptr;
    sq_getstring(vm, 2, &varName);
    
    do {
        if (strcmp(varName, "onMouseDown") == 0) {
            HSQOBJECT callback3;
            sq_getstackobj(vm, 3, &callback3);
            do {
			    // Lambda binding for squirrel
			    cobj->onMouseDown = [vm, callback3](cocos2d::Event* larg0) -> void {
			        if (sq_getrefcount(vm, (HSQOBJECT *)&callback3) > 0) {
			            sq_pushobject(vm, callback3);
			            sq_push(vm, 1);
			            object_to_sqval<cocos2d::Event>(vm, "cc.Event", (cocos2d::Event*)larg0);
			            sq_call(vm, 2, SQFalse, SQTrue);
			            sq_poptop(vm);
			        }
			    };
			} while(0);
            if (! ok) {
                return 0;
            }
            _SquirrelObject *sqobj = (_SquirrelObject *)cobj->_scriptObject;
            sqobj->addClosure("onMouseDown", callback3);
            break;
        }
        if (strcmp(varName, "onMouseUp") == 0) {
            HSQOBJECT callback3;
            sq_getstackobj(vm, 3, &callback3);
            do {
			    // Lambda binding for squirrel
			    cobj->onMouseUp = [vm, callback3](cocos2d::Event* larg0) -> void {
			        if (sq_getrefcount(vm, (HSQOBJECT *)&callback3) > 0) {
			            sq_pushobject(vm, callback3);
			            sq_push(vm, 1);
			            object_to_sqval<cocos2d::Event>(vm, "cc.Event", (cocos2d::Event*)larg0);
			            sq_call(vm, 2, SQFalse, SQTrue);
			            sq_poptop(vm);
			        }
			    };
			} while(0);
            if (! ok) {
                return 0;
            }
            _SquirrelObject *sqobj = (_SquirrelObject *)cobj->_scriptObject;
            sqobj->addClosure("onMouseUp", callback3);
            break;
        }
        if (strcmp(varName, "onMouseMove") == 0) {
            HSQOBJECT callback3;
            sq_getstackobj(vm, 3, &callback3);
            do {
			    // Lambda binding for squirrel
			    cobj->onMouseMove = [vm, callback3](cocos2d::Event* larg0) -> void {
			        if (sq_getrefcount(vm, (HSQOBJECT *)&callback3) > 0) {
			            sq_pushobject(vm, callback3);
			            sq_push(vm, 1);
			            object_to_sqval<cocos2d::Event>(vm, "cc.Event", (cocos2d::Event*)larg0);
			            sq_call(vm, 2, SQFalse, SQTrue);
			            sq_poptop(vm);
			        }
			    };
			} while(0);
            if (! ok) {
                return 0;
            }
            _SquirrelObject *sqobj = (_SquirrelObject *)cobj->_scriptObject;
            sqobj->addClosure("onMouseMove", callback3);
            break;
        }
        if (strcmp(varName, "onMouseScroll") == 0) {
            HSQOBJECT callback3;
            sq_getstackobj(vm, 3, &callback3);
            do {
			    // Lambda binding for squirrel
			    cobj->onMouseScroll = [vm, callback3](cocos2d::Event* larg0) -> void {
			        if (sq_getrefcount(vm, (HSQOBJECT *)&callback3) > 0) {
			            sq_pushobject(vm, callback3);
			            sq_push(vm, 1);
			            object_to_sqval<cocos2d::Event>(vm, "cc.Event", (cocos2d::Event*)larg0);
			            sq_call(vm, 2, SQFalse, SQTrue);
			            sq_poptop(vm);
			        }
			    };
			} while(0);
            if (! ok) {
                return 0;
            }
            _SquirrelObject *sqobj = (_SquirrelObject *)cobj->_scriptObject;
            sqobj->addClosure("onMouseScroll", callback3);
            break;
        }

        CCLOG("specified variable is not found in cocos2d::EventListenerMouse");
    } while(0);

    return 0;
}

void squirrel_cocos2dx_EventListenerMouse_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::EventListenerMouse", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::EventListener", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_EventListenerMouse(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("EventListenerMouse"), -1);


    sq_pushstring(vm, _SC("EventListener"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_EventListenerMouse_create_static, SQTrue);

    to_squirrel_function(vm, "_get", squirrel_cocos2dx_EventListenerMouse_get_meta);
    to_squirrel_function(vm, "_set", squirrel_cocos2dx_EventListenerMouse_set_meta);
    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_EventListenerMouse_typeof_meta);

    to_squirrel_variable_string(vm, "LISTENER_ID", cocos2d::EventListenerMouse::LISTENER_ID, SQTrue);


    squirrel_cocos2dx_EventListenerMouse_push_c_class(vm);

    std::string typeName = typeid(cocos2d::EventListenerMouse).name();
    g_sqType[typeName] = "cc.EventListenerMouse";

    return 1;
}
SQInteger squirrel_cocos2dx_TransitionRotoZoom_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        float arg0;
        cocos2d::Scene* arg1;
        ok &= sqval_to_float(vm, 2, &arg0);
        ok &= sqval_to_object<cocos2d::Scene>(vm, 3, &arg1);
        if(!ok)
            return 0;
        cocos2d::TransitionRotoZoom* ret = cocos2d::TransitionRotoZoom::create(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.TransitionRotoZoom");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_TransitionRotoZoom_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.TransitionRotoZoom", -1);
    return 1;
}

void squirrel_cocos2dx_TransitionRotoZoom_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::TransitionRotoZoom", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::TransitionScene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Scene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_TransitionRotoZoom(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("TransitionRotoZoom"), -1);


    sq_pushstring(vm, _SC("TransitionScene"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_TransitionRotoZoom_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_TransitionRotoZoom_typeof_meta);



    squirrel_cocos2dx_TransitionRotoZoom_push_c_class(vm);

    std::string typeName = typeid(cocos2d::TransitionRotoZoom).name();
    g_sqType[typeName] = "cc.TransitionRotoZoom";

    return 1;
}
SQInteger squirrel_cocos2dx_Director_pause(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_pause'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->pause();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "pause", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_setEventDispatcher(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_setEventDispatcher'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::EventDispatcher* arg0;

        ok &= sqval_to_object<cocos2d::EventDispatcher>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setEventDispatcher(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setEventDispatcher", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_setContentScaleFactor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_setContentScaleFactor'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setContentScaleFactor(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setContentScaleFactor", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_getContentScaleFactor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_getContentScaleFactor'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getContentScaleFactor();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getContentScaleFactor", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_getWinSizeInPixels(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_getWinSizeInPixels'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Size ret = cobj->getWinSizeInPixels();
        size_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getWinSizeInPixels", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_getDeltaTime(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_getDeltaTime'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getDeltaTime();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getDeltaTime", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_setGLDefaultValues(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_setGLDefaultValues'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->setGLDefaultValues();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setGLDefaultValues", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_setActionManager(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_setActionManager'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::ActionManager* arg0;

        ok &= sqval_to_object<cocos2d::ActionManager>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setActionManager(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setActionManager", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_setAlphaBlending(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_setAlphaBlending'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setAlphaBlending(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setAlphaBlending", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_popToRootScene(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_popToRootScene'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->popToRootScene();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "popToRootScene", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_loadMatrix(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_loadMatrix'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        cocos2d::MATRIX_STACK_TYPE arg0;
        cocos2d::Mat4 arg1;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);

        cocos2d::Mat4 *ptr3 = nullptr; ok &= sqval_to_mat4(vm, 3, ptr3); arg1 = *ptr3;
        if (!ok)
            return 0;
        cobj->loadMatrix(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "loadMatrix", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_getNotificationNode(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_getNotificationNode'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Node* ret = cobj->getNotificationNode();
        object_to_sqval<cocos2d::Node>(vm, "cc.Node", (cocos2d::Node*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getNotificationNode", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_getWinSize(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_getWinSize'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::Size& ret = cobj->getWinSize();
        size_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getWinSize", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_end(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_end'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->end();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "end", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_getTextureCache(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_getTextureCache'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::TextureCache* ret = cobj->getTextureCache();
        object_to_sqval<cocos2d::TextureCache>(vm, "cc.TextureCache", (cocos2d::TextureCache*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getTextureCache", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_isSendCleanupToScene(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_isSendCleanupToScene'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isSendCleanupToScene();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isSendCleanupToScene", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_getVisibleOrigin(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_getVisibleOrigin'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Vec2 ret = cobj->getVisibleOrigin();
        vec2_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getVisibleOrigin", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_mainLoop(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_mainLoop'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->mainLoop();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "mainLoop", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_setDepthTest(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_setDepthTest'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setDepthTest(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setDepthTest", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_getFrameRate(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_getFrameRate'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getFrameRate();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getFrameRate", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_getSecondsPerFrame(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_getSecondsPerFrame'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getSecondsPerFrame();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getSecondsPerFrame", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_resetMatrixStack(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_resetMatrixStack'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->resetMatrixStack();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "resetMatrixStack", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_convertToUI(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_convertToUI'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec2 arg0;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cocos2d::Vec2 ret = cobj->convertToUI(arg0);
        vec2_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "convertToUI", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_pushMatrix(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_pushMatrix'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::MATRIX_STACK_TYPE arg0;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if (!ok)
            return 0;
        cobj->pushMatrix(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "pushMatrix", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_setDefaultValues(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_setDefaultValues'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->setDefaultValues();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setDefaultValues", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_init(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_init'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->init();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "init", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_setScheduler(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_setScheduler'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Scheduler* arg0;

        ok &= sqval_to_object<cocos2d::Scheduler>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setScheduler(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setScheduler", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_startAnimation(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_startAnimation'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->startAnimation();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "startAnimation", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_getOpenGLView(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_getOpenGLView'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::GLView* ret = cobj->getOpenGLView();
        object_to_sqval<cocos2d::GLView>(vm, "cc.GLView", (cocos2d::GLView*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getOpenGLView", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_getRunningScene(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_getRunningScene'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Scene* ret = cobj->getRunningScene();
        object_to_sqval<cocos2d::Scene>(vm, "cc.Scene", (cocos2d::Scene*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getRunningScene", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_setViewport(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_setViewport'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->setViewport();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setViewport", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_stopAnimation(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_stopAnimation'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->stopAnimation();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "stopAnimation", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_popToSceneStackLevel(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_popToSceneStackLevel'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        int arg0;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if (!ok)
            return 0;
        cobj->popToSceneStackLevel(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "popToSceneStackLevel", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_resume(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_resume'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->resume();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "resume", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_isNextDeltaTimeZero(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_isNextDeltaTimeZero'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isNextDeltaTimeZero();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isNextDeltaTimeZero", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_setOpenGLView(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_setOpenGLView'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::GLView* arg0;

        ok &= sqval_to_object<cocos2d::GLView>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setOpenGLView(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setOpenGLView", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_convertToGL(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_convertToGL'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec2 arg0;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cocos2d::Vec2 ret = cobj->convertToGL(arg0);
        vec2_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "convertToGL", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_purgeCachedData(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_purgeCachedData'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->purgeCachedData();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "purgeCachedData", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_getTotalFrames(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_getTotalFrames'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        unsigned int ret = cobj->getTotalFrames();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getTotalFrames", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_runWithScene(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_runWithScene'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Scene* arg0;

        ok &= sqval_to_object<cocos2d::Scene>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->runWithScene(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "runWithScene", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_setNotificationNode(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_setNotificationNode'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Node* arg0;

        ok &= sqval_to_object<cocos2d::Node>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setNotificationNode(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setNotificationNode", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_drawScene(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_drawScene'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->drawScene();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "drawScene", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_getMatrix(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_getMatrix'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::MATRIX_STACK_TYPE arg0;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if (!ok)
            return 0;
        const cocos2d::Mat4& ret = cobj->getMatrix(arg0);
        mat4_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getMatrix", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_popScene(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_popScene'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->popScene();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "popScene", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_loadIdentityMatrix(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_loadIdentityMatrix'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::MATRIX_STACK_TYPE arg0;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if (!ok)
            return 0;
        cobj->loadIdentityMatrix(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "loadIdentityMatrix", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_isDisplayStats(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_isDisplayStats'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isDisplayStats();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isDisplayStats", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_setProjection(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_setProjection'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Director::Projection arg0;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if (!ok)
            return 0;
        cobj->setProjection(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setProjection", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_getConsole(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_getConsole'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Console* ret = cobj->getConsole();
        object_to_sqval<cocos2d::Console>(vm, "cc.Console", (cocos2d::Console*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getConsole", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_multiplyMatrix(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_multiplyMatrix'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        cocos2d::MATRIX_STACK_TYPE arg0;
        cocos2d::Mat4 arg1;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);

        cocos2d::Mat4 *ptr3 = nullptr; ok &= sqval_to_mat4(vm, 3, ptr3); arg1 = *ptr3;
        if (!ok)
            return 0;
        cobj->multiplyMatrix(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "multiplyMatrix", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_getZEye(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_getZEye'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getZEye();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getZEye", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_setNextDeltaTimeZero(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_setNextDeltaTimeZero'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setNextDeltaTimeZero(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setNextDeltaTimeZero", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_popMatrix(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_popMatrix'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::MATRIX_STACK_TYPE arg0;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if (!ok)
            return 0;
        cobj->popMatrix(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "popMatrix", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_getVisibleSize(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_getVisibleSize'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Size ret = cobj->getVisibleSize();
        size_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getVisibleSize", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_getScheduler(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_getScheduler'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Scheduler* ret = cobj->getScheduler();
        object_to_sqval<cocos2d::Scheduler>(vm, "cc.Scheduler", (cocos2d::Scheduler*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getScheduler", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_pushScene(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_pushScene'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Scene* arg0;

        ok &= sqval_to_object<cocos2d::Scene>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->pushScene(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "pushScene", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_getAnimationInterval(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_getAnimationInterval'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        double ret = cobj->getAnimationInterval();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getAnimationInterval", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_isPaused(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_isPaused'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isPaused();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isPaused", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_setDisplayStats(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_setDisplayStats'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setDisplayStats(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setDisplayStats", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_getEventDispatcher(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_getEventDispatcher'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::EventDispatcher* ret = cobj->getEventDispatcher();
        object_to_sqval<cocos2d::EventDispatcher>(vm, "cc.EventDispatcher", (cocos2d::EventDispatcher*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getEventDispatcher", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_replaceScene(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_replaceScene'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Scene* arg0;

        ok &= sqval_to_object<cocos2d::Scene>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->replaceScene(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "replaceScene", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_setAnimationInterval(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_setAnimationInterval'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        double arg0;

        ok &= sqval_to_number(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setAnimationInterval(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setAnimationInterval", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_getActionManager(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Director* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Director_getActionManager'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::ActionManager* ret = cobj->getActionManager();
        object_to_sqval<cocos2d::ActionManager>(vm, "cc.ActionManager", (cocos2d::ActionManager*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getActionManager", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Director_getInstance_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        cocos2d::Director* ret = cocos2d::Director::getInstance();
        object_to_sqval<cocos2d::Director>(vm, "cc.Director", (cocos2d::Director*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "getInstance", (int)argc, 0);
    return 0;
}

SQInteger squirrel_cocos2dx_Director_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.Director", -1);
    return 1;
}

void squirrel_cocos2dx_Director_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::Director", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_Director(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("Director"), -1);

    sq_newclass(vm, SQFalse);

    to_squirrel_function(vm, "pause", squirrel_cocos2dx_Director_pause);
    to_squirrel_function(vm, "setEventDispatcher", squirrel_cocos2dx_Director_setEventDispatcher);
    to_squirrel_function(vm, "setContentScaleFactor", squirrel_cocos2dx_Director_setContentScaleFactor);
    to_squirrel_function(vm, "getContentScaleFactor", squirrel_cocos2dx_Director_getContentScaleFactor);
    to_squirrel_function(vm, "getWinSizeInPixels", squirrel_cocos2dx_Director_getWinSizeInPixels);
    to_squirrel_function(vm, "getDeltaTime", squirrel_cocos2dx_Director_getDeltaTime);
    to_squirrel_function(vm, "setGLDefaultValues", squirrel_cocos2dx_Director_setGLDefaultValues);
    to_squirrel_function(vm, "setActionManager", squirrel_cocos2dx_Director_setActionManager);
    to_squirrel_function(vm, "setAlphaBlending", squirrel_cocos2dx_Director_setAlphaBlending);
    to_squirrel_function(vm, "popToRootScene", squirrel_cocos2dx_Director_popToRootScene);
    to_squirrel_function(vm, "loadMatrix", squirrel_cocos2dx_Director_loadMatrix);
    to_squirrel_function(vm, "getNotificationNode", squirrel_cocos2dx_Director_getNotificationNode);
    to_squirrel_function(vm, "getWinSize", squirrel_cocos2dx_Director_getWinSize);
    to_squirrel_function(vm, "end", squirrel_cocos2dx_Director_end);
    to_squirrel_function(vm, "getTextureCache", squirrel_cocos2dx_Director_getTextureCache);
    to_squirrel_function(vm, "isSendCleanupToScene", squirrel_cocos2dx_Director_isSendCleanupToScene);
    to_squirrel_function(vm, "getVisibleOrigin", squirrel_cocos2dx_Director_getVisibleOrigin);
    to_squirrel_function(vm, "mainLoop", squirrel_cocos2dx_Director_mainLoop);
    to_squirrel_function(vm, "setDepthTest", squirrel_cocos2dx_Director_setDepthTest);
    to_squirrel_function(vm, "getFrameRate", squirrel_cocos2dx_Director_getFrameRate);
    to_squirrel_function(vm, "getSecondsPerFrame", squirrel_cocos2dx_Director_getSecondsPerFrame);
    to_squirrel_function(vm, "resetMatrixStack", squirrel_cocos2dx_Director_resetMatrixStack);
    to_squirrel_function(vm, "convertToUI", squirrel_cocos2dx_Director_convertToUI);
    to_squirrel_function(vm, "pushMatrix", squirrel_cocos2dx_Director_pushMatrix);
    to_squirrel_function(vm, "setDefaultValues", squirrel_cocos2dx_Director_setDefaultValues);
    to_squirrel_function(vm, "init", squirrel_cocos2dx_Director_init);
    to_squirrel_function(vm, "setScheduler", squirrel_cocos2dx_Director_setScheduler);
    to_squirrel_function(vm, "startAnimation", squirrel_cocos2dx_Director_startAnimation);
    to_squirrel_function(vm, "getOpenGLView", squirrel_cocos2dx_Director_getOpenGLView);
    to_squirrel_function(vm, "getRunningScene", squirrel_cocos2dx_Director_getRunningScene);
    to_squirrel_function(vm, "setViewport", squirrel_cocos2dx_Director_setViewport);
    to_squirrel_function(vm, "stopAnimation", squirrel_cocos2dx_Director_stopAnimation);
    to_squirrel_function(vm, "popToSceneStackLevel", squirrel_cocos2dx_Director_popToSceneStackLevel);
    to_squirrel_function(vm, "resume", squirrel_cocos2dx_Director_resume);
    to_squirrel_function(vm, "isNextDeltaTimeZero", squirrel_cocos2dx_Director_isNextDeltaTimeZero);
    to_squirrel_function(vm, "setOpenGLView", squirrel_cocos2dx_Director_setOpenGLView);
    to_squirrel_function(vm, "convertToGL", squirrel_cocos2dx_Director_convertToGL);
    to_squirrel_function(vm, "purgeCachedData", squirrel_cocos2dx_Director_purgeCachedData);
    to_squirrel_function(vm, "getTotalFrames", squirrel_cocos2dx_Director_getTotalFrames);
    to_squirrel_function(vm, "runWithScene", squirrel_cocos2dx_Director_runWithScene);
    to_squirrel_function(vm, "setNotificationNode", squirrel_cocos2dx_Director_setNotificationNode);
    to_squirrel_function(vm, "drawScene", squirrel_cocos2dx_Director_drawScene);
    to_squirrel_function(vm, "getMatrix", squirrel_cocos2dx_Director_getMatrix);
    to_squirrel_function(vm, "popScene", squirrel_cocos2dx_Director_popScene);
    to_squirrel_function(vm, "loadIdentityMatrix", squirrel_cocos2dx_Director_loadIdentityMatrix);
    to_squirrel_function(vm, "isDisplayStats", squirrel_cocos2dx_Director_isDisplayStats);
    to_squirrel_function(vm, "setProjection", squirrel_cocos2dx_Director_setProjection);
    to_squirrel_function(vm, "getConsole", squirrel_cocos2dx_Director_getConsole);
    to_squirrel_function(vm, "multiplyMatrix", squirrel_cocos2dx_Director_multiplyMatrix);
    to_squirrel_function(vm, "getZEye", squirrel_cocos2dx_Director_getZEye);
    to_squirrel_function(vm, "setNextDeltaTimeZero", squirrel_cocos2dx_Director_setNextDeltaTimeZero);
    to_squirrel_function(vm, "popMatrix", squirrel_cocos2dx_Director_popMatrix);
    to_squirrel_function(vm, "getVisibleSize", squirrel_cocos2dx_Director_getVisibleSize);
    to_squirrel_function(vm, "getScheduler", squirrel_cocos2dx_Director_getScheduler);
    to_squirrel_function(vm, "pushScene", squirrel_cocos2dx_Director_pushScene);
    to_squirrel_function(vm, "getAnimationInterval", squirrel_cocos2dx_Director_getAnimationInterval);
    to_squirrel_function(vm, "isPaused", squirrel_cocos2dx_Director_isPaused);
    to_squirrel_function(vm, "setDisplayStats", squirrel_cocos2dx_Director_setDisplayStats);
    to_squirrel_function(vm, "getEventDispatcher", squirrel_cocos2dx_Director_getEventDispatcher);
    to_squirrel_function(vm, "replaceScene", squirrel_cocos2dx_Director_replaceScene);
    to_squirrel_function(vm, "setAnimationInterval", squirrel_cocos2dx_Director_setAnimationInterval);
    to_squirrel_function(vm, "getActionManager", squirrel_cocos2dx_Director_getActionManager);
    to_squirrel_function(vm, "getInstance", squirrel_cocos2dx_Director_getInstance_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_Director_typeof_meta);

    to_squirrel_variable_char(vm, "EVENT_PROJECTION_CHANGED", cocos2d::Director::EVENT_PROJECTION_CHANGED, SQTrue);
    to_squirrel_variable_char(vm, "EVENT_AFTER_UPDATE", cocos2d::Director::EVENT_AFTER_UPDATE, SQTrue);
    to_squirrel_variable_char(vm, "EVENT_AFTER_VISIT", cocos2d::Director::EVENT_AFTER_VISIT, SQTrue);
    to_squirrel_variable_char(vm, "EVENT_AFTER_DRAW", cocos2d::Director::EVENT_AFTER_DRAW, SQTrue);

    sq_pushstring(vm, _SC("Projection"), -1);
    sq_newtable(vm);
    to_squirrel_variable_integer(vm, "CUSTOM", (SQInteger)cocos2d::Director::Projection::CUSTOM, SQTrue);
    to_squirrel_variable_integer(vm, "DEFAULT", (SQInteger)cocos2d::Director::Projection::DEFAULT, SQTrue);
    sq_newslot(vm, -3, SQTrue);

    squirrel_cocos2dx_Director_push_c_class(vm);

    std::string typeName = typeid(cocos2d::Director).name();
    g_sqType[typeName] = "cc.Director";

    return 1;
}
SQInteger squirrel_cocos2dx_Texture2D_getMaxT(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Texture2D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Texture2D_getMaxT'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getMaxT();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getMaxT", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Texture2D_getStringForFormat(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Texture2D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Texture2D_getStringForFormat'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const char* ret = cobj->getStringForFormat();
        sq_pushstring(vm, (const SQChar *)ret, -1);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getStringForFormat", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Texture2D_initWithImage(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Texture2D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Texture2D_initWithImage'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Image")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Texture2D::PixelFormat")) {
                break;
            }

            cocos2d::Image* arg0;
            ok &= sqval_to_object<cocos2d::Image>(vm, 2, &arg0);

            if (!ok) { break; }
            cocos2d::Texture2D::PixelFormat arg1;
            ok &= sqval_to_int32(vm, 3, (int *)&arg1);

            if (!ok) { break; }
            bool ret = cobj->initWithImage(arg0, arg1);
            sq_pushbool(vm, (SQBool)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Image")) {
                break;
            }

            cocos2d::Image* arg0;
            ok &= sqval_to_object<cocos2d::Image>(vm, 2, &arg0);

            if (!ok) { break; }
            bool ret = cobj->initWithImage(arg0);
            sq_pushbool(vm, (SQBool)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "initWithImage", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Texture2D_getMaxS(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Texture2D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Texture2D_getMaxS'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getMaxS();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getMaxS", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Texture2D_releaseGLTexture(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Texture2D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Texture2D_releaseGLTexture'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->releaseGLTexture();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "releaseGLTexture", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Texture2D_hasPremultipliedAlpha(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Texture2D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Texture2D_hasPremultipliedAlpha'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->hasPremultipliedAlpha();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "hasPremultipliedAlpha", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Texture2D_getPixelsHigh(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Texture2D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Texture2D_getPixelsHigh'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        int ret = cobj->getPixelsHigh();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getPixelsHigh", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Texture2D_getBitsPerPixelForFormat(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Texture2D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Texture2D_getBitsPerPixelForFormat'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Texture2D::PixelFormat")) {
                break;
            }

            cocos2d::Texture2D::PixelFormat arg0;
            ok &= sqval_to_int32(vm, 2, (int *)&arg0);

            if (!ok) { break; }
            unsigned int ret = cobj->getBitsPerPixelForFormat(arg0);
            sq_pushinteger(vm, (SQInteger)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 0) {

            unsigned int ret = cobj->getBitsPerPixelForFormat();
            sq_pushinteger(vm, (SQInteger)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getBitsPerPixelForFormat", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Texture2D_getName(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Texture2D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Texture2D_getName'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        unsigned int ret = cobj->getName();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getName", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Texture2D_initWithString(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Texture2D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Texture2D_initWithString'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::FontDefinition")) {
                break;
            }

            const char* arg0;
            std::string arg0_tmp; ok &= sqval_to_std_string(vm, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();

            if (!ok) { break; }
            cocos2d::FontDefinition arg1;
            cocos2d::FontDefinition *ptr3 = nullptr; ok &= sqval_to_fontdefinition(vm, 3, ptr3); arg1 = *ptr3;

            if (!ok) { break; }
            bool ret = cobj->initWithString(arg0, arg1);
            sq_pushbool(vm, (SQBool)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 3) {
            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }

            const char* arg0;
            std::string arg0_tmp; ok &= sqval_to_std_string(vm, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();

            if (!ok) { break; }
            std::string arg1;
            ok &= sqval_to_std_string(vm, 3, &arg1);

            if (!ok) { break; }
            float arg2;
            ok &= sqval_to_float(vm, 4, &arg2);

            if (!ok) { break; }
            bool ret = cobj->initWithString(arg0, arg1, arg2);
            sq_pushbool(vm, (SQBool)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 4) {
            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INSTANCE || ! instanceof_cclass(vm, 5, "cocos2d::Size")) {
                break;
            }

            const char* arg0;
            std::string arg0_tmp; ok &= sqval_to_std_string(vm, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();

            if (!ok) { break; }
            std::string arg1;
            ok &= sqval_to_std_string(vm, 3, &arg1);

            if (!ok) { break; }
            float arg2;
            ok &= sqval_to_float(vm, 4, &arg2);

            if (!ok) { break; }
            cocos2d::Size arg3;
            cocos2d::Size* ptr5 = nullptr; ok &= sqval_to_size(vm, 5, ptr5); arg3 = *ptr5;

            if (!ok) { break; }
            bool ret = cobj->initWithString(arg0, arg1, arg2, arg3);
            sq_pushbool(vm, (SQBool)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 5) {
            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INSTANCE || ! instanceof_cclass(vm, 5, "cocos2d::Size")) {
                break;
            }
            if (sq_gettype(vm, 6) != OT_INSTANCE || ! instanceof_cclass(vm, 6, "cocos2d::TextHAlignment")) {
                break;
            }

            const char* arg0;
            std::string arg0_tmp; ok &= sqval_to_std_string(vm, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();

            if (!ok) { break; }
            std::string arg1;
            ok &= sqval_to_std_string(vm, 3, &arg1);

            if (!ok) { break; }
            float arg2;
            ok &= sqval_to_float(vm, 4, &arg2);

            if (!ok) { break; }
            cocos2d::Size arg3;
            cocos2d::Size* ptr5 = nullptr; ok &= sqval_to_size(vm, 5, ptr5); arg3 = *ptr5;

            if (!ok) { break; }
            cocos2d::TextHAlignment arg4;
            ok &= sqval_to_int32(vm, 6, (int *)&arg4);

            if (!ok) { break; }
            bool ret = cobj->initWithString(arg0, arg1, arg2, arg3, arg4);
            sq_pushbool(vm, (SQBool)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 6) {
            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INSTANCE || ! instanceof_cclass(vm, 5, "cocos2d::Size")) {
                break;
            }
            if (sq_gettype(vm, 6) != OT_INSTANCE || ! instanceof_cclass(vm, 6, "cocos2d::TextHAlignment")) {
                break;
            }
            if (sq_gettype(vm, 7) != OT_INSTANCE || ! instanceof_cclass(vm, 7, "cocos2d::TextVAlignment")) {
                break;
            }

            const char* arg0;
            std::string arg0_tmp; ok &= sqval_to_std_string(vm, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();

            if (!ok) { break; }
            std::string arg1;
            ok &= sqval_to_std_string(vm, 3, &arg1);

            if (!ok) { break; }
            float arg2;
            ok &= sqval_to_float(vm, 4, &arg2);

            if (!ok) { break; }
            cocos2d::Size arg3;
            cocos2d::Size* ptr5 = nullptr; ok &= sqval_to_size(vm, 5, ptr5); arg3 = *ptr5;

            if (!ok) { break; }
            cocos2d::TextHAlignment arg4;
            ok &= sqval_to_int32(vm, 6, (int *)&arg4);

            if (!ok) { break; }
            cocos2d::TextVAlignment arg5;
            ok &= sqval_to_int32(vm, 7, (int *)&arg5);

            if (!ok) { break; }
            bool ret = cobj->initWithString(arg0, arg1, arg2, arg3, arg4, arg5);
            sq_pushbool(vm, (SQBool)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "initWithString", (int)argc, 3);
    return 0;
}
SQInteger squirrel_cocos2dx_Texture2D_setMaxT(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Texture2D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Texture2D_setMaxT'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setMaxT(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setMaxT", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Texture2D_drawInRect(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Texture2D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Texture2D_drawInRect'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Rect arg0;

        cocos2d::Rect* ptr2 = nullptr; ok &= sqval_to_rect(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->drawInRect(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "drawInRect", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Texture2D_getContentSize(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Texture2D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Texture2D_getContentSize'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Size ret = cobj->getContentSize();
        size_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getContentSize", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Texture2D_setAliasTexParameters(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Texture2D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Texture2D_setAliasTexParameters'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->setAliasTexParameters();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setAliasTexParameters", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Texture2D_setAntiAliasTexParameters(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Texture2D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Texture2D_setAntiAliasTexParameters'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->setAntiAliasTexParameters();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setAntiAliasTexParameters", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Texture2D_generateMipmap(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Texture2D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Texture2D_generateMipmap'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->generateMipmap();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "generateMipmap", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Texture2D_getDescription(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Texture2D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Texture2D_getDescription'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        std::string ret = cobj->getDescription();
        sq_pushstring(vm, (const SQChar *)ret.c_str(), -1);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getDescription", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Texture2D_getPixelFormat(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Texture2D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Texture2D_getPixelFormat'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        int ret = (int)cobj->getPixelFormat();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getPixelFormat", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Texture2D_setGLProgram(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Texture2D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Texture2D_setGLProgram'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::GLProgram* arg0;

        ok &= sqval_to_object<cocos2d::GLProgram>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setGLProgram(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setGLProgram", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Texture2D_getContentSizeInPixels(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Texture2D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Texture2D_getContentSizeInPixels'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::Size& ret = cobj->getContentSizeInPixels();
        size_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getContentSizeInPixels", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Texture2D_getPixelsWide(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Texture2D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Texture2D_getPixelsWide'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        int ret = cobj->getPixelsWide();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getPixelsWide", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Texture2D_drawAtPoint(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Texture2D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Texture2D_drawAtPoint'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec2 arg0;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->drawAtPoint(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "drawAtPoint", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Texture2D_getGLProgram(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Texture2D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Texture2D_getGLProgram'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::GLProgram* ret = cobj->getGLProgram();
        object_to_sqval<cocos2d::GLProgram>(vm, "cc.GLProgram", (cocos2d::GLProgram*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getGLProgram", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Texture2D_hasMipmaps(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Texture2D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Texture2D_hasMipmaps'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->hasMipmaps();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "hasMipmaps", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Texture2D_setMaxS(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Texture2D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Texture2D_setMaxS'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setMaxS(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setMaxS", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Texture2D_setDefaultAlphaPixelFormat_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        cocos2d::Texture2D::PixelFormat arg0;
        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if(!ok)
            return 0;
        cocos2d::Texture2D::setDefaultAlphaPixelFormat(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "setDefaultAlphaPixelFormat", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Texture2D_getDefaultAlphaPixelFormat_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        int ret = (int)cocos2d::Texture2D::getDefaultAlphaPixelFormat();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "getDefaultAlphaPixelFormat", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Texture2D_constructor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Texture2D* cobj = nullptr;
    bool ok  = true;

    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj = new cocos2d::Texture2D();
        sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
        cobj->retain();
        sq_setreleasehook(vm, 1, squirrel_releasehook_Ref);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "Texture2D", (int)argc, 0);
    return 0;
}


SQInteger squirrel_cocos2dx_Texture2D_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.Texture2D", -1);
    return 1;
}

void squirrel_cocos2dx_Texture2D_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::Texture2D", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_Texture2D(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("Texture2D"), -1);


    sq_pushstring(vm, _SC("Ref"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "constructor", squirrel_cocos2dx_Texture2D_constructor);
    to_squirrel_function(vm, "getMaxT", squirrel_cocos2dx_Texture2D_getMaxT);
    to_squirrel_function(vm, "getStringForFormat", squirrel_cocos2dx_Texture2D_getStringForFormat);
    to_squirrel_function(vm, "initWithImage", squirrel_cocos2dx_Texture2D_initWithImage);
    to_squirrel_function(vm, "getMaxS", squirrel_cocos2dx_Texture2D_getMaxS);
    to_squirrel_function(vm, "releaseGLTexture", squirrel_cocos2dx_Texture2D_releaseGLTexture);
    to_squirrel_function(vm, "hasPremultipliedAlpha", squirrel_cocos2dx_Texture2D_hasPremultipliedAlpha);
    to_squirrel_function(vm, "getPixelsHigh", squirrel_cocos2dx_Texture2D_getPixelsHigh);
    to_squirrel_function(vm, "getBitsPerPixelForFormat", squirrel_cocos2dx_Texture2D_getBitsPerPixelForFormat);
    to_squirrel_function(vm, "getName", squirrel_cocos2dx_Texture2D_getName);
    to_squirrel_function(vm, "initWithString", squirrel_cocos2dx_Texture2D_initWithString);
    to_squirrel_function(vm, "setMaxT", squirrel_cocos2dx_Texture2D_setMaxT);
    to_squirrel_function(vm, "drawInRect", squirrel_cocos2dx_Texture2D_drawInRect);
    to_squirrel_function(vm, "getContentSize", squirrel_cocos2dx_Texture2D_getContentSize);
    to_squirrel_function(vm, "setAliasTexParameters", squirrel_cocos2dx_Texture2D_setAliasTexParameters);
    to_squirrel_function(vm, "setAntiAliasTexParameters", squirrel_cocos2dx_Texture2D_setAntiAliasTexParameters);
    to_squirrel_function(vm, "generateMipmap", squirrel_cocos2dx_Texture2D_generateMipmap);
    to_squirrel_function(vm, "getDescription", squirrel_cocos2dx_Texture2D_getDescription);
    to_squirrel_function(vm, "getPixelFormat", squirrel_cocos2dx_Texture2D_getPixelFormat);
    to_squirrel_function(vm, "setGLProgram", squirrel_cocos2dx_Texture2D_setGLProgram);
    to_squirrel_function(vm, "getContentSizeInPixels", squirrel_cocos2dx_Texture2D_getContentSizeInPixels);
    to_squirrel_function(vm, "getPixelsWide", squirrel_cocos2dx_Texture2D_getPixelsWide);
    to_squirrel_function(vm, "drawAtPoint", squirrel_cocos2dx_Texture2D_drawAtPoint);
    to_squirrel_function(vm, "getGLProgram", squirrel_cocos2dx_Texture2D_getGLProgram);
    to_squirrel_function(vm, "hasMipmaps", squirrel_cocos2dx_Texture2D_hasMipmaps);
    to_squirrel_function(vm, "setMaxS", squirrel_cocos2dx_Texture2D_setMaxS);
    to_squirrel_function(vm, "setDefaultAlphaPixelFormat", squirrel_cocos2dx_Texture2D_setDefaultAlphaPixelFormat_static, SQTrue);
    to_squirrel_function(vm, "getDefaultAlphaPixelFormat", squirrel_cocos2dx_Texture2D_getDefaultAlphaPixelFormat_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_Texture2D_typeof_meta);


    sq_pushstring(vm, _SC("PixelFormat"), -1);
    sq_newtable(vm);
    to_squirrel_variable_integer(vm, "AUTO", (SQInteger)cocos2d::Texture2D::PixelFormat::AUTO, SQTrue);
    to_squirrel_variable_integer(vm, "BGRA8888", (SQInteger)cocos2d::Texture2D::PixelFormat::BGRA8888, SQTrue);
    to_squirrel_variable_integer(vm, "RGBA8888", (SQInteger)cocos2d::Texture2D::PixelFormat::RGBA8888, SQTrue);
    to_squirrel_variable_integer(vm, "RGB888", (SQInteger)cocos2d::Texture2D::PixelFormat::RGB888, SQTrue);
    to_squirrel_variable_integer(vm, "RGB565", (SQInteger)cocos2d::Texture2D::PixelFormat::RGB565, SQTrue);
    to_squirrel_variable_integer(vm, "A8", (SQInteger)cocos2d::Texture2D::PixelFormat::A8, SQTrue);
    to_squirrel_variable_integer(vm, "I8", (SQInteger)cocos2d::Texture2D::PixelFormat::I8, SQTrue);
    to_squirrel_variable_integer(vm, "AI88", (SQInteger)cocos2d::Texture2D::PixelFormat::AI88, SQTrue);
    to_squirrel_variable_integer(vm, "RGBA4444", (SQInteger)cocos2d::Texture2D::PixelFormat::RGBA4444, SQTrue);
    to_squirrel_variable_integer(vm, "RGB5A1", (SQInteger)cocos2d::Texture2D::PixelFormat::RGB5A1, SQTrue);
    to_squirrel_variable_integer(vm, "PVRTC4", (SQInteger)cocos2d::Texture2D::PixelFormat::PVRTC4, SQTrue);
    to_squirrel_variable_integer(vm, "PVRTC4A", (SQInteger)cocos2d::Texture2D::PixelFormat::PVRTC4A, SQTrue);
    to_squirrel_variable_integer(vm, "PVRTC2", (SQInteger)cocos2d::Texture2D::PixelFormat::PVRTC2, SQTrue);
    to_squirrel_variable_integer(vm, "PVRTC2A", (SQInteger)cocos2d::Texture2D::PixelFormat::PVRTC2A, SQTrue);
    to_squirrel_variable_integer(vm, "ETC", (SQInteger)cocos2d::Texture2D::PixelFormat::ETC, SQTrue);
    to_squirrel_variable_integer(vm, "S3TC_DXT1", (SQInteger)cocos2d::Texture2D::PixelFormat::S3TC_DXT1, SQTrue);
    to_squirrel_variable_integer(vm, "S3TC_DXT3", (SQInteger)cocos2d::Texture2D::PixelFormat::S3TC_DXT3, SQTrue);
    to_squirrel_variable_integer(vm, "S3TC_DXT5", (SQInteger)cocos2d::Texture2D::PixelFormat::S3TC_DXT5, SQTrue);
    to_squirrel_variable_integer(vm, "ATC_RGB", (SQInteger)cocos2d::Texture2D::PixelFormat::ATC_RGB, SQTrue);
    to_squirrel_variable_integer(vm, "ATC_EXPLICIT_ALPHA", (SQInteger)cocos2d::Texture2D::PixelFormat::ATC_EXPLICIT_ALPHA, SQTrue);
    to_squirrel_variable_integer(vm, "ATC_INTERPOLATED_ALPHA", (SQInteger)cocos2d::Texture2D::PixelFormat::ATC_INTERPOLATED_ALPHA, SQTrue);
    to_squirrel_variable_integer(vm, "DEFAULT", (SQInteger)cocos2d::Texture2D::PixelFormat::DEFAULT, SQTrue);
    to_squirrel_variable_integer(vm, "NONE", (SQInteger)cocos2d::Texture2D::PixelFormat::NONE, SQTrue);
    sq_newslot(vm, -3, SQTrue);

    squirrel_cocos2dx_Texture2D_push_c_class(vm);

    std::string typeName = typeid(cocos2d::Texture2D).name();
    g_sqType[typeName] = "cc.Texture2D";

    return 1;
}
SQInteger squirrel_cocos2dx_EaseElasticOut_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 1)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::ActionInterval")) {
                break;
            }

            cocos2d::ActionInterval* arg0;
            ok &= sqval_to_object<cocos2d::ActionInterval>(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::EaseElasticOut* ret = cocos2d::EaseElasticOut::create(arg0);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.EaseElasticOut");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 2)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::ActionInterval")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }

            cocos2d::ActionInterval* arg0;
            ok &= sqval_to_object<cocos2d::ActionInterval>(vm, 2, &arg0);
            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);
            if (!ok) { break; }
            cocos2d::EaseElasticOut* ret = cocos2d::EaseElasticOut::create(arg0, arg1);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.EaseElasticOut");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d", "create", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_EaseElasticOut_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.EaseElasticOut", -1);
    return 1;
}

void squirrel_cocos2dx_EaseElasticOut_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::EaseElasticOut", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::EaseElastic", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionEase", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_EaseElasticOut(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("EaseElasticOut"), -1);


    sq_pushstring(vm, _SC("EaseElastic"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_EaseElasticOut_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_EaseElasticOut_typeof_meta);



    squirrel_cocos2dx_EaseElasticOut_push_c_class(vm);

    std::string typeName = typeid(cocos2d::EaseElasticOut).name();
    g_sqType[typeName] = "cc.EaseElasticOut";

    return 1;
}
SQInteger squirrel_cocos2dx_EaseQuadraticActionInOut_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        cocos2d::ActionInterval* arg0;
        ok &= sqval_to_object<cocos2d::ActionInterval>(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::EaseQuadraticActionInOut* ret = cocos2d::EaseQuadraticActionInOut::create(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.EaseQuadraticActionInOut");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_EaseQuadraticActionInOut_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.EaseQuadraticActionInOut", -1);
    return 1;
}

void squirrel_cocos2dx_EaseQuadraticActionInOut_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::EaseQuadraticActionInOut", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionEase", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_EaseQuadraticActionInOut(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("EaseQuadraticActionInOut"), -1);


    sq_pushstring(vm, _SC("ActionEase"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_EaseQuadraticActionInOut_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_EaseQuadraticActionInOut_typeof_meta);



    squirrel_cocos2dx_EaseQuadraticActionInOut_push_c_class(vm);

    std::string typeName = typeid(cocos2d::EaseQuadraticActionInOut).name();
    g_sqType[typeName] = "cc.EaseQuadraticActionInOut";

    return 1;
}
SQInteger squirrel_cocos2dx_EaseBackOut_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        cocos2d::ActionInterval* arg0;
        ok &= sqval_to_object<cocos2d::ActionInterval>(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::EaseBackOut* ret = cocos2d::EaseBackOut::create(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.EaseBackOut");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_EaseBackOut_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.EaseBackOut", -1);
    return 1;
}

void squirrel_cocos2dx_EaseBackOut_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::EaseBackOut", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionEase", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_EaseBackOut(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("EaseBackOut"), -1);


    sq_pushstring(vm, _SC("ActionEase"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_EaseBackOut_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_EaseBackOut_typeof_meta);



    squirrel_cocos2dx_EaseBackOut_push_c_class(vm);

    std::string typeName = typeid(cocos2d::EaseBackOut).name();
    g_sqType[typeName] = "cc.EaseBackOut";

    return 1;
}
SQInteger squirrel_cocos2dx_TransitionFlipX_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 2)
        {

            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Scene")) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::Scene* arg1;
            ok &= sqval_to_object<cocos2d::Scene>(vm, 3, &arg1);
            if (!ok) { break; }
            cocos2d::TransitionFlipX* ret = cocos2d::TransitionFlipX::create(arg0, arg1);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.TransitionFlipX");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 3)
        {

            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Scene")) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INSTANCE || ! instanceof_cclass(vm, 4, "cocos2d::TransitionScene::Orientation")) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::Scene* arg1;
            ok &= sqval_to_object<cocos2d::Scene>(vm, 3, &arg1);
            if (!ok) { break; }
            cocos2d::TransitionScene::Orientation arg2;
            ok &= sqval_to_int32(vm, 4, (int *)&arg2);
            if (!ok) { break; }
            cocos2d::TransitionFlipX* ret = cocos2d::TransitionFlipX::create(arg0, arg1, arg2);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.TransitionFlipX");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d", "create", (int)argc, 3);
    return 0;
}

SQInteger squirrel_cocos2dx_TransitionFlipX_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.TransitionFlipX", -1);
    return 1;
}

void squirrel_cocos2dx_TransitionFlipX_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::TransitionFlipX", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::TransitionSceneOriented", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TransitionScene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Scene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_TransitionFlipX(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("TransitionFlipX"), -1);


    sq_pushstring(vm, _SC("TransitionSceneOriented"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_TransitionFlipX_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_TransitionFlipX_typeof_meta);



    squirrel_cocos2dx_TransitionFlipX_push_c_class(vm);

    std::string typeName = typeid(cocos2d::TransitionFlipX).name();
    g_sqType[typeName] = "cc.TransitionFlipX";

    return 1;
}
SQInteger squirrel_cocos2dx_Rect_getMaxX(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Rect* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Rect_getMaxX'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getMaxX();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getMaxX", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Rect_unionWithRect(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Rect* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Rect_unionWithRect'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Rect arg0;

        cocos2d::Rect* ptr2 = nullptr; ok &= sqval_to_rect(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cocos2d::Rect ret = cobj->unionWithRect(arg0);
        rect_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "unionWithRect", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Rect_equals(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Rect* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Rect_equals'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Rect arg0;

        cocos2d::Rect* ptr2 = nullptr; ok &= sqval_to_rect(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        bool ret = cobj->equals(arg0);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "equals", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Rect_getMinY(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Rect* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Rect_getMinY'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getMinY();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getMinY", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Rect_getMinX(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Rect* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Rect_getMinX'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getMinX();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getMinX", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Rect_getMidY(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Rect* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Rect_getMidY'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getMidY();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getMidY", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Rect_getMidX(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Rect* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Rect_getMidX'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getMidX();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getMidX", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Rect_merge(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Rect* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Rect_merge'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Rect arg0;

        cocos2d::Rect* ptr2 = nullptr; ok &= sqval_to_rect(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->merge(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "merge", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Rect_intersectsRect(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Rect* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Rect_intersectsRect'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Rect arg0;

        cocos2d::Rect* ptr2 = nullptr; ok &= sqval_to_rect(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        bool ret = cobj->intersectsRect(arg0);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "intersectsRect", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Rect_getMaxY(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Rect* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Rect_getMaxY'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getMaxY();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getMaxY", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Rect_containsPoint(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Rect* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Rect_containsPoint'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec2 arg0;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        bool ret = cobj->containsPoint(arg0);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "containsPoint", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Rect_setRect(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Rect* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Rect_setRect'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 4) 
    {
        float arg0;
        float arg1;
        float arg2;
        float arg3;

        ok &= sqval_to_float(vm, 2, &arg0);

        ok &= sqval_to_float(vm, 3, &arg1);

        ok &= sqval_to_float(vm, 4, &arg2);

        ok &= sqval_to_float(vm, 5, &arg3);
        if (!ok)
            return 0;
        cobj->setRect(arg0, arg1, arg2, arg3);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setRect", (int)argc, 4);
    return 0;
}
SQInteger squirrel_cocos2dx_Rect_constructor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Rect* cobj = nullptr;
    bool ok  = true;

    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 4) {
            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INTEGER && sq_gettype(vm, 5) != OT_FLOAT) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);

            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);

            if (!ok) { break; }
            float arg2;
            ok &= sqval_to_float(vm, 4, &arg2);

            if (!ok) { break; }
            float arg3;
            ok &= sqval_to_float(vm, 5, &arg3);

            if (!ok) { break; }
            cobj = new cocos2d::Rect(arg0, arg1, arg2, arg3);
            sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
            sq_setreleasehook(vm, 1, squirrel_releasehook_Rect);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 0) {

            cobj = new cocos2d::Rect();
            sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
            sq_setreleasehook(vm, 1, squirrel_releasehook_Rect);
            return 1;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "Rect", (int)argc, 0);
    return 0;
}


SQInteger squirrel_cocos2dx_Rect_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.Rect", -1);
    return 1;
}

SQInteger squirrel_cocos2dx_Rect_get_meta(HSQUIRRELVM vm)
{
    cocos2d::Rect *cobj = nullptr;
    if (SQ_FAILED(sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0))) {
        CCLOG("cocos2d::Rect sq_getinstanceup failed.");
        sq_pushnull(vm);
        return 1;
    }

    const char *varName = nullptr;
    sq_getstring(vm, 2, &varName);
    
    do {
        if (strcmp(varName, "origin") == 0) {
            vec2_to_sqval(vm, cobj->origin);
            break;
        }
        if (strcmp(varName, "size") == 0) {
            size_to_sqval(vm, cobj->size);
            break;
        }

        return 0;
        
    } while(0);

    return 1;
}

SQInteger squirrel_cocos2dx_Rect_set_meta(HSQUIRRELVM vm)
{
    cocos2d::Rect *cobj = nullptr;
    if (SQ_FAILED(sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0))) {
        CCLOG("cocos2d::Rect sq_getinstanceup failed.");
        return 0;
    }

    bool ok  = true;
    const char *varName = nullptr;
    sq_getstring(vm, 2, &varName);
    
    do {
        if (strcmp(varName, "origin") == 0) {
            cocos2d::Vec2* ptr3 = nullptr; ok &= sqval_to_vec2(vm, 3, ptr3); cobj->origin = *ptr3;
            if (! ok) {
                return 0;
            }
            break;
        }
        if (strcmp(varName, "size") == 0) {
            cocos2d::Size* ptr3 = nullptr; ok &= sqval_to_size(vm, 3, ptr3); cobj->size = *ptr3;
            if (! ok) {
                return 0;
            }
            break;
        }

        CCLOG("specified variable is not found in cocos2d::Rect");
    } while(0);

    return 0;
}

void squirrel_cocos2dx_Rect_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::Rect", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_Rect(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("Rect"), -1);

    sq_newclass(vm, SQFalse);

    to_squirrel_function(vm, "constructor", squirrel_cocos2dx_Rect_constructor);
    to_squirrel_function(vm, "getMaxX", squirrel_cocos2dx_Rect_getMaxX);
    to_squirrel_function(vm, "unionWithRect", squirrel_cocos2dx_Rect_unionWithRect);
    to_squirrel_function(vm, "equals", squirrel_cocos2dx_Rect_equals);
    to_squirrel_function(vm, "getMinY", squirrel_cocos2dx_Rect_getMinY);
    to_squirrel_function(vm, "getMinX", squirrel_cocos2dx_Rect_getMinX);
    to_squirrel_function(vm, "getMidY", squirrel_cocos2dx_Rect_getMidY);
    to_squirrel_function(vm, "getMidX", squirrel_cocos2dx_Rect_getMidX);
    to_squirrel_function(vm, "merge", squirrel_cocos2dx_Rect_merge);
    to_squirrel_function(vm, "intersectsRect", squirrel_cocos2dx_Rect_intersectsRect);
    to_squirrel_function(vm, "getMaxY", squirrel_cocos2dx_Rect_getMaxY);
    to_squirrel_function(vm, "containsPoint", squirrel_cocos2dx_Rect_containsPoint);
    to_squirrel_function(vm, "setRect", squirrel_cocos2dx_Rect_setRect);

    to_squirrel_function(vm, "_get", squirrel_cocos2dx_Rect_get_meta);
    to_squirrel_function(vm, "_set", squirrel_cocos2dx_Rect_set_meta);
    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_Rect_typeof_meta);

    to_squirrel_variable_object(vm, "ZERO", (SQUserPointer)&cocos2d::Rect::ZERO, SQTrue);


    squirrel_cocos2dx_Rect_push_c_class(vm);

    std::string typeName = typeid(cocos2d::Rect).name();
    g_sqType[typeName] = "cc.Rect";

    return 1;
}
SQInteger squirrel_cocos2dx_FadeOutDownTiles_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        float arg0;
        cocos2d::Size arg1;
        ok &= sqval_to_float(vm, 2, &arg0);
        cocos2d::Size* ptr3 = nullptr; ok &= sqval_to_size(vm, 3, ptr3); arg1 = *ptr3;
        if(!ok)
            return 0;
        cocos2d::FadeOutDownTiles* ret = cocos2d::FadeOutDownTiles::create(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.FadeOutDownTiles");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_FadeOutDownTiles_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.FadeOutDownTiles", -1);
    return 1;
}

void squirrel_cocos2dx_FadeOutDownTiles_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::FadeOutDownTiles", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::FadeOutUpTiles", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FadeOutTRTiles", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TiledGrid3DAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::GridAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_FadeOutDownTiles(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("FadeOutDownTiles"), -1);


    sq_pushstring(vm, _SC("FadeOutUpTiles"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_FadeOutDownTiles_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_FadeOutDownTiles_typeof_meta);



    squirrel_cocos2dx_FadeOutDownTiles_push_c_class(vm);

    std::string typeName = typeid(cocos2d::FadeOutDownTiles).name();
    g_sqType[typeName] = "cc.FadeOutDownTiles";

    return 1;
}
SQInteger squirrel_cocos2dx_StopGrid_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        cocos2d::StopGrid* ret = cocos2d::StopGrid::create();
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.StopGrid");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 0);
    return 0;
}

SQInteger squirrel_cocos2dx_StopGrid_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.StopGrid", -1);
    return 1;
}

void squirrel_cocos2dx_StopGrid_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::StopGrid", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionInstant", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_StopGrid(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("StopGrid"), -1);


    sq_pushstring(vm, _SC("ActionInstant"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_StopGrid_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_StopGrid_typeof_meta);



    squirrel_cocos2dx_StopGrid_push_c_class(vm);

    std::string typeName = typeid(cocos2d::StopGrid).name();
    g_sqType[typeName] = "cc.StopGrid";

    return 1;
}
SQInteger squirrel_cocos2dx_Mat4_getBackVector(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Mat4* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Mat4_getBackVector'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec3* arg0;

        ok &= sqval_to_object<cocos2d::Vec3>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->getBackVector(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getBackVector", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Mat4_set(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Mat4* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Mat4_set'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_ARRAY) {
                break;
            }

            const float* arg0;
            ok &= sqval_to_float_array(vm, 2, (const float **)&arg0);

            if (!ok) { break; }
            cobj->set(arg0);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 16) {
            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INTEGER && sq_gettype(vm, 5) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 6) != OT_INTEGER && sq_gettype(vm, 6) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 7) != OT_INTEGER && sq_gettype(vm, 7) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 8) != OT_INTEGER && sq_gettype(vm, 8) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 9) != OT_INTEGER && sq_gettype(vm, 9) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 10) != OT_INTEGER && sq_gettype(vm, 10) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 11) != OT_INTEGER && sq_gettype(vm, 11) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 12) != OT_INTEGER && sq_gettype(vm, 12) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 13) != OT_INTEGER && sq_gettype(vm, 13) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 14) != OT_INTEGER && sq_gettype(vm, 14) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 15) != OT_INTEGER && sq_gettype(vm, 15) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 16) != OT_INTEGER && sq_gettype(vm, 16) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 17) != OT_INTEGER && sq_gettype(vm, 17) != OT_FLOAT) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);

            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);

            if (!ok) { break; }
            float arg2;
            ok &= sqval_to_float(vm, 4, &arg2);

            if (!ok) { break; }
            float arg3;
            ok &= sqval_to_float(vm, 5, &arg3);

            if (!ok) { break; }
            float arg4;
            ok &= sqval_to_float(vm, 6, &arg4);

            if (!ok) { break; }
            float arg5;
            ok &= sqval_to_float(vm, 7, &arg5);

            if (!ok) { break; }
            float arg6;
            ok &= sqval_to_float(vm, 8, &arg6);

            if (!ok) { break; }
            float arg7;
            ok &= sqval_to_float(vm, 9, &arg7);

            if (!ok) { break; }
            float arg8;
            ok &= sqval_to_float(vm, 10, &arg8);

            if (!ok) { break; }
            float arg9;
            ok &= sqval_to_float(vm, 11, &arg9);

            if (!ok) { break; }
            float arg10;
            ok &= sqval_to_float(vm, 12, &arg10);

            if (!ok) { break; }
            float arg11;
            ok &= sqval_to_float(vm, 13, &arg11);

            if (!ok) { break; }
            float arg12;
            ok &= sqval_to_float(vm, 14, &arg12);

            if (!ok) { break; }
            float arg13;
            ok &= sqval_to_float(vm, 15, &arg13);

            if (!ok) { break; }
            float arg14;
            ok &= sqval_to_float(vm, 16, &arg14);

            if (!ok) { break; }
            float arg15;
            ok &= sqval_to_float(vm, 17, &arg15);

            if (!ok) { break; }
            cobj->set(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Mat4")) {
                break;
            }

            cocos2d::Mat4 arg0;
            cocos2d::Mat4 *ptr2 = nullptr; ok &= sqval_to_mat4(vm, 2, ptr2); arg0 = *ptr2;

            if (!ok) { break; }
            cobj->set(arg0);
            return 0;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "set", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Mat4_getTransposed(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Mat4* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Mat4_getTransposed'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Mat4 ret = cobj->getTransposed();
        mat4_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getTransposed", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Mat4_getDownVector(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Mat4* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Mat4_getDownVector'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec3* arg0;

        ok &= sqval_to_object<cocos2d::Vec3>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->getDownVector(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getDownVector", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Mat4_getRightVector(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Mat4* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Mat4_getRightVector'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec3* arg0;

        ok &= sqval_to_object<cocos2d::Vec3>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->getRightVector(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getRightVector", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Mat4_getTranslation(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Mat4* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Mat4_getTranslation'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec3* arg0;

        ok &= sqval_to_object<cocos2d::Vec3>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->getTranslation(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getTranslation", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Mat4_getRotation(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Mat4* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Mat4_getRotation'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Quaternion* arg0;

        ok &= sqval_to_quaternion(vm, 2, arg0);
        if (!ok)
            return 0;
        bool ret = cobj->getRotation(arg0);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getRotation", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Mat4_negate(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Mat4* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Mat4_negate'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->negate();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "negate", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Mat4_getUpVector(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Mat4* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Mat4_getUpVector'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec3* arg0;

        ok &= sqval_to_object<cocos2d::Vec3>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->getUpVector(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getUpVector", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Mat4_inverse(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Mat4* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Mat4_inverse'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->inverse();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "inverse", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Mat4_transformPoint(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Mat4* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Mat4_transformPoint'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Vec3")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Vec3")) {
                break;
            }

            cocos2d::Vec3 arg0;
            cocos2d::Vec3* ptr2 = nullptr; ok &= sqval_to_vec3(vm, 2, ptr2); arg0 = *ptr2;

            if (!ok) { break; }
            cocos2d::Vec3* arg1;
            ok &= sqval_to_object<cocos2d::Vec3>(vm, 3, &arg1);

            if (!ok) { break; }
            cobj->transformPoint(arg0, arg1);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Vec3")) {
                break;
            }

            cocos2d::Vec3* arg0;
            ok &= sqval_to_object<cocos2d::Vec3>(vm, 2, &arg0);

            if (!ok) { break; }
            cobj->transformPoint(arg0);
            return 0;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "transformPoint", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Mat4_rotateZ(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Mat4* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Mat4_rotateZ'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Mat4")) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);

            if (!ok) { break; }
            cocos2d::Mat4* arg1;
            ok &= sqval_to_object<cocos2d::Mat4>(vm, 3, &arg1);

            if (!ok) { break; }
            cobj->rotateZ(arg0, arg1);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);

            if (!ok) { break; }
            cobj->rotateZ(arg0);
            return 0;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "rotateZ", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Mat4_rotateX(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Mat4* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Mat4_rotateX'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Mat4")) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);

            if (!ok) { break; }
            cocos2d::Mat4* arg1;
            ok &= sqval_to_object<cocos2d::Mat4>(vm, 3, &arg1);

            if (!ok) { break; }
            cobj->rotateX(arg0, arg1);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);

            if (!ok) { break; }
            cobj->rotateX(arg0);
            return 0;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "rotateX", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Mat4_rotateY(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Mat4* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Mat4_rotateY'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Mat4")) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);

            if (!ok) { break; }
            cocos2d::Mat4* arg1;
            ok &= sqval_to_object<cocos2d::Mat4>(vm, 3, &arg1);

            if (!ok) { break; }
            cobj->rotateY(arg0, arg1);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);

            if (!ok) { break; }
            cobj->rotateY(arg0);
            return 0;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "rotateY", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Mat4_add(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Mat4* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Mat4_add'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Mat4")) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);

            if (!ok) { break; }
            cocos2d::Mat4* arg1;
            ok &= sqval_to_object<cocos2d::Mat4>(vm, 3, &arg1);

            if (!ok) { break; }
            cobj->add(arg0, arg1);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);

            if (!ok) { break; }
            cobj->add(arg0);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Mat4")) {
                break;
            }

            cocos2d::Mat4 arg0;
            cocos2d::Mat4 *ptr2 = nullptr; ok &= sqval_to_mat4(vm, 2, ptr2); arg0 = *ptr2;

            if (!ok) { break; }
            cobj->add(arg0);
            return 0;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "add", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Mat4_translate(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Mat4* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Mat4_translate'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 4) {
            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INSTANCE || ! instanceof_cclass(vm, 5, "cocos2d::Mat4")) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);

            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);

            if (!ok) { break; }
            float arg2;
            ok &= sqval_to_float(vm, 4, &arg2);

            if (!ok) { break; }
            cocos2d::Mat4* arg3;
            ok &= sqval_to_object<cocos2d::Mat4>(vm, 5, &arg3);

            if (!ok) { break; }
            cobj->translate(arg0, arg1, arg2, arg3);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 3) {
            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);

            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);

            if (!ok) { break; }
            float arg2;
            ok &= sqval_to_float(vm, 4, &arg2);

            if (!ok) { break; }
            cobj->translate(arg0, arg1, arg2);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Vec3")) {
                break;
            }

            cocos2d::Vec3 arg0;
            cocos2d::Vec3* ptr2 = nullptr; ok &= sqval_to_vec3(vm, 2, ptr2); arg0 = *ptr2;

            if (!ok) { break; }
            cobj->translate(arg0);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Vec3")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Mat4")) {
                break;
            }

            cocos2d::Vec3 arg0;
            cocos2d::Vec3* ptr2 = nullptr; ok &= sqval_to_vec3(vm, 2, ptr2); arg0 = *ptr2;

            if (!ok) { break; }
            cocos2d::Mat4* arg1;
            ok &= sqval_to_object<cocos2d::Mat4>(vm, 3, &arg1);

            if (!ok) { break; }
            cobj->translate(arg0, arg1);
            return 0;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "translate", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_Mat4_setIdentity(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Mat4* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Mat4_setIdentity'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->setIdentity();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setIdentity", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Mat4_determinant(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Mat4* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Mat4_determinant'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->determinant();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "determinant", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Mat4_getForwardVector(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Mat4* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Mat4_getForwardVector'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec3* arg0;

        ok &= sqval_to_object<cocos2d::Vec3>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->getForwardVector(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getForwardVector", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Mat4_transpose(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Mat4* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Mat4_transpose'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->transpose();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "transpose", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Mat4_rotate(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Mat4* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Mat4_rotate'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Quaternion")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Mat4")) {
                break;
            }

            cocos2d::Quaternion arg0;
            cocos2d::Quaternion *ptr2 = nullptr; ok &= sqval_to_quaternion(vm, 2, ptr2); arg0 = *ptr2;

            if (!ok) { break; }
            cocos2d::Mat4* arg1;
            ok &= sqval_to_object<cocos2d::Mat4>(vm, 3, &arg1);

            if (!ok) { break; }
            cobj->rotate(arg0, arg1);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Quaternion")) {
                break;
            }

            cocos2d::Quaternion arg0;
            cocos2d::Quaternion *ptr2 = nullptr; ok &= sqval_to_quaternion(vm, 2, ptr2); arg0 = *ptr2;

            if (!ok) { break; }
            cobj->rotate(arg0);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Vec3")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }

            cocos2d::Vec3 arg0;
            cocos2d::Vec3* ptr2 = nullptr; ok &= sqval_to_vec3(vm, 2, ptr2); arg0 = *ptr2;

            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);

            if (!ok) { break; }
            cobj->rotate(arg0, arg1);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 3) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Vec3")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INSTANCE || ! instanceof_cclass(vm, 4, "cocos2d::Mat4")) {
                break;
            }

            cocos2d::Vec3 arg0;
            cocos2d::Vec3* ptr2 = nullptr; ok &= sqval_to_vec3(vm, 2, ptr2); arg0 = *ptr2;

            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);

            if (!ok) { break; }
            cocos2d::Mat4* arg2;
            ok &= sqval_to_object<cocos2d::Mat4>(vm, 4, &arg2);

            if (!ok) { break; }
            cobj->rotate(arg0, arg1, arg2);
            return 0;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "rotate", (int)argc, 3);
    return 0;
}
SQInteger squirrel_cocos2dx_Mat4_scale(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Mat4* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Mat4_scale'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Mat4")) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);

            if (!ok) { break; }
            cocos2d::Mat4* arg1;
            ok &= sqval_to_object<cocos2d::Mat4>(vm, 3, &arg1);

            if (!ok) { break; }
            cobj->scale(arg0, arg1);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);

            if (!ok) { break; }
            cobj->scale(arg0);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 3) {
            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);

            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);

            if (!ok) { break; }
            float arg2;
            ok &= sqval_to_float(vm, 4, &arg2);

            if (!ok) { break; }
            cobj->scale(arg0, arg1, arg2);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 4) {
            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INSTANCE || ! instanceof_cclass(vm, 5, "cocos2d::Mat4")) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);

            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);

            if (!ok) { break; }
            float arg2;
            ok &= sqval_to_float(vm, 4, &arg2);

            if (!ok) { break; }
            cocos2d::Mat4* arg3;
            ok &= sqval_to_object<cocos2d::Mat4>(vm, 5, &arg3);

            if (!ok) { break; }
            cobj->scale(arg0, arg1, arg2, arg3);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Vec3")) {
                break;
            }

            cocos2d::Vec3 arg0;
            cocos2d::Vec3* ptr2 = nullptr; ok &= sqval_to_vec3(vm, 2, ptr2); arg0 = *ptr2;

            if (!ok) { break; }
            cobj->scale(arg0);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Vec3")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Mat4")) {
                break;
            }

            cocos2d::Vec3 arg0;
            cocos2d::Vec3* ptr2 = nullptr; ok &= sqval_to_vec3(vm, 2, ptr2); arg0 = *ptr2;

            if (!ok) { break; }
            cocos2d::Mat4* arg1;
            ok &= sqval_to_object<cocos2d::Mat4>(vm, 3, &arg1);

            if (!ok) { break; }
            cobj->scale(arg0, arg1);
            return 0;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "scale", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_Mat4_transformVector(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Mat4* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Mat4_transformVector'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Vec3")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Vec3")) {
                break;
            }

            cocos2d::Vec3 arg0;
            cocos2d::Vec3* ptr2 = nullptr; ok &= sqval_to_vec3(vm, 2, ptr2); arg0 = *ptr2;

            if (!ok) { break; }
            cocos2d::Vec3* arg1;
            ok &= sqval_to_object<cocos2d::Vec3>(vm, 3, &arg1);

            if (!ok) { break; }
            cobj->transformVector(arg0, arg1);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Vec3")) {
                break;
            }

            cocos2d::Vec3* arg0;
            ok &= sqval_to_object<cocos2d::Vec3>(vm, 2, &arg0);

            if (!ok) { break; }
            cobj->transformVector(arg0);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 5) {
            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INTEGER && sq_gettype(vm, 5) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 6) != OT_INSTANCE || ! instanceof_cclass(vm, 6, "cocos2d::Vec3")) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);

            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);

            if (!ok) { break; }
            float arg2;
            ok &= sqval_to_float(vm, 4, &arg2);

            if (!ok) { break; }
            float arg3;
            ok &= sqval_to_float(vm, 5, &arg3);

            if (!ok) { break; }
            cocos2d::Vec3* arg4;
            ok &= sqval_to_object<cocos2d::Vec3>(vm, 6, &arg4);

            if (!ok) { break; }
            cobj->transformVector(arg0, arg1, arg2, arg3, arg4);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Vec4")) {
                break;
            }

            cocos2d::Vec4* arg0;
            ok &= sqval_to_object<cocos2d::Vec4>(vm, 2, &arg0);

            if (!ok) { break; }
            cobj->transformVector(arg0);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Vec4")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Vec4")) {
                break;
            }

            cocos2d::Vec4 arg0;
            cocos2d::Vec4* ptr2 = nullptr; ok &= sqval_to_vec4(vm, 2, ptr2); arg0 = *ptr2;

            if (!ok) { break; }
            cocos2d::Vec4* arg1;
            ok &= sqval_to_object<cocos2d::Vec4>(vm, 3, &arg1);

            if (!ok) { break; }
            cobj->transformVector(arg0, arg1);
            return 0;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "transformVector", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_Mat4_getScale(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Mat4* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Mat4_getScale'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec3* arg0;

        ok &= sqval_to_object<cocos2d::Vec3>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->getScale(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getScale", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Mat4_subtract(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Mat4* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Mat4_subtract'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Mat4 arg0;

        cocos2d::Mat4 *ptr2 = nullptr; ok &= sqval_to_mat4(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->subtract(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "subtract", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Mat4_getNegated(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Mat4* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Mat4_getNegated'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Mat4 ret = cobj->getNegated();
        mat4_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getNegated", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Mat4_getLeftVector(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Mat4* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Mat4_getLeftVector'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec3* arg0;

        ok &= sqval_to_object<cocos2d::Vec3>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->getLeftVector(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getLeftVector", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Mat4_setZero(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Mat4* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Mat4_setZero'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->setZero();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setZero", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Mat4_isIdentity(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Mat4* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Mat4_isIdentity'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isIdentity();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isIdentity", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Mat4_decompose(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Mat4* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Mat4_decompose'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 3) 
    {
        cocos2d::Vec3* arg0;
        cocos2d::Quaternion* arg1;
        cocos2d::Vec3* arg2;

        ok &= sqval_to_object<cocos2d::Vec3>(vm, 2, &arg0);

        ok &= sqval_to_quaternion(vm, 3, arg1);

        ok &= sqval_to_object<cocos2d::Vec3>(vm, 4, &arg2);
        if (!ok)
            return 0;
        bool ret = cobj->decompose(arg0, arg1, arg2);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "decompose", (int)argc, 3);
    return 0;
}
SQInteger squirrel_cocos2dx_Mat4_getInversed(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Mat4* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Mat4_getInversed'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Mat4 ret = cobj->getInversed();
        mat4_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getInversed", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Mat4_createLookAt_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 10)
        {

            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INTEGER && sq_gettype(vm, 5) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 6) != OT_INTEGER && sq_gettype(vm, 6) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 7) != OT_INTEGER && sq_gettype(vm, 7) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 8) != OT_INTEGER && sq_gettype(vm, 8) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 9) != OT_INTEGER && sq_gettype(vm, 9) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 10) != OT_INTEGER && sq_gettype(vm, 10) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 11) != OT_INSTANCE || ! instanceof_cclass(vm, 11, "cocos2d::Mat4")) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);
            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);
            if (!ok) { break; }
            float arg2;
            ok &= sqval_to_float(vm, 4, &arg2);
            if (!ok) { break; }
            float arg3;
            ok &= sqval_to_float(vm, 5, &arg3);
            if (!ok) { break; }
            float arg4;
            ok &= sqval_to_float(vm, 6, &arg4);
            if (!ok) { break; }
            float arg5;
            ok &= sqval_to_float(vm, 7, &arg5);
            if (!ok) { break; }
            float arg6;
            ok &= sqval_to_float(vm, 8, &arg6);
            if (!ok) { break; }
            float arg7;
            ok &= sqval_to_float(vm, 9, &arg7);
            if (!ok) { break; }
            float arg8;
            ok &= sqval_to_float(vm, 10, &arg8);
            if (!ok) { break; }
            cocos2d::Mat4* arg9;
            ok &= sqval_to_object<cocos2d::Mat4>(vm, 11, &arg9);
            if (!ok) { break; }
            cocos2d::Mat4::createLookAt(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
            return 0;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 4)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Vec3")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Vec3")) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INSTANCE || ! instanceof_cclass(vm, 4, "cocos2d::Vec3")) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INSTANCE || ! instanceof_cclass(vm, 5, "cocos2d::Mat4")) {
                break;
            }

            cocos2d::Vec3 arg0;
            cocos2d::Vec3* ptr2 = nullptr; ok &= sqval_to_vec3(vm, 2, ptr2); arg0 = *ptr2;
            if (!ok) { break; }
            cocos2d::Vec3 arg1;
            cocos2d::Vec3* ptr3 = nullptr; ok &= sqval_to_vec3(vm, 3, ptr3); arg1 = *ptr3;
            if (!ok) { break; }
            cocos2d::Vec3 arg2;
            cocos2d::Vec3* ptr4 = nullptr; ok &= sqval_to_vec3(vm, 4, ptr4); arg2 = *ptr4;
            if (!ok) { break; }
            cocos2d::Mat4* arg3;
            ok &= sqval_to_object<cocos2d::Mat4>(vm, 5, &arg3);
            if (!ok) { break; }
            cocos2d::Mat4::createLookAt(arg0, arg1, arg2, arg3);
            return 0;
        }
    } while (0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d", "createLookAt", (int)argc, 4);
    return 0;
}
SQInteger squirrel_cocos2dx_Mat4_createOrthographic_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 5)
    {
        float arg0;
        float arg1;
        float arg2;
        float arg3;
        cocos2d::Mat4* arg4;
        ok &= sqval_to_float(vm, 2, &arg0);
        ok &= sqval_to_float(vm, 3, &arg1);
        ok &= sqval_to_float(vm, 4, &arg2);
        ok &= sqval_to_float(vm, 5, &arg3);
        ok &= sqval_to_object<cocos2d::Mat4>(vm, 6, &arg4);
        if(!ok)
            return 0;
        cocos2d::Mat4::createOrthographic(arg0, arg1, arg2, arg3, arg4);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "createOrthographic", (int)argc, 5);
    return 0;
}
SQInteger squirrel_cocos2dx_Mat4_createRotationX_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        float arg0;
        cocos2d::Mat4* arg1;
        ok &= sqval_to_float(vm, 2, &arg0);
        ok &= sqval_to_object<cocos2d::Mat4>(vm, 3, &arg1);
        if(!ok)
            return 0;
        cocos2d::Mat4::createRotationX(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "createRotationX", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_Mat4_createRotationZ_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        float arg0;
        cocos2d::Mat4* arg1;
        ok &= sqval_to_float(vm, 2, &arg0);
        ok &= sqval_to_object<cocos2d::Mat4>(vm, 3, &arg1);
        if(!ok)
            return 0;
        cocos2d::Mat4::createRotationZ(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "createRotationZ", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_Mat4_createRotation_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 3)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Vec3")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INSTANCE || ! instanceof_cclass(vm, 4, "cocos2d::Mat4")) {
                break;
            }

            cocos2d::Vec3 arg0;
            cocos2d::Vec3* ptr2 = nullptr; ok &= sqval_to_vec3(vm, 2, ptr2); arg0 = *ptr2;
            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);
            if (!ok) { break; }
            cocos2d::Mat4* arg2;
            ok &= sqval_to_object<cocos2d::Mat4>(vm, 4, &arg2);
            if (!ok) { break; }
            cocos2d::Mat4::createRotation(arg0, arg1, arg2);
            return 0;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 2)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Quaternion")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Mat4")) {
                break;
            }

            cocos2d::Quaternion arg0;
            cocos2d::Quaternion *ptr2 = nullptr; ok &= sqval_to_quaternion(vm, 2, ptr2); arg0 = *ptr2;
            if (!ok) { break; }
            cocos2d::Mat4* arg1;
            ok &= sqval_to_object<cocos2d::Mat4>(vm, 3, &arg1);
            if (!ok) { break; }
            cocos2d::Mat4::createRotation(arg0, arg1);
            return 0;
        }
    } while (0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d", "createRotation", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_Mat4_createPerspective_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 5)
    {
        float arg0;
        float arg1;
        float arg2;
        float arg3;
        cocos2d::Mat4* arg4;
        ok &= sqval_to_float(vm, 2, &arg0);
        ok &= sqval_to_float(vm, 3, &arg1);
        ok &= sqval_to_float(vm, 4, &arg2);
        ok &= sqval_to_float(vm, 5, &arg3);
        ok &= sqval_to_object<cocos2d::Mat4>(vm, 6, &arg4);
        if(!ok)
            return 0;
        cocos2d::Mat4::createPerspective(arg0, arg1, arg2, arg3, arg4);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "createPerspective", (int)argc, 5);
    return 0;
}
SQInteger squirrel_cocos2dx_Mat4_createScale_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 4)
        {

            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INSTANCE || ! instanceof_cclass(vm, 5, "cocos2d::Mat4")) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);
            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);
            if (!ok) { break; }
            float arg2;
            ok &= sqval_to_float(vm, 4, &arg2);
            if (!ok) { break; }
            cocos2d::Mat4* arg3;
            ok &= sqval_to_object<cocos2d::Mat4>(vm, 5, &arg3);
            if (!ok) { break; }
            cocos2d::Mat4::createScale(arg0, arg1, arg2, arg3);
            return 0;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 2)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Vec3")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Mat4")) {
                break;
            }

            cocos2d::Vec3 arg0;
            cocos2d::Vec3* ptr2 = nullptr; ok &= sqval_to_vec3(vm, 2, ptr2); arg0 = *ptr2;
            if (!ok) { break; }
            cocos2d::Mat4* arg1;
            ok &= sqval_to_object<cocos2d::Mat4>(vm, 3, &arg1);
            if (!ok) { break; }
            cocos2d::Mat4::createScale(arg0, arg1);
            return 0;
        }
    } while (0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d", "createScale", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_Mat4_add_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;

    if (sq_gettype(vm, 1) == OT_INSTANCE) {
        return squirrel_cocos2dx_Mat4_add(vm);
    }

    argc = sq_gettop(vm) - 1;

    if (argc == 3)
    {
        cocos2d::Mat4 arg0;
        cocos2d::Mat4 arg1;
        cocos2d::Mat4* arg2;
        cocos2d::Mat4 *ptr2 = nullptr; ok &= sqval_to_mat4(vm, 2, ptr2); arg0 = *ptr2;
        cocos2d::Mat4 *ptr3 = nullptr; ok &= sqval_to_mat4(vm, 3, ptr3); arg1 = *ptr3;
        ok &= sqval_to_object<cocos2d::Mat4>(vm, 4, &arg2);
        if(!ok)
            return 0;
        cocos2d::Mat4::add(arg0, arg1, arg2);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "add", (int)argc, 3);
    return 0;
}
SQInteger squirrel_cocos2dx_Mat4_createTranslation_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 4)
        {

            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INSTANCE || ! instanceof_cclass(vm, 5, "cocos2d::Mat4")) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);
            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);
            if (!ok) { break; }
            float arg2;
            ok &= sqval_to_float(vm, 4, &arg2);
            if (!ok) { break; }
            cocos2d::Mat4* arg3;
            ok &= sqval_to_object<cocos2d::Mat4>(vm, 5, &arg3);
            if (!ok) { break; }
            cocos2d::Mat4::createTranslation(arg0, arg1, arg2, arg3);
            return 0;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 2)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Vec3")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Mat4")) {
                break;
            }

            cocos2d::Vec3 arg0;
            cocos2d::Vec3* ptr2 = nullptr; ok &= sqval_to_vec3(vm, 2, ptr2); arg0 = *ptr2;
            if (!ok) { break; }
            cocos2d::Mat4* arg1;
            ok &= sqval_to_object<cocos2d::Mat4>(vm, 3, &arg1);
            if (!ok) { break; }
            cocos2d::Mat4::createTranslation(arg0, arg1);
            return 0;
        }
    } while (0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d", "createTranslation", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_Mat4_createRotationY_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        float arg0;
        cocos2d::Mat4* arg1;
        ok &= sqval_to_float(vm, 2, &arg0);
        ok &= sqval_to_object<cocos2d::Mat4>(vm, 3, &arg1);
        if(!ok)
            return 0;
        cocos2d::Mat4::createRotationY(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "createRotationY", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_Mat4_createBillboard_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 5)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Vec3")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Vec3")) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INSTANCE || ! instanceof_cclass(vm, 4, "cocos2d::Vec3")) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INSTANCE || ! instanceof_cclass(vm, 5, "cocos2d::Vec3")) {
                break;
            }
            if (sq_gettype(vm, 6) != OT_INSTANCE || ! instanceof_cclass(vm, 6, "cocos2d::Mat4")) {
                break;
            }

            cocos2d::Vec3 arg0;
            cocos2d::Vec3* ptr2 = nullptr; ok &= sqval_to_vec3(vm, 2, ptr2); arg0 = *ptr2;
            if (!ok) { break; }
            cocos2d::Vec3 arg1;
            cocos2d::Vec3* ptr3 = nullptr; ok &= sqval_to_vec3(vm, 3, ptr3); arg1 = *ptr3;
            if (!ok) { break; }
            cocos2d::Vec3 arg2;
            cocos2d::Vec3* ptr4 = nullptr; ok &= sqval_to_vec3(vm, 4, ptr4); arg2 = *ptr4;
            if (!ok) { break; }
            cocos2d::Vec3 arg3;
            cocos2d::Vec3* ptr5 = nullptr; ok &= sqval_to_vec3(vm, 5, ptr5); arg3 = *ptr5;
            if (!ok) { break; }
            cocos2d::Mat4* arg4;
            ok &= sqval_to_object<cocos2d::Mat4>(vm, 6, &arg4);
            if (!ok) { break; }
            cocos2d::Mat4::createBillboard(arg0, arg1, arg2, arg3, arg4);
            return 0;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 4)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Vec3")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Vec3")) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INSTANCE || ! instanceof_cclass(vm, 4, "cocos2d::Vec3")) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INSTANCE || ! instanceof_cclass(vm, 5, "cocos2d::Mat4")) {
                break;
            }

            cocos2d::Vec3 arg0;
            cocos2d::Vec3* ptr2 = nullptr; ok &= sqval_to_vec3(vm, 2, ptr2); arg0 = *ptr2;
            if (!ok) { break; }
            cocos2d::Vec3 arg1;
            cocos2d::Vec3* ptr3 = nullptr; ok &= sqval_to_vec3(vm, 3, ptr3); arg1 = *ptr3;
            if (!ok) { break; }
            cocos2d::Vec3 arg2;
            cocos2d::Vec3* ptr4 = nullptr; ok &= sqval_to_vec3(vm, 4, ptr4); arg2 = *ptr4;
            if (!ok) { break; }
            cocos2d::Mat4* arg3;
            ok &= sqval_to_object<cocos2d::Mat4>(vm, 5, &arg3);
            if (!ok) { break; }
            cocos2d::Mat4::createBillboard(arg0, arg1, arg2, arg3);
            return 0;
        }
    } while (0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d", "createBillboard", (int)argc, 4);
    return 0;
}
SQInteger squirrel_cocos2dx_Mat4_subtract_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;

    if (sq_gettype(vm, 1) == OT_INSTANCE) {
        return squirrel_cocos2dx_Mat4_subtract(vm);
    }

    argc = sq_gettop(vm) - 1;

    if (argc == 3)
    {
        cocos2d::Mat4 arg0;
        cocos2d::Mat4 arg1;
        cocos2d::Mat4* arg2;
        cocos2d::Mat4 *ptr2 = nullptr; ok &= sqval_to_mat4(vm, 2, ptr2); arg0 = *ptr2;
        cocos2d::Mat4 *ptr3 = nullptr; ok &= sqval_to_mat4(vm, 3, ptr3); arg1 = *ptr3;
        ok &= sqval_to_object<cocos2d::Mat4>(vm, 4, &arg2);
        if(!ok)
            return 0;
        cocos2d::Mat4::subtract(arg0, arg1, arg2);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "subtract", (int)argc, 3);
    return 0;
}
SQInteger squirrel_cocos2dx_Mat4_createOrthographicOffCenter_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 7)
    {
        float arg0;
        float arg1;
        float arg2;
        float arg3;
        float arg4;
        float arg5;
        cocos2d::Mat4* arg6;
        ok &= sqval_to_float(vm, 2, &arg0);
        ok &= sqval_to_float(vm, 3, &arg1);
        ok &= sqval_to_float(vm, 4, &arg2);
        ok &= sqval_to_float(vm, 5, &arg3);
        ok &= sqval_to_float(vm, 6, &arg4);
        ok &= sqval_to_float(vm, 7, &arg5);
        ok &= sqval_to_object<cocos2d::Mat4>(vm, 8, &arg6);
        if(!ok)
            return 0;
        cocos2d::Mat4::createOrthographicOffCenter(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "createOrthographicOffCenter", (int)argc, 7);
    return 0;
}
SQInteger squirrel_cocos2dx_Mat4_constructor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Mat4* cobj = nullptr;
    bool ok  = true;

    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 16) {
            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INTEGER && sq_gettype(vm, 5) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 6) != OT_INTEGER && sq_gettype(vm, 6) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 7) != OT_INTEGER && sq_gettype(vm, 7) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 8) != OT_INTEGER && sq_gettype(vm, 8) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 9) != OT_INTEGER && sq_gettype(vm, 9) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 10) != OT_INTEGER && sq_gettype(vm, 10) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 11) != OT_INTEGER && sq_gettype(vm, 11) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 12) != OT_INTEGER && sq_gettype(vm, 12) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 13) != OT_INTEGER && sq_gettype(vm, 13) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 14) != OT_INTEGER && sq_gettype(vm, 14) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 15) != OT_INTEGER && sq_gettype(vm, 15) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 16) != OT_INTEGER && sq_gettype(vm, 16) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 17) != OT_INTEGER && sq_gettype(vm, 17) != OT_FLOAT) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);

            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);

            if (!ok) { break; }
            float arg2;
            ok &= sqval_to_float(vm, 4, &arg2);

            if (!ok) { break; }
            float arg3;
            ok &= sqval_to_float(vm, 5, &arg3);

            if (!ok) { break; }
            float arg4;
            ok &= sqval_to_float(vm, 6, &arg4);

            if (!ok) { break; }
            float arg5;
            ok &= sqval_to_float(vm, 7, &arg5);

            if (!ok) { break; }
            float arg6;
            ok &= sqval_to_float(vm, 8, &arg6);

            if (!ok) { break; }
            float arg7;
            ok &= sqval_to_float(vm, 9, &arg7);

            if (!ok) { break; }
            float arg8;
            ok &= sqval_to_float(vm, 10, &arg8);

            if (!ok) { break; }
            float arg9;
            ok &= sqval_to_float(vm, 11, &arg9);

            if (!ok) { break; }
            float arg10;
            ok &= sqval_to_float(vm, 12, &arg10);

            if (!ok) { break; }
            float arg11;
            ok &= sqval_to_float(vm, 13, &arg11);

            if (!ok) { break; }
            float arg12;
            ok &= sqval_to_float(vm, 14, &arg12);

            if (!ok) { break; }
            float arg13;
            ok &= sqval_to_float(vm, 15, &arg13);

            if (!ok) { break; }
            float arg14;
            ok &= sqval_to_float(vm, 16, &arg14);

            if (!ok) { break; }
            float arg15;
            ok &= sqval_to_float(vm, 17, &arg15);

            if (!ok) { break; }
            cobj = new cocos2d::Mat4(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15);
            sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
            sq_setreleasehook(vm, 1, squirrel_releasehook_Mat4);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 0) {

            cobj = new cocos2d::Mat4();
            sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
            sq_setreleasehook(vm, 1, squirrel_releasehook_Mat4);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_ARRAY) {
                break;
            }

            const float* arg0;
            ok &= sqval_to_float_array(vm, 2, (const float **)&arg0);

            if (!ok) { break; }
            cobj = new cocos2d::Mat4(arg0);
            sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
            sq_setreleasehook(vm, 1, squirrel_releasehook_Mat4);
            return 1;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "Mat4", (int)argc, 1);
    return 0;
}


SQInteger squirrel_cocos2dx_Mat4_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.Mat4", -1);
    return 1;
}

void squirrel_cocos2dx_Mat4_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::Mat4", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_Mat4(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("Mat4"), -1);

    sq_newclass(vm, SQFalse);

    to_squirrel_function(vm, "constructor", squirrel_cocos2dx_Mat4_constructor);
    to_squirrel_function(vm, "getBackVector", squirrel_cocos2dx_Mat4_getBackVector);
    to_squirrel_function(vm, "set", squirrel_cocos2dx_Mat4_set);
    to_squirrel_function(vm, "getTransposed", squirrel_cocos2dx_Mat4_getTransposed);
    to_squirrel_function(vm, "getDownVector", squirrel_cocos2dx_Mat4_getDownVector);
    to_squirrel_function(vm, "getRightVector", squirrel_cocos2dx_Mat4_getRightVector);
    to_squirrel_function(vm, "getTranslation", squirrel_cocos2dx_Mat4_getTranslation);
    to_squirrel_function(vm, "getRotation", squirrel_cocos2dx_Mat4_getRotation);
    to_squirrel_function(vm, "negate", squirrel_cocos2dx_Mat4_negate);
    to_squirrel_function(vm, "getUpVector", squirrel_cocos2dx_Mat4_getUpVector);
    to_squirrel_function(vm, "inverse", squirrel_cocos2dx_Mat4_inverse);
    to_squirrel_function(vm, "transformPoint", squirrel_cocos2dx_Mat4_transformPoint);
    to_squirrel_function(vm, "rotateZ", squirrel_cocos2dx_Mat4_rotateZ);
    to_squirrel_function(vm, "rotateX", squirrel_cocos2dx_Mat4_rotateX);
    to_squirrel_function(vm, "rotateY", squirrel_cocos2dx_Mat4_rotateY);
    to_squirrel_function(vm, "translate", squirrel_cocos2dx_Mat4_translate);
    to_squirrel_function(vm, "setIdentity", squirrel_cocos2dx_Mat4_setIdentity);
    to_squirrel_function(vm, "determinant", squirrel_cocos2dx_Mat4_determinant);
    to_squirrel_function(vm, "getForwardVector", squirrel_cocos2dx_Mat4_getForwardVector);
    to_squirrel_function(vm, "transpose", squirrel_cocos2dx_Mat4_transpose);
    to_squirrel_function(vm, "rotate", squirrel_cocos2dx_Mat4_rotate);
    to_squirrel_function(vm, "scale", squirrel_cocos2dx_Mat4_scale);
    to_squirrel_function(vm, "transformVector", squirrel_cocos2dx_Mat4_transformVector);
    to_squirrel_function(vm, "getScale", squirrel_cocos2dx_Mat4_getScale);
    to_squirrel_function(vm, "getNegated", squirrel_cocos2dx_Mat4_getNegated);
    to_squirrel_function(vm, "getLeftVector", squirrel_cocos2dx_Mat4_getLeftVector);
    to_squirrel_function(vm, "setZero", squirrel_cocos2dx_Mat4_setZero);
    to_squirrel_function(vm, "isIdentity", squirrel_cocos2dx_Mat4_isIdentity);
    to_squirrel_function(vm, "decompose", squirrel_cocos2dx_Mat4_decompose);
    to_squirrel_function(vm, "getInversed", squirrel_cocos2dx_Mat4_getInversed);
    to_squirrel_function(vm, "createLookAt", squirrel_cocos2dx_Mat4_createLookAt_static, SQTrue);
    to_squirrel_function(vm, "createOrthographic", squirrel_cocos2dx_Mat4_createOrthographic_static, SQTrue);
    to_squirrel_function(vm, "createRotationX", squirrel_cocos2dx_Mat4_createRotationX_static, SQTrue);
    to_squirrel_function(vm, "createRotationZ", squirrel_cocos2dx_Mat4_createRotationZ_static, SQTrue);
    to_squirrel_function(vm, "createRotation", squirrel_cocos2dx_Mat4_createRotation_static, SQTrue);
    to_squirrel_function(vm, "createPerspective", squirrel_cocos2dx_Mat4_createPerspective_static, SQTrue);
    to_squirrel_function(vm, "createScale", squirrel_cocos2dx_Mat4_createScale_static, SQTrue);
    to_squirrel_function(vm, "add", squirrel_cocos2dx_Mat4_add_static, SQTrue);
    to_squirrel_function(vm, "createTranslation", squirrel_cocos2dx_Mat4_createTranslation_static, SQTrue);
    to_squirrel_function(vm, "createRotationY", squirrel_cocos2dx_Mat4_createRotationY_static, SQTrue);
    to_squirrel_function(vm, "createBillboard", squirrel_cocos2dx_Mat4_createBillboard_static, SQTrue);
    to_squirrel_function(vm, "subtract", squirrel_cocos2dx_Mat4_subtract_static, SQTrue);
    to_squirrel_function(vm, "createOrthographicOffCenter", squirrel_cocos2dx_Mat4_createOrthographicOffCenter_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_Mat4_typeof_meta);

    to_squirrel_variable_object(vm, "ZERO", (SQUserPointer)&cocos2d::Mat4::ZERO, SQTrue);
    to_squirrel_variable_object(vm, "IDENTITY", (SQUserPointer)&cocos2d::Mat4::IDENTITY, SQTrue);


    squirrel_cocos2dx_Mat4_push_c_class(vm);

    std::string typeName = typeid(cocos2d::Mat4).name();
    g_sqType[typeName] = "cc.Mat4";

    return 1;
}
SQInteger squirrel_cocos2dx_TransitionScene_finish(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TransitionScene* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TransitionScene_finish'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->finish();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "finish", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_TransitionScene_hideOutShowIn(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TransitionScene* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TransitionScene_hideOutShowIn'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->hideOutShowIn();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "hideOutShowIn", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_TransitionScene_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        float arg0;
        cocos2d::Scene* arg1;
        ok &= sqval_to_float(vm, 2, &arg0);
        ok &= sqval_to_object<cocos2d::Scene>(vm, 3, &arg1);
        if(!ok)
            return 0;
        cocos2d::TransitionScene* ret = cocos2d::TransitionScene::create(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.TransitionScene");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_TransitionScene_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.TransitionScene", -1);
    return 1;
}

void squirrel_cocos2dx_TransitionScene_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::TransitionScene", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Scene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_TransitionScene(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("TransitionScene"), -1);


    sq_pushstring(vm, _SC("Scene"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "finish", squirrel_cocos2dx_TransitionScene_finish);
    to_squirrel_function(vm, "hideOutShowIn", squirrel_cocos2dx_TransitionScene_hideOutShowIn);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_TransitionScene_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_TransitionScene_typeof_meta);


    sq_pushstring(vm, _SC("Orientation"), -1);
    sq_newtable(vm);
    to_squirrel_variable_integer(vm, "LEFT_OVER", (SQInteger)cocos2d::TransitionScene::Orientation::LEFT_OVER, SQTrue);
    to_squirrel_variable_integer(vm, "RIGHT_OVER", (SQInteger)cocos2d::TransitionScene::Orientation::RIGHT_OVER, SQTrue);
    to_squirrel_variable_integer(vm, "UP_OVER", (SQInteger)cocos2d::TransitionScene::Orientation::UP_OVER, SQTrue);
    to_squirrel_variable_integer(vm, "DOWN_OVER", (SQInteger)cocos2d::TransitionScene::Orientation::DOWN_OVER, SQTrue);
    sq_newslot(vm, -3, SQTrue);

    squirrel_cocos2dx_TransitionScene_push_c_class(vm);

    std::string typeName = typeid(cocos2d::TransitionScene).name();
    g_sqType[typeName] = "cc.TransitionScene";

    return 1;
}
SQInteger squirrel_cocos2dx_ParticleSpiral_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        cocos2d::ParticleSpiral* ret = cocos2d::ParticleSpiral::create();
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.ParticleSpiral");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSpiral_createWithTotalParticles_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if(!ok)
            return 0;
        cocos2d::ParticleSpiral* ret = cocos2d::ParticleSpiral::createWithTotalParticles(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.ParticleSpiral");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "createWithTotalParticles", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_ParticleSpiral_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.ParticleSpiral", -1);
    return 1;
}

void squirrel_cocos2dx_ParticleSpiral_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::ParticleSpiral", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ParticleSystemQuad", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ParticleSystem", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TextureProtocol", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::BlendProtocol", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_ParticleSpiral(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("ParticleSpiral"), -1);


    sq_pushstring(vm, _SC("ParticleSystemQuad"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_ParticleSpiral_create_static, SQTrue);
    to_squirrel_function(vm, "createWithTotalParticles", squirrel_cocos2dx_ParticleSpiral_createWithTotalParticles_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_ParticleSpiral_typeof_meta);



    squirrel_cocos2dx_ParticleSpiral_push_c_class(vm);

    std::string typeName = typeid(cocos2d::ParticleSpiral).name();
    g_sqType[typeName] = "cc.ParticleSpiral";

    return 1;
}
SQInteger squirrel_cocos2dx_SkewBy_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 3)
    {
        float arg0;
        float arg1;
        float arg2;
        ok &= sqval_to_float(vm, 2, &arg0);
        ok &= sqval_to_float(vm, 3, &arg1);
        ok &= sqval_to_float(vm, 4, &arg2);
        if(!ok)
            return 0;
        cocos2d::SkewBy* ret = cocos2d::SkewBy::create(arg0, arg1, arg2);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.SkewBy");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 3);
    return 0;
}

SQInteger squirrel_cocos2dx_SkewBy_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.SkewBy", -1);
    return 1;
}

void squirrel_cocos2dx_SkewBy_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::SkewBy", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::SkewTo", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_SkewBy(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("SkewBy"), -1);


    sq_pushstring(vm, _SC("SkewTo"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_SkewBy_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_SkewBy_typeof_meta);



    squirrel_cocos2dx_SkewBy_push_c_class(vm);

    std::string typeName = typeid(cocos2d::SkewBy).name();
    g_sqType[typeName] = "cc.SkewBy";

    return 1;
}
SQInteger squirrel_cocos2dx_EaseQuadraticActionOut_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        cocos2d::ActionInterval* arg0;
        ok &= sqval_to_object<cocos2d::ActionInterval>(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::EaseQuadraticActionOut* ret = cocos2d::EaseQuadraticActionOut::create(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.EaseQuadraticActionOut");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_EaseQuadraticActionOut_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.EaseQuadraticActionOut", -1);
    return 1;
}

void squirrel_cocos2dx_EaseQuadraticActionOut_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::EaseQuadraticActionOut", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionEase", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_EaseQuadraticActionOut(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("EaseQuadraticActionOut"), -1);


    sq_pushstring(vm, _SC("ActionEase"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_EaseQuadraticActionOut_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_EaseQuadraticActionOut_typeof_meta);



    squirrel_cocos2dx_EaseQuadraticActionOut_push_c_class(vm);

    std::string typeName = typeid(cocos2d::EaseQuadraticActionOut).name();
    g_sqType[typeName] = "cc.EaseQuadraticActionOut";

    return 1;
}
SQInteger squirrel_cocos2dx_Layer_onTouchMoved(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Layer* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Layer_onTouchMoved'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        cocos2d::Touch* arg0;
        cocos2d::Event* arg1;

        ok &= sqval_to_object<cocos2d::Touch>(vm, 2, &arg0);

        ok &= sqval_to_object<cocos2d::Event>(vm, 3, &arg1);
        if (!ok)
            return 0;
        cobj->onTouchMoved(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "onTouchMoved", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_Layer_onTouchesEnded(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Layer* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Layer_onTouchesEnded'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        std::vector<cocos2d::Touch *> arg0;
        cocos2d::Event* arg1;

        ok &= sqval_to_ccvector_object<cocos2d::Touch >(vm, 2, arg0);

        ok &= sqval_to_object<cocos2d::Event>(vm, 3, &arg1);
        if (!ok)
            return 0;
        cobj->onTouchesEnded(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "onTouchesEnded", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_Layer_onTouchEnded(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Layer* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Layer_onTouchEnded'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        cocos2d::Touch* arg0;
        cocos2d::Event* arg1;

        ok &= sqval_to_object<cocos2d::Touch>(vm, 2, &arg0);

        ok &= sqval_to_object<cocos2d::Event>(vm, 3, &arg1);
        if (!ok)
            return 0;
        cobj->onTouchEnded(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "onTouchEnded", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_Layer_onTouchesBegan(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Layer* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Layer_onTouchesBegan'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        std::vector<cocos2d::Touch *> arg0;
        cocos2d::Event* arg1;

        ok &= sqval_to_ccvector_object<cocos2d::Touch >(vm, 2, arg0);

        ok &= sqval_to_object<cocos2d::Event>(vm, 3, &arg1);
        if (!ok)
            return 0;
        cobj->onTouchesBegan(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "onTouchesBegan", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_Layer_onTouchCancelled(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Layer* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Layer_onTouchCancelled'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        cocos2d::Touch* arg0;
        cocos2d::Event* arg1;

        ok &= sqval_to_object<cocos2d::Touch>(vm, 2, &arg0);

        ok &= sqval_to_object<cocos2d::Event>(vm, 3, &arg1);
        if (!ok)
            return 0;
        cobj->onTouchCancelled(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "onTouchCancelled", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_Layer_onTouchBegan(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Layer* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Layer_onTouchBegan'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        cocos2d::Touch* arg0;
        cocos2d::Event* arg1;

        ok &= sqval_to_object<cocos2d::Touch>(vm, 2, &arg0);

        ok &= sqval_to_object<cocos2d::Event>(vm, 3, &arg1);
        if (!ok)
            return 0;
        bool ret = cobj->onTouchBegan(arg0, arg1);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "onTouchBegan", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_Layer_onTouchesCancelled(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Layer* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Layer_onTouchesCancelled'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        std::vector<cocos2d::Touch *> arg0;
        cocos2d::Event* arg1;

        ok &= sqval_to_ccvector_object<cocos2d::Touch >(vm, 2, arg0);

        ok &= sqval_to_object<cocos2d::Event>(vm, 3, &arg1);
        if (!ok)
            return 0;
        cobj->onTouchesCancelled(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "onTouchesCancelled", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_Layer_onTouchesMoved(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Layer* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Layer_onTouchesMoved'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        std::vector<cocos2d::Touch *> arg0;
        cocos2d::Event* arg1;

        ok &= sqval_to_ccvector_object<cocos2d::Touch >(vm, 2, arg0);

        ok &= sqval_to_object<cocos2d::Event>(vm, 3, &arg1);
        if (!ok)
            return 0;
        cobj->onTouchesMoved(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "onTouchesMoved", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_Layer_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        cocos2d::Layer* ret = cocos2d::Layer::create();
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.Layer");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 0);
    return 0;
}

SQInteger squirrel_cocos2dx_Layer_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.Layer", -1);
    return 1;
}

void squirrel_cocos2dx_Layer_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::Layer", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_Layer(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("Layer"), -1);


    sq_pushstring(vm, _SC("Node"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "onTouchMoved", squirrel_cocos2dx_Layer_onTouchMoved);
    to_squirrel_function(vm, "onTouchesEnded", squirrel_cocos2dx_Layer_onTouchesEnded);
    to_squirrel_function(vm, "onTouchEnded", squirrel_cocos2dx_Layer_onTouchEnded);
    to_squirrel_function(vm, "onTouchesBegan", squirrel_cocos2dx_Layer_onTouchesBegan);
    to_squirrel_function(vm, "onTouchCancelled", squirrel_cocos2dx_Layer_onTouchCancelled);
    to_squirrel_function(vm, "onTouchBegan", squirrel_cocos2dx_Layer_onTouchBegan);
    to_squirrel_function(vm, "onTouchesCancelled", squirrel_cocos2dx_Layer_onTouchesCancelled);
    to_squirrel_function(vm, "onTouchesMoved", squirrel_cocos2dx_Layer_onTouchesMoved);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_Layer_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_Layer_typeof_meta);



    squirrel_cocos2dx_Layer_push_c_class(vm);

    std::string typeName = typeid(cocos2d::Layer).name();
    g_sqType[typeName] = "cc.Layer";

    return 1;
}
SQInteger squirrel_cocos2dx_EaseElastic_setPeriod(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::EaseElastic* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_EaseElastic_setPeriod'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setPeriod(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setPeriod", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_EaseElastic_getPeriod(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::EaseElastic* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_EaseElastic_getPeriod'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getPeriod();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getPeriod", (int)argc, 0);
    return 0;
}

SQInteger squirrel_cocos2dx_EaseElastic_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.EaseElastic", -1);
    return 1;
}

void squirrel_cocos2dx_EaseElastic_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::EaseElastic", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionEase", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_EaseElastic(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("EaseElastic"), -1);


    sq_pushstring(vm, _SC("ActionEase"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "setPeriod", squirrel_cocos2dx_EaseElastic_setPeriod);
    to_squirrel_function(vm, "getPeriod", squirrel_cocos2dx_EaseElastic_getPeriod);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_EaseElastic_typeof_meta);



    squirrel_cocos2dx_EaseElastic_push_c_class(vm);

    std::string typeName = typeid(cocos2d::EaseElastic).name();
    g_sqType[typeName] = "cc.EaseElastic";

    return 1;
}
SQInteger squirrel_cocos2dx_TMXTiledMap_setObjectGroups(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::experimental::TMXTiledMap* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXTiledMap_setObjectGroups'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vector<cocos2d::TMXObjectGroup *> arg0;

        ok &= sqval_to_ccvector(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setObjectGroups(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setObjectGroups", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXTiledMap_getProperty(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::experimental::TMXTiledMap* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXTiledMap_getProperty'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        cocos2d::Value ret = cobj->getProperty(arg0);
        ccvalue_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getProperty", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXTiledMap_setMapSize(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::experimental::TMXTiledMap* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXTiledMap_setMapSize'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Size arg0;

        cocos2d::Size* ptr2 = nullptr; ok &= sqval_to_size(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->setMapSize(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setMapSize", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXTiledMap_getObjectGroup(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::experimental::TMXTiledMap* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXTiledMap_getObjectGroup'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        cocos2d::TMXObjectGroup* ret = cobj->getObjectGroup(arg0);
        object_to_sqval<cocos2d::TMXObjectGroup>(vm, "cc.TMXObjectGroup", (cocos2d::TMXObjectGroup*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getObjectGroup", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXTiledMap_getObjectGroups(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::experimental::TMXTiledMap* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXTiledMap_getObjectGroups'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 0) {

            cocos2d::Vector<cocos2d::TMXObjectGroup *>& ret = cobj->getObjectGroups();
            ccvector_to_sqval(vm, ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 0) {

            const cocos2d::Vector<cocos2d::TMXObjectGroup *>& ret = cobj->getObjectGroups();
            ccvector_to_sqval(vm, ret);
            return 1;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getObjectGroups", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXTiledMap_getTileSize(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::experimental::TMXTiledMap* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXTiledMap_getTileSize'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::Size& ret = cobj->getTileSize();
        size_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getTileSize", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXTiledMap_getMapSize(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::experimental::TMXTiledMap* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXTiledMap_getMapSize'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::Size& ret = cobj->getMapSize();
        size_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getMapSize", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXTiledMap_getProperties(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::experimental::TMXTiledMap* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXTiledMap_getProperties'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::ValueMap& ret = cobj->getProperties();
        ccvaluemap_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getProperties", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXTiledMap_setTileSize(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::experimental::TMXTiledMap* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXTiledMap_setTileSize'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Size arg0;

        cocos2d::Size* ptr2 = nullptr; ok &= sqval_to_size(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->setTileSize(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setTileSize", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXTiledMap_setProperties(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::experimental::TMXTiledMap* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXTiledMap_setProperties'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::ValueMap arg0;

        ok &= sqval_to_ccvaluemap(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setProperties(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setProperties", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXTiledMap_getLayer(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::experimental::TMXTiledMap* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXTiledMap_getLayer'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        cocos2d::experimental::TMXLayer* ret = cobj->getLayer(arg0);
        object_to_sqval<cocos2d::experimental::TMXLayer>(vm, "ccexp.TMXLayer", (cocos2d::experimental::TMXLayer*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getLayer", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXTiledMap_getMapOrientation(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::experimental::TMXTiledMap* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXTiledMap_getMapOrientation'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        int ret = cobj->getMapOrientation();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getMapOrientation", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXTiledMap_setMapOrientation(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::experimental::TMXTiledMap* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXTiledMap_setMapOrientation'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        int arg0;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if (!ok)
            return 0;
        cobj->setMapOrientation(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setMapOrientation", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXTiledMap_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        std::string arg0;
        ok &= sqval_to_std_string(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::experimental::TMXTiledMap* ret = cocos2d::experimental::TMXTiledMap::create(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "ccexp.TMXTiledMap");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXTiledMap_createWithXML_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        std::string arg0;
        std::string arg1;
        ok &= sqval_to_std_string(vm, 2, &arg0);
        ok &= sqval_to_std_string(vm, 3, &arg1);
        if(!ok)
            return 0;
        cocos2d::experimental::TMXTiledMap* ret = cocos2d::experimental::TMXTiledMap::createWithXML(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "ccexp.TMXTiledMap");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "createWithXML", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_TMXTiledMap_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "ccexp.TMXTiledMap", -1);
    return 1;
}

void squirrel_cocos2dx_TMXTiledMap_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::experimental::TMXTiledMap", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_TMXTiledMap(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("TMXTiledMap"), -1);


    sq_pushstring(vm, _SC("Node"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "setObjectGroups", squirrel_cocos2dx_TMXTiledMap_setObjectGroups);
    to_squirrel_function(vm, "getProperty", squirrel_cocos2dx_TMXTiledMap_getProperty);
    to_squirrel_function(vm, "setMapSize", squirrel_cocos2dx_TMXTiledMap_setMapSize);
    to_squirrel_function(vm, "getObjectGroup", squirrel_cocos2dx_TMXTiledMap_getObjectGroup);
    to_squirrel_function(vm, "getObjectGroups", squirrel_cocos2dx_TMXTiledMap_getObjectGroups);
    to_squirrel_function(vm, "getTileSize", squirrel_cocos2dx_TMXTiledMap_getTileSize);
    to_squirrel_function(vm, "getMapSize", squirrel_cocos2dx_TMXTiledMap_getMapSize);
    to_squirrel_function(vm, "getProperties", squirrel_cocos2dx_TMXTiledMap_getProperties);
    to_squirrel_function(vm, "setTileSize", squirrel_cocos2dx_TMXTiledMap_setTileSize);
    to_squirrel_function(vm, "setProperties", squirrel_cocos2dx_TMXTiledMap_setProperties);
    to_squirrel_function(vm, "getLayer", squirrel_cocos2dx_TMXTiledMap_getLayer);
    to_squirrel_function(vm, "getMapOrientation", squirrel_cocos2dx_TMXTiledMap_getMapOrientation);
    to_squirrel_function(vm, "setMapOrientation", squirrel_cocos2dx_TMXTiledMap_setMapOrientation);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_TMXTiledMap_create_static, SQTrue);
    to_squirrel_function(vm, "createWithXML", squirrel_cocos2dx_TMXTiledMap_createWithXML_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_TMXTiledMap_typeof_meta);



    squirrel_cocos2dx_TMXTiledMap_push_c_class(vm);

    std::string typeName = typeid(cocos2d::experimental::TMXTiledMap).name();
    g_sqType[typeName] = "ccexp.TMXTiledMap";

    return 1;
}
SQInteger squirrel_cocos2dx_Grid3DAction_getGrid(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Grid3DAction* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Grid3DAction_getGrid'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::GridBase* ret = cobj->getGrid();
        object_to_sqval<cocos2d::GridBase>(vm, "cc.GridBase", (cocos2d::GridBase*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getGrid", (int)argc, 0);
    return 0;
}

SQInteger squirrel_cocos2dx_Grid3DAction_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.Grid3DAction", -1);
    return 1;
}

void squirrel_cocos2dx_Grid3DAction_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::Grid3DAction", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::GridAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_Grid3DAction(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("Grid3DAction"), -1);


    sq_pushstring(vm, _SC("GridAction"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "getGrid", squirrel_cocos2dx_Grid3DAction_getGrid);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_Grid3DAction_typeof_meta);



    squirrel_cocos2dx_Grid3DAction_push_c_class(vm);

    std::string typeName = typeid(cocos2d::Grid3DAction).name();
    g_sqType[typeName] = "cc.Grid3DAction";

    return 1;
}
SQInteger squirrel_cocos2dx_FadeIn_setReverseAction(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::FadeIn* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_FadeIn_setReverseAction'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::FadeTo* arg0;

        ok &= sqval_to_object<cocos2d::FadeTo>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setReverseAction(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setReverseAction", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_FadeIn_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        float arg0;
        ok &= sqval_to_float(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::FadeIn* ret = cocos2d::FadeIn::create(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.FadeIn");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_FadeIn_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.FadeIn", -1);
    return 1;
}

void squirrel_cocos2dx_FadeIn_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::FadeIn", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::FadeTo", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_FadeIn(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("FadeIn"), -1);


    sq_pushstring(vm, _SC("FadeTo"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "setReverseAction", squirrel_cocos2dx_FadeIn_setReverseAction);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_FadeIn_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_FadeIn_typeof_meta);



    squirrel_cocos2dx_FadeIn_push_c_class(vm);

    std::string typeName = typeid(cocos2d::FadeIn).name();
    g_sqType[typeName] = "cc.FadeIn";

    return 1;
}
SQInteger squirrel_cocos2dx_GLProgramState_setUniformTexture(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLProgramState* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLProgramState_setUniformTexture'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);

            if (!ok) { break; }
            unsigned int arg1;
            ok &= sqval_to_uint32(vm, 3, &arg1);

            if (!ok) { break; }
            cobj->setUniformTexture(arg0, arg1);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Texture2D")) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);

            if (!ok) { break; }
            cocos2d::Texture2D* arg1;
            ok &= sqval_to_object<cocos2d::Texture2D>(vm, 3, &arg1);

            if (!ok) { break; }
            cobj->setUniformTexture(arg0, arg1);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Texture2D")) {
                break;
            }

            int arg0;
            ok &= sqval_to_int32(vm, 2, (int *)&arg0);

            if (!ok) { break; }
            cocos2d::Texture2D* arg1;
            ok &= sqval_to_object<cocos2d::Texture2D>(vm, 3, &arg1);

            if (!ok) { break; }
            cobj->setUniformTexture(arg0, arg1);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }

            int arg0;
            ok &= sqval_to_int32(vm, 2, (int *)&arg0);

            if (!ok) { break; }
            unsigned int arg1;
            ok &= sqval_to_uint32(vm, 3, &arg1);

            if (!ok) { break; }
            cobj->setUniformTexture(arg0, arg1);
            return 0;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setUniformTexture", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_GLProgramState_setUniformMat4(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLProgramState* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLProgramState_setUniformMat4'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Mat4")) {
                break;
            }

            int arg0;
            ok &= sqval_to_int32(vm, 2, (int *)&arg0);

            if (!ok) { break; }
            cocos2d::Mat4 arg1;
            cocos2d::Mat4 *ptr3 = nullptr; ok &= sqval_to_mat4(vm, 3, ptr3); arg1 = *ptr3;

            if (!ok) { break; }
            cobj->setUniformMat4(arg0, arg1);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Mat4")) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);

            if (!ok) { break; }
            cocos2d::Mat4 arg1;
            cocos2d::Mat4 *ptr3 = nullptr; ok &= sqval_to_mat4(vm, 3, ptr3); arg1 = *ptr3;

            if (!ok) { break; }
            cobj->setUniformMat4(arg0, arg1);
            return 0;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setUniformMat4", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_GLProgramState_applyUniforms(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLProgramState* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLProgramState_applyUniforms'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->applyUniforms();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "applyUniforms", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_GLProgramState_applyGLProgram(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLProgramState* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLProgramState_applyGLProgram'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Mat4 arg0;

        cocos2d::Mat4 *ptr2 = nullptr; ok &= sqval_to_mat4(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->applyGLProgram(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "applyGLProgram", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_GLProgramState_getUniformCount(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLProgramState* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLProgramState_getUniformCount'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        ssize_t ret = cobj->getUniformCount();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getUniformCount", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_GLProgramState_applyAttributes(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLProgramState* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLProgramState_applyAttributes'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->applyAttributes();
        return 0;
    }
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->applyAttributes(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "applyAttributes", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_GLProgramState_setUniformFloat(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLProgramState* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLProgramState_setUniformFloat'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }

            int arg0;
            ok &= sqval_to_int32(vm, 2, (int *)&arg0);

            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);

            if (!ok) { break; }
            cobj->setUniformFloat(arg0, arg1);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);

            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);

            if (!ok) { break; }
            cobj->setUniformFloat(arg0, arg1);
            return 0;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setUniformFloat", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_GLProgramState_setUniformVec3(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLProgramState* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLProgramState_setUniformVec3'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Vec3")) {
                break;
            }

            int arg0;
            ok &= sqval_to_int32(vm, 2, (int *)&arg0);

            if (!ok) { break; }
            cocos2d::Vec3 arg1;
            cocos2d::Vec3* ptr3 = nullptr; ok &= sqval_to_vec3(vm, 3, ptr3); arg1 = *ptr3;

            if (!ok) { break; }
            cobj->setUniformVec3(arg0, arg1);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Vec3")) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);

            if (!ok) { break; }
            cocos2d::Vec3 arg1;
            cocos2d::Vec3* ptr3 = nullptr; ok &= sqval_to_vec3(vm, 3, ptr3); arg1 = *ptr3;

            if (!ok) { break; }
            cobj->setUniformVec3(arg0, arg1);
            return 0;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setUniformVec3", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_GLProgramState_setUniformInt(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLProgramState* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLProgramState_setUniformInt'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }

            int arg0;
            ok &= sqval_to_int32(vm, 2, (int *)&arg0);

            if (!ok) { break; }
            int arg1;
            ok &= sqval_to_int32(vm, 3, (int *)&arg1);

            if (!ok) { break; }
            cobj->setUniformInt(arg0, arg1);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);

            if (!ok) { break; }
            int arg1;
            ok &= sqval_to_int32(vm, 3, (int *)&arg1);

            if (!ok) { break; }
            cobj->setUniformInt(arg0, arg1);
            return 0;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setUniformInt", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_GLProgramState_getVertexAttribCount(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLProgramState* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLProgramState_getVertexAttribCount'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        ssize_t ret = cobj->getVertexAttribCount();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getVertexAttribCount", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_GLProgramState_setUniformVec4(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLProgramState* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLProgramState_setUniformVec4'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Vec4")) {
                break;
            }

            int arg0;
            ok &= sqval_to_int32(vm, 2, (int *)&arg0);

            if (!ok) { break; }
            cocos2d::Vec4 arg1;
            cocos2d::Vec4* ptr3 = nullptr; ok &= sqval_to_vec4(vm, 3, ptr3); arg1 = *ptr3;

            if (!ok) { break; }
            cobj->setUniformVec4(arg0, arg1);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Vec4")) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);

            if (!ok) { break; }
            cocos2d::Vec4 arg1;
            cocos2d::Vec4* ptr3 = nullptr; ok &= sqval_to_vec4(vm, 3, ptr3); arg1 = *ptr3;

            if (!ok) { break; }
            cobj->setUniformVec4(arg0, arg1);
            return 0;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setUniformVec4", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_GLProgramState_setGLProgram(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLProgramState* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLProgramState_setGLProgram'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::GLProgram* arg0;

        ok &= sqval_to_object<cocos2d::GLProgram>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setGLProgram(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setGLProgram", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_GLProgramState_setUniformVec2(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLProgramState* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLProgramState_setUniformVec2'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Vec2")) {
                break;
            }

            int arg0;
            ok &= sqval_to_int32(vm, 2, (int *)&arg0);

            if (!ok) { break; }
            cocos2d::Vec2 arg1;
            cocos2d::Vec2* ptr3 = nullptr; ok &= sqval_to_vec2(vm, 3, ptr3); arg1 = *ptr3;

            if (!ok) { break; }
            cobj->setUniformVec2(arg0, arg1);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Vec2")) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);

            if (!ok) { break; }
            cocos2d::Vec2 arg1;
            cocos2d::Vec2* ptr3 = nullptr; ok &= sqval_to_vec2(vm, 3, ptr3); arg1 = *ptr3;

            if (!ok) { break; }
            cobj->setUniformVec2(arg0, arg1);
            return 0;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setUniformVec2", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_GLProgramState_getVertexAttribsFlags(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLProgramState* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLProgramState_getVertexAttribsFlags'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        unsigned int ret = cobj->getVertexAttribsFlags();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getVertexAttribsFlags", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_GLProgramState_apply(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLProgramState* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLProgramState_apply'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Mat4 arg0;

        cocos2d::Mat4 *ptr2 = nullptr; ok &= sqval_to_mat4(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->apply(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "apply", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_GLProgramState_getGLProgram(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLProgramState* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLProgramState_getGLProgram'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::GLProgram* ret = cobj->getGLProgram();
        object_to_sqval<cocos2d::GLProgram>(vm, "cc.GLProgram", (cocos2d::GLProgram*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getGLProgram", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_GLProgramState_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        cocos2d::GLProgram* arg0;
        ok &= sqval_to_object<cocos2d::GLProgram>(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::GLProgramState* ret = cocos2d::GLProgramState::create(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.GLProgramState");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_GLProgramState_getOrCreateWithGLProgramName_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        std::string arg0;
        ok &= sqval_to_std_string(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::GLProgramState* ret = cocos2d::GLProgramState::getOrCreateWithGLProgramName(arg0);
        object_to_sqval<cocos2d::GLProgramState>(vm, "cc.GLProgramState", (cocos2d::GLProgramState*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "getOrCreateWithGLProgramName", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_GLProgramState_getOrCreateWithGLProgram_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        cocos2d::GLProgram* arg0;
        ok &= sqval_to_object<cocos2d::GLProgram>(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::GLProgramState* ret = cocos2d::GLProgramState::getOrCreateWithGLProgram(arg0);
        object_to_sqval<cocos2d::GLProgramState>(vm, "cc.GLProgramState", (cocos2d::GLProgramState*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "getOrCreateWithGLProgram", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_GLProgramState_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.GLProgramState", -1);
    return 1;
}

void squirrel_cocos2dx_GLProgramState_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::GLProgramState", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_GLProgramState(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("GLProgramState"), -1);


    sq_pushstring(vm, _SC("Ref"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "setUniformTexture", squirrel_cocos2dx_GLProgramState_setUniformTexture);
    to_squirrel_function(vm, "setUniformMat4", squirrel_cocos2dx_GLProgramState_setUniformMat4);
    to_squirrel_function(vm, "applyUniforms", squirrel_cocos2dx_GLProgramState_applyUniforms);
    to_squirrel_function(vm, "applyGLProgram", squirrel_cocos2dx_GLProgramState_applyGLProgram);
    to_squirrel_function(vm, "getUniformCount", squirrel_cocos2dx_GLProgramState_getUniformCount);
    to_squirrel_function(vm, "applyAttributes", squirrel_cocos2dx_GLProgramState_applyAttributes);
    to_squirrel_function(vm, "setUniformFloat", squirrel_cocos2dx_GLProgramState_setUniformFloat);
    to_squirrel_function(vm, "setUniformVec3", squirrel_cocos2dx_GLProgramState_setUniformVec3);
    to_squirrel_function(vm, "setUniformInt", squirrel_cocos2dx_GLProgramState_setUniformInt);
    to_squirrel_function(vm, "getVertexAttribCount", squirrel_cocos2dx_GLProgramState_getVertexAttribCount);
    to_squirrel_function(vm, "setUniformVec4", squirrel_cocos2dx_GLProgramState_setUniformVec4);
    to_squirrel_function(vm, "setGLProgram", squirrel_cocos2dx_GLProgramState_setGLProgram);
    to_squirrel_function(vm, "setUniformVec2", squirrel_cocos2dx_GLProgramState_setUniformVec2);
    to_squirrel_function(vm, "getVertexAttribsFlags", squirrel_cocos2dx_GLProgramState_getVertexAttribsFlags);
    to_squirrel_function(vm, "apply", squirrel_cocos2dx_GLProgramState_apply);
    to_squirrel_function(vm, "getGLProgram", squirrel_cocos2dx_GLProgramState_getGLProgram);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_GLProgramState_create_static, SQTrue);
    to_squirrel_function(vm, "getOrCreateWithGLProgramName", squirrel_cocos2dx_GLProgramState_getOrCreateWithGLProgramName_static, SQTrue);
    to_squirrel_function(vm, "getOrCreateWithGLProgram", squirrel_cocos2dx_GLProgramState_getOrCreateWithGLProgram_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_GLProgramState_typeof_meta);



    squirrel_cocos2dx_GLProgramState_push_c_class(vm);

    std::string typeName = typeid(cocos2d::GLProgramState).name();
    g_sqType[typeName] = "cc.GLProgramState";

    return 1;
}
SQInteger squirrel_cocos2dx_EventListenerCustom_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        std::string arg0;
        std::function<void (cocos2d::EventCustom *)> arg1;
        HSQOBJECT callback3;
        sq_getstackobj(vm, 3, &callback3);
        ok &= sqval_to_std_string(vm, 2, &arg0);
        do {
			    // Lambda binding for squirrel
			    arg1 = [vm, callback3](cocos2d::EventCustom* larg0) -> void {
			        if (sq_getrefcount(vm, (HSQOBJECT *)&callback3) > 0) {
			            sq_pushobject(vm, callback3);
			            sq_push(vm, 1);
			            object_to_sqval<cocos2d::EventCustom>(vm, "cc.EventCustom", (cocos2d::EventCustom*)larg0);
			            sq_call(vm, 2, SQFalse, SQTrue);
			            sq_poptop(vm);
			        }
			    };
			} while(0);
        if(!ok)
            return 0;
        cocos2d::EventListenerCustom* ret = cocos2d::EventListenerCustom::create(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.EventListenerCustom");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        _SquirrelObject *sqobj = (_SquirrelObject *)ret->_scriptObject;
        sqobj->addClosure("callback3", callback3);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_EventListenerCustom_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.EventListenerCustom", -1);
    return 1;
}

void squirrel_cocos2dx_EventListenerCustom_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::EventListenerCustom", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::EventListener", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_EventListenerCustom(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("EventListenerCustom"), -1);


    sq_pushstring(vm, _SC("EventListener"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_EventListenerCustom_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_EventListenerCustom_typeof_meta);



    squirrel_cocos2dx_EventListenerCustom_push_c_class(vm);

    std::string typeName = typeid(cocos2d::EventListenerCustom).name();
    g_sqType[typeName] = "cc.EventListenerCustom";

    return 1;
}
SQInteger squirrel_cocos2dx_FlipY3D_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        float arg0;
        ok &= sqval_to_float(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::FlipY3D* ret = cocos2d::FlipY3D::create(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.FlipY3D");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_FlipY3D_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.FlipY3D", -1);
    return 1;
}

void squirrel_cocos2dx_FlipY3D_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::FlipY3D", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::FlipX3D", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Grid3DAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::GridAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_FlipY3D(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("FlipY3D"), -1);


    sq_pushstring(vm, _SC("FlipX3D"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_FlipY3D_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_FlipY3D_typeof_meta);



    squirrel_cocos2dx_FlipY3D_push_c_class(vm);

    std::string typeName = typeid(cocos2d::FlipY3D).name();
    g_sqType[typeName] = "cc.FlipY3D";

    return 1;
}
SQInteger squirrel_cocos2dx_EaseSineInOut_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        cocos2d::ActionInterval* arg0;
        ok &= sqval_to_object<cocos2d::ActionInterval>(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::EaseSineInOut* ret = cocos2d::EaseSineInOut::create(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.EaseSineInOut");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_EaseSineInOut_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.EaseSineInOut", -1);
    return 1;
}

void squirrel_cocos2dx_EaseSineInOut_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::EaseSineInOut", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionEase", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_EaseSineInOut(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("EaseSineInOut"), -1);


    sq_pushstring(vm, _SC("ActionEase"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_EaseSineInOut_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_EaseSineInOut_typeof_meta);



    squirrel_cocos2dx_EaseSineInOut_push_c_class(vm);

    std::string typeName = typeid(cocos2d::EaseSineInOut).name();
    g_sqType[typeName] = "cc.EaseSineInOut";

    return 1;
}
SQInteger squirrel_cocos2dx_TransitionFlipAngular_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 2)
        {

            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Scene")) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::Scene* arg1;
            ok &= sqval_to_object<cocos2d::Scene>(vm, 3, &arg1);
            if (!ok) { break; }
            cocos2d::TransitionFlipAngular* ret = cocos2d::TransitionFlipAngular::create(arg0, arg1);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.TransitionFlipAngular");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 3)
        {

            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Scene")) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INSTANCE || ! instanceof_cclass(vm, 4, "cocos2d::TransitionScene::Orientation")) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::Scene* arg1;
            ok &= sqval_to_object<cocos2d::Scene>(vm, 3, &arg1);
            if (!ok) { break; }
            cocos2d::TransitionScene::Orientation arg2;
            ok &= sqval_to_int32(vm, 4, (int *)&arg2);
            if (!ok) { break; }
            cocos2d::TransitionFlipAngular* ret = cocos2d::TransitionFlipAngular::create(arg0, arg1, arg2);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.TransitionFlipAngular");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d", "create", (int)argc, 3);
    return 0;
}

SQInteger squirrel_cocos2dx_TransitionFlipAngular_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.TransitionFlipAngular", -1);
    return 1;
}

void squirrel_cocos2dx_TransitionFlipAngular_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::TransitionFlipAngular", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::TransitionSceneOriented", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TransitionScene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Scene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_TransitionFlipAngular(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("TransitionFlipAngular"), -1);


    sq_pushstring(vm, _SC("TransitionSceneOriented"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_TransitionFlipAngular_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_TransitionFlipAngular_typeof_meta);



    squirrel_cocos2dx_TransitionFlipAngular_push_c_class(vm);

    std::string typeName = typeid(cocos2d::TransitionFlipAngular).name();
    g_sqType[typeName] = "cc.TransitionFlipAngular";

    return 1;
}
SQInteger squirrel_cocos2dx_EaseElasticInOut_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 1)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::ActionInterval")) {
                break;
            }

            cocos2d::ActionInterval* arg0;
            ok &= sqval_to_object<cocos2d::ActionInterval>(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::EaseElasticInOut* ret = cocos2d::EaseElasticInOut::create(arg0);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.EaseElasticInOut");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 2)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::ActionInterval")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }

            cocos2d::ActionInterval* arg0;
            ok &= sqval_to_object<cocos2d::ActionInterval>(vm, 2, &arg0);
            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);
            if (!ok) { break; }
            cocos2d::EaseElasticInOut* ret = cocos2d::EaseElasticInOut::create(arg0, arg1);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.EaseElasticInOut");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d", "create", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_EaseElasticInOut_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.EaseElasticInOut", -1);
    return 1;
}

void squirrel_cocos2dx_EaseElasticInOut_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::EaseElasticInOut", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::EaseElastic", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionEase", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_EaseElasticInOut(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("EaseElasticInOut"), -1);


    sq_pushstring(vm, _SC("EaseElastic"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_EaseElasticInOut_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_EaseElasticInOut_typeof_meta);



    squirrel_cocos2dx_EaseElasticInOut_push_c_class(vm);

    std::string typeName = typeid(cocos2d::EaseElasticInOut).name();
    g_sqType[typeName] = "cc.EaseElasticInOut";

    return 1;
}

SQInteger squirrel_cocos2dx_EaseBounce_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.EaseBounce", -1);
    return 1;
}

void squirrel_cocos2dx_EaseBounce_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::EaseBounce", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionEase", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_EaseBounce(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("EaseBounce"), -1);


    sq_pushstring(vm, _SC("ActionEase"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }


    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_EaseBounce_typeof_meta);



    squirrel_cocos2dx_EaseBounce_push_c_class(vm);

    std::string typeName = typeid(cocos2d::EaseBounce).name();
    g_sqType[typeName] = "cc.EaseBounce";

    return 1;
}
SQInteger squirrel_cocos2dx_Show_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        cocos2d::Show* ret = cocos2d::Show::create();
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.Show");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 0);
    return 0;
}

SQInteger squirrel_cocos2dx_Show_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.Show", -1);
    return 1;
}

void squirrel_cocos2dx_Show_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::Show", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionInstant", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_Show(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("Show"), -1);


    sq_pushstring(vm, _SC("ActionInstant"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_Show_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_Show_typeof_meta);



    squirrel_cocos2dx_Show_push_c_class(vm);

    std::string typeName = typeid(cocos2d::Show).name();
    g_sqType[typeName] = "cc.Show";

    return 1;
}
SQInteger squirrel_cocos2dx_FadeOut_setReverseAction(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::FadeOut* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_FadeOut_setReverseAction'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::FadeTo* arg0;

        ok &= sqval_to_object<cocos2d::FadeTo>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setReverseAction(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setReverseAction", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_FadeOut_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        float arg0;
        ok &= sqval_to_float(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::FadeOut* ret = cocos2d::FadeOut::create(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.FadeOut");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_FadeOut_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.FadeOut", -1);
    return 1;
}

void squirrel_cocos2dx_FadeOut_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::FadeOut", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::FadeTo", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_FadeOut(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("FadeOut"), -1);


    sq_pushstring(vm, _SC("FadeTo"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "setReverseAction", squirrel_cocos2dx_FadeOut_setReverseAction);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_FadeOut_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_FadeOut_typeof_meta);



    squirrel_cocos2dx_FadeOut_push_c_class(vm);

    std::string typeName = typeid(cocos2d::FadeOut).name();
    g_sqType[typeName] = "cc.FadeOut";

    return 1;
}
SQInteger squirrel_cocos2dx_CallFunc_execute(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::CallFunc* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_CallFunc_execute'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->execute();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "execute", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_CallFunc_getTargetCallback(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::CallFunc* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_CallFunc_getTargetCallback'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Ref* ret = cobj->getTargetCallback();
        object_to_sqval<cocos2d::Ref>(vm, "cc.Ref", (cocos2d::Ref*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getTargetCallback", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_CallFunc_setTargetCallback(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::CallFunc* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_CallFunc_setTargetCallback'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Ref* arg0;

        ok &= sqval_to_object<cocos2d::Ref>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setTargetCallback(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setTargetCallback", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_CallFunc_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.CallFunc", -1);
    return 1;
}

void squirrel_cocos2dx_CallFunc_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::CallFunc", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionInstant", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_CallFunc(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("CallFunc"), -1);


    sq_pushstring(vm, _SC("ActionInstant"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "execute", squirrel_cocos2dx_CallFunc_execute);
    to_squirrel_function(vm, "getTargetCallback", squirrel_cocos2dx_CallFunc_getTargetCallback);
    to_squirrel_function(vm, "setTargetCallback", squirrel_cocos2dx_CallFunc_setTargetCallback);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_CallFunc_typeof_meta);



    squirrel_cocos2dx_CallFunc_push_c_class(vm);

    std::string typeName = typeid(cocos2d::CallFunc).name();
    g_sqType[typeName] = "cc.CallFunc";

    return 1;
}
SQInteger squirrel_cocos2dx_EventMouse_getPreviousLocationInView(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::EventMouse* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_EventMouse_getPreviousLocationInView'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Vec2 ret = cobj->getPreviousLocationInView();
        vec2_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getPreviousLocationInView", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_EventMouse_getLocation(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::EventMouse* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_EventMouse_getLocation'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Vec2 ret = cobj->getLocation();
        vec2_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getLocation", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_EventMouse_getMouseButton(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::EventMouse* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_EventMouse_getMouseButton'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        int ret = cobj->getMouseButton();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getMouseButton", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_EventMouse_getPreviousLocation(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::EventMouse* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_EventMouse_getPreviousLocation'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Vec2 ret = cobj->getPreviousLocation();
        vec2_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getPreviousLocation", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_EventMouse_getDelta(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::EventMouse* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_EventMouse_getDelta'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Vec2 ret = cobj->getDelta();
        vec2_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getDelta", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_EventMouse_setScrollData(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::EventMouse* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_EventMouse_setScrollData'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        float arg0;
        float arg1;

        ok &= sqval_to_float(vm, 2, &arg0);

        ok &= sqval_to_float(vm, 3, &arg1);
        if (!ok)
            return 0;
        cobj->setScrollData(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setScrollData", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_EventMouse_getStartLocationInView(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::EventMouse* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_EventMouse_getStartLocationInView'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Vec2 ret = cobj->getStartLocationInView();
        vec2_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getStartLocationInView", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_EventMouse_getStartLocation(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::EventMouse* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_EventMouse_getStartLocation'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Vec2 ret = cobj->getStartLocation();
        vec2_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getStartLocation", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_EventMouse_setMouseButton(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::EventMouse* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_EventMouse_setMouseButton'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        int arg0;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if (!ok)
            return 0;
        cobj->setMouseButton(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setMouseButton", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_EventMouse_getLocationInView(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::EventMouse* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_EventMouse_getLocationInView'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Vec2 ret = cobj->getLocationInView();
        vec2_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getLocationInView", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_EventMouse_getScrollY(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::EventMouse* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_EventMouse_getScrollY'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getScrollY();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getScrollY", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_EventMouse_getScrollX(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::EventMouse* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_EventMouse_getScrollX'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getScrollX();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getScrollX", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_EventMouse_getCursorX(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::EventMouse* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_EventMouse_getCursorX'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getCursorX();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getCursorX", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_EventMouse_getCursorY(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::EventMouse* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_EventMouse_getCursorY'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getCursorY();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getCursorY", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_EventMouse_setCursorPosition(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::EventMouse* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_EventMouse_setCursorPosition'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        float arg0;
        float arg1;

        ok &= sqval_to_float(vm, 2, &arg0);

        ok &= sqval_to_float(vm, 3, &arg1);
        if (!ok)
            return 0;
        cobj->setCursorPosition(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setCursorPosition", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_EventMouse_constructor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::EventMouse* cobj = nullptr;
    bool ok  = true;

    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::EventMouse::MouseEventType arg0;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if (!ok)
            return 0;
        cobj = new cocos2d::EventMouse(arg0);
        sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
        cobj->retain();
        sq_setreleasehook(vm, 1, squirrel_releasehook_Ref);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "EventMouse", (int)argc, 1);
    return 0;
}


SQInteger squirrel_cocos2dx_EventMouse_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.EventMouse", -1);
    return 1;
}

void squirrel_cocos2dx_EventMouse_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::EventMouse", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Event", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_EventMouse(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("EventMouse"), -1);


    sq_pushstring(vm, _SC("Event"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "constructor", squirrel_cocos2dx_EventMouse_constructor);
    to_squirrel_function(vm, "getPreviousLocationInView", squirrel_cocos2dx_EventMouse_getPreviousLocationInView);
    to_squirrel_function(vm, "getLocation", squirrel_cocos2dx_EventMouse_getLocation);
    to_squirrel_function(vm, "getMouseButton", squirrel_cocos2dx_EventMouse_getMouseButton);
    to_squirrel_function(vm, "getPreviousLocation", squirrel_cocos2dx_EventMouse_getPreviousLocation);
    to_squirrel_function(vm, "getDelta", squirrel_cocos2dx_EventMouse_getDelta);
    to_squirrel_function(vm, "setScrollData", squirrel_cocos2dx_EventMouse_setScrollData);
    to_squirrel_function(vm, "getStartLocationInView", squirrel_cocos2dx_EventMouse_getStartLocationInView);
    to_squirrel_function(vm, "getStartLocation", squirrel_cocos2dx_EventMouse_getStartLocation);
    to_squirrel_function(vm, "setMouseButton", squirrel_cocos2dx_EventMouse_setMouseButton);
    to_squirrel_function(vm, "getLocationInView", squirrel_cocos2dx_EventMouse_getLocationInView);
    to_squirrel_function(vm, "getScrollY", squirrel_cocos2dx_EventMouse_getScrollY);
    to_squirrel_function(vm, "getScrollX", squirrel_cocos2dx_EventMouse_getScrollX);
    to_squirrel_function(vm, "getCursorX", squirrel_cocos2dx_EventMouse_getCursorX);
    to_squirrel_function(vm, "getCursorY", squirrel_cocos2dx_EventMouse_getCursorY);
    to_squirrel_function(vm, "setCursorPosition", squirrel_cocos2dx_EventMouse_setCursorPosition);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_EventMouse_typeof_meta);


    sq_pushstring(vm, _SC("MouseEventType"), -1);
    sq_newtable(vm);
    to_squirrel_variable_integer(vm, "MOUSE_NONE", (SQInteger)cocos2d::EventMouse::MouseEventType::MOUSE_NONE, SQTrue);
    to_squirrel_variable_integer(vm, "MOUSE_DOWN", (SQInteger)cocos2d::EventMouse::MouseEventType::MOUSE_DOWN, SQTrue);
    to_squirrel_variable_integer(vm, "MOUSE_UP", (SQInteger)cocos2d::EventMouse::MouseEventType::MOUSE_UP, SQTrue);
    to_squirrel_variable_integer(vm, "MOUSE_MOVE", (SQInteger)cocos2d::EventMouse::MouseEventType::MOUSE_MOVE, SQTrue);
    to_squirrel_variable_integer(vm, "MOUSE_SCROLL", (SQInteger)cocos2d::EventMouse::MouseEventType::MOUSE_SCROLL, SQTrue);
    sq_newslot(vm, -3, SQTrue);

    squirrel_cocos2dx_EventMouse_push_c_class(vm);

    std::string typeName = typeid(cocos2d::EventMouse).name();
    g_sqType[typeName] = "cc.EventMouse";

    return 1;
}
SQInteger squirrel_cocos2dx_GLView_setFrameSize(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLView* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLView_setFrameSize'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        float arg0;
        float arg1;

        ok &= sqval_to_float(vm, 2, &arg0);

        ok &= sqval_to_float(vm, 3, &arg1);
        if (!ok)
            return 0;
        cobj->setFrameSize(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setFrameSize", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_GLView_getViewPortRect(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLView* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLView_getViewPortRect'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::Rect& ret = cobj->getViewPortRect();
        rect_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getViewPortRect", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_GLView_setContentScaleFactor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLView* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLView_setContentScaleFactor'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        bool ret = cobj->setContentScaleFactor(arg0);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setContentScaleFactor", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_GLView_getContentScaleFactor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLView* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLView_getContentScaleFactor'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getContentScaleFactor();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getContentScaleFactor", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_GLView_setIMEKeyboardState(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLView* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLView_setIMEKeyboardState'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setIMEKeyboardState(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setIMEKeyboardState", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_GLView_setScissorInPoints(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLView* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLView_setScissorInPoints'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 4) 
    {
        float arg0;
        float arg1;
        float arg2;
        float arg3;

        ok &= sqval_to_float(vm, 2, &arg0);

        ok &= sqval_to_float(vm, 3, &arg1);

        ok &= sqval_to_float(vm, 4, &arg2);

        ok &= sqval_to_float(vm, 5, &arg3);
        if (!ok)
            return 0;
        cobj->setScissorInPoints(arg0, arg1, arg2, arg3);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setScissorInPoints", (int)argc, 4);
    return 0;
}
SQInteger squirrel_cocos2dx_GLView_getViewName(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLView* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLView_getViewName'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const std::string& ret = cobj->getViewName();
        sq_pushstring(vm, (const SQChar *)ret.c_str(), -1);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getViewName", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_GLView_isOpenGLReady(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLView* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLView_isOpenGLReady'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isOpenGLReady();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isOpenGLReady", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_GLView_getScaleY(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLView* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLView_getScaleY'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getScaleY();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getScaleY", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_GLView_getScaleX(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLView* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLView_getScaleX'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getScaleX();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getScaleX", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_GLView_getVisibleOrigin(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLView* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLView_getVisibleOrigin'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Vec2 ret = cobj->getVisibleOrigin();
        vec2_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getVisibleOrigin", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_GLView_getFrameSize(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLView* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLView_getFrameSize'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::Size& ret = cobj->getFrameSize();
        size_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getFrameSize", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_GLView_setFrameZoomFactor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLView* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLView_setFrameZoomFactor'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setFrameZoomFactor(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setFrameZoomFactor", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_GLView_getFrameZoomFactor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLView* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLView_getFrameZoomFactor'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getFrameZoomFactor();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getFrameZoomFactor", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_GLView_getDesignResolutionSize(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLView* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLView_getDesignResolutionSize'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::Size& ret = cobj->getDesignResolutionSize();
        size_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getDesignResolutionSize", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_GLView_windowShouldClose(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLView* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLView_windowShouldClose'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->windowShouldClose();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "windowShouldClose", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_GLView_getAllTouches(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLView* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLView_getAllTouches'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        std::vector<cocos2d::Touch *> ret = cobj->getAllTouches();
        ccvector_object_to_sqval<cocos2d::Touch >(vm, "td::vector<cc.Touch", ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getAllTouches", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_GLView_setDesignResolutionSize(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLView* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLView_setDesignResolutionSize'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 3) 
    {
        float arg0;
        float arg1;
        ResolutionPolicy arg2;

        ok &= sqval_to_float(vm, 2, &arg0);

        ok &= sqval_to_float(vm, 3, &arg1);

        ok &= sqval_to_int32(vm, 4, (int *)&arg2);
        if (!ok)
            return 0;
        cobj->setDesignResolutionSize(arg0, arg1, arg2);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setDesignResolutionSize", (int)argc, 3);
    return 0;
}
SQInteger squirrel_cocos2dx_GLView_getResolutionPolicy(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLView* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLView_getResolutionPolicy'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        int ret = (int)cobj->getResolutionPolicy();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getResolutionPolicy", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_GLView_isRetinaDisplay(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLView* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLView_isRetinaDisplay'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isRetinaDisplay();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isRetinaDisplay", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_GLView_setViewPortInPoints(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLView* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLView_setViewPortInPoints'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 4) 
    {
        float arg0;
        float arg1;
        float arg2;
        float arg3;

        ok &= sqval_to_float(vm, 2, &arg0);

        ok &= sqval_to_float(vm, 3, &arg1);

        ok &= sqval_to_float(vm, 4, &arg2);

        ok &= sqval_to_float(vm, 5, &arg3);
        if (!ok)
            return 0;
        cobj->setViewPortInPoints(arg0, arg1, arg2, arg3);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setViewPortInPoints", (int)argc, 4);
    return 0;
}
SQInteger squirrel_cocos2dx_GLView_getScissorRect(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLView* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLView_getScissorRect'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Rect ret = cobj->getScissorRect();
        rect_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getScissorRect", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_GLView_getRetinaFactor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLView* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLView_getRetinaFactor'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        int ret = cobj->getRetinaFactor();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getRetinaFactor", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_GLView_setViewName(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLView* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLView_setViewName'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setViewName(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setViewName", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_GLView_getVisibleRect(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLView* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLView_getVisibleRect'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Rect ret = cobj->getVisibleRect();
        rect_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getVisibleRect", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_GLView_getVisibleSize(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLView* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLView_getVisibleSize'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Size ret = cobj->getVisibleSize();
        size_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getVisibleSize", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_GLView_isScissorEnabled(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLView* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLView_isScissorEnabled'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isScissorEnabled();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isScissorEnabled", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_GLView_pollEvents(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLView* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLView_pollEvents'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->pollEvents();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "pollEvents", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_GLView_setGLContextAttrs_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        GLContextAttrs arg0;
        GLContextAttrs *ptr2 = nullptr; ok &= sqval_to_glcontextattrs(vm, 2, ptr2); arg0 = *ptr2;
        if(!ok)
            return 0;
        cocos2d::GLView::setGLContextAttrs(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "setGLContextAttrs", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_GLView_getGLContextAttrs_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        GLContextAttrs ret = cocos2d::GLView::getGLContextAttrs();
        glcontextattrs_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "getGLContextAttrs", (int)argc, 0);
    return 0;
}

SQInteger squirrel_cocos2dx_GLView_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.GLView", -1);
    return 1;
}

void squirrel_cocos2dx_GLView_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::GLView", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_GLView(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("GLView"), -1);


    sq_pushstring(vm, _SC("Ref"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "setFrameSize", squirrel_cocos2dx_GLView_setFrameSize);
    to_squirrel_function(vm, "getViewPortRect", squirrel_cocos2dx_GLView_getViewPortRect);
    to_squirrel_function(vm, "setContentScaleFactor", squirrel_cocos2dx_GLView_setContentScaleFactor);
    to_squirrel_function(vm, "getContentScaleFactor", squirrel_cocos2dx_GLView_getContentScaleFactor);
    to_squirrel_function(vm, "setIMEKeyboardState", squirrel_cocos2dx_GLView_setIMEKeyboardState);
    to_squirrel_function(vm, "setScissorInPoints", squirrel_cocos2dx_GLView_setScissorInPoints);
    to_squirrel_function(vm, "getViewName", squirrel_cocos2dx_GLView_getViewName);
    to_squirrel_function(vm, "isOpenGLReady", squirrel_cocos2dx_GLView_isOpenGLReady);
    to_squirrel_function(vm, "getScaleY", squirrel_cocos2dx_GLView_getScaleY);
    to_squirrel_function(vm, "getScaleX", squirrel_cocos2dx_GLView_getScaleX);
    to_squirrel_function(vm, "getVisibleOrigin", squirrel_cocos2dx_GLView_getVisibleOrigin);
    to_squirrel_function(vm, "getFrameSize", squirrel_cocos2dx_GLView_getFrameSize);
    to_squirrel_function(vm, "setFrameZoomFactor", squirrel_cocos2dx_GLView_setFrameZoomFactor);
    to_squirrel_function(vm, "getFrameZoomFactor", squirrel_cocos2dx_GLView_getFrameZoomFactor);
    to_squirrel_function(vm, "getDesignResolutionSize", squirrel_cocos2dx_GLView_getDesignResolutionSize);
    to_squirrel_function(vm, "windowShouldClose", squirrel_cocos2dx_GLView_windowShouldClose);
    to_squirrel_function(vm, "getAllTouches", squirrel_cocos2dx_GLView_getAllTouches);
    to_squirrel_function(vm, "setDesignResolutionSize", squirrel_cocos2dx_GLView_setDesignResolutionSize);
    to_squirrel_function(vm, "getResolutionPolicy", squirrel_cocos2dx_GLView_getResolutionPolicy);
    to_squirrel_function(vm, "isRetinaDisplay", squirrel_cocos2dx_GLView_isRetinaDisplay);
    to_squirrel_function(vm, "setViewPortInPoints", squirrel_cocos2dx_GLView_setViewPortInPoints);
    to_squirrel_function(vm, "getScissorRect", squirrel_cocos2dx_GLView_getScissorRect);
    to_squirrel_function(vm, "getRetinaFactor", squirrel_cocos2dx_GLView_getRetinaFactor);
    to_squirrel_function(vm, "setViewName", squirrel_cocos2dx_GLView_setViewName);
    to_squirrel_function(vm, "getVisibleRect", squirrel_cocos2dx_GLView_getVisibleRect);
    to_squirrel_function(vm, "getVisibleSize", squirrel_cocos2dx_GLView_getVisibleSize);
    to_squirrel_function(vm, "isScissorEnabled", squirrel_cocos2dx_GLView_isScissorEnabled);
    to_squirrel_function(vm, "pollEvents", squirrel_cocos2dx_GLView_pollEvents);
    to_squirrel_function(vm, "setGLContextAttrs", squirrel_cocos2dx_GLView_setGLContextAttrs_static, SQTrue);
    to_squirrel_function(vm, "getGLContextAttrs", squirrel_cocos2dx_GLView_getGLContextAttrs_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_GLView_typeof_meta);



    squirrel_cocos2dx_GLView_push_c_class(vm);

    std::string typeName = typeid(cocos2d::GLView).name();
    g_sqType[typeName] = "cc.GLView";

    return 1;
}
SQInteger squirrel_cocos2dx_FlipX3D_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        float arg0;
        ok &= sqval_to_float(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::FlipX3D* ret = cocos2d::FlipX3D::create(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.FlipX3D");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_FlipX3D_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.FlipX3D", -1);
    return 1;
}

void squirrel_cocos2dx_FlipX3D_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::FlipX3D", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Grid3DAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::GridAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_FlipX3D(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("FlipX3D"), -1);


    sq_pushstring(vm, _SC("Grid3DAction"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_FlipX3D_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_FlipX3D_typeof_meta);



    squirrel_cocos2dx_FlipX3D_push_c_class(vm);

    std::string typeName = typeid(cocos2d::FlipX3D).name();
    g_sqType[typeName] = "cc.FlipX3D";

    return 1;
}
SQInteger squirrel_cocos2dx_EaseBezierAction_setBezierParamer(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::EaseBezierAction* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_EaseBezierAction_setBezierParamer'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 4) 
    {
        float arg0;
        float arg1;
        float arg2;
        float arg3;

        ok &= sqval_to_float(vm, 2, &arg0);

        ok &= sqval_to_float(vm, 3, &arg1);

        ok &= sqval_to_float(vm, 4, &arg2);

        ok &= sqval_to_float(vm, 5, &arg3);
        if (!ok)
            return 0;
        cobj->setBezierParamer(arg0, arg1, arg2, arg3);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setBezierParamer", (int)argc, 4);
    return 0;
}
SQInteger squirrel_cocos2dx_EaseBezierAction_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        cocos2d::ActionInterval* arg0;
        ok &= sqval_to_object<cocos2d::ActionInterval>(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::EaseBezierAction* ret = cocos2d::EaseBezierAction::create(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.EaseBezierAction");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_EaseBezierAction_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.EaseBezierAction", -1);
    return 1;
}

void squirrel_cocos2dx_EaseBezierAction_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::EaseBezierAction", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionEase", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_EaseBezierAction(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("EaseBezierAction"), -1);


    sq_pushstring(vm, _SC("ActionEase"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "setBezierParamer", squirrel_cocos2dx_EaseBezierAction_setBezierParamer);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_EaseBezierAction_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_EaseBezierAction_typeof_meta);



    squirrel_cocos2dx_EaseBezierAction_push_c_class(vm);

    std::string typeName = typeid(cocos2d::EaseBezierAction).name();
    g_sqType[typeName] = "cc.EaseBezierAction";

    return 1;
}
SQInteger squirrel_cocos2dx_ParticleFireworks_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        cocos2d::ParticleFireworks* ret = cocos2d::ParticleFireworks::create();
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.ParticleFireworks");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleFireworks_createWithTotalParticles_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if(!ok)
            return 0;
        cocos2d::ParticleFireworks* ret = cocos2d::ParticleFireworks::createWithTotalParticles(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.ParticleFireworks");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "createWithTotalParticles", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_ParticleFireworks_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.ParticleFireworks", -1);
    return 1;
}

void squirrel_cocos2dx_ParticleFireworks_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::ParticleFireworks", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ParticleSystemQuad", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ParticleSystem", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TextureProtocol", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::BlendProtocol", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_ParticleFireworks(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("ParticleFireworks"), -1);


    sq_pushstring(vm, _SC("ParticleSystemQuad"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_ParticleFireworks_create_static, SQTrue);
    to_squirrel_function(vm, "createWithTotalParticles", squirrel_cocos2dx_ParticleFireworks_createWithTotalParticles_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_ParticleFireworks_typeof_meta);



    squirrel_cocos2dx_ParticleFireworks_push_c_class(vm);

    std::string typeName = typeid(cocos2d::ParticleFireworks).name();
    g_sqType[typeName] = "cc.ParticleFireworks";

    return 1;
}
SQInteger squirrel_cocos2dx_MenuItemImage_setDisabledSpriteFrame(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::MenuItemImage* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_MenuItemImage_setDisabledSpriteFrame'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::SpriteFrame* arg0;

        ok &= sqval_to_object<cocos2d::SpriteFrame>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setDisabledSpriteFrame(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setDisabledSpriteFrame", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_MenuItemImage_setSelectedSpriteFrame(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::MenuItemImage* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_MenuItemImage_setSelectedSpriteFrame'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::SpriteFrame* arg0;

        ok &= sqval_to_object<cocos2d::SpriteFrame>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setSelectedSpriteFrame(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setSelectedSpriteFrame", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_MenuItemImage_setNormalSpriteFrame(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::MenuItemImage* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_MenuItemImage_setNormalSpriteFrame'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::SpriteFrame* arg0;

        ok &= sqval_to_object<cocos2d::SpriteFrame>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setNormalSpriteFrame(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setNormalSpriteFrame", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_MenuItemImage_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 2)
        {

            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_STRING) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);
            if (!ok) { break; }
            std::string arg1;
            ok &= sqval_to_std_string(vm, 3, &arg1);
            if (!ok) { break; }
            cocos2d::MenuItemImage* ret = cocos2d::MenuItemImage::create(arg0, arg1);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.MenuItemImage");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 0)
        {


            cocos2d::MenuItemImage* ret = cocos2d::MenuItemImage::create();
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.MenuItemImage");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 3)
        {

            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_STRING) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);
            if (!ok) { break; }
            std::string arg1;
            ok &= sqval_to_std_string(vm, 3, &arg1);
            if (!ok) { break; }
            std::string arg2;
            ok &= sqval_to_std_string(vm, 4, &arg2);
            if (!ok) { break; }
            cocos2d::MenuItemImage* ret = cocos2d::MenuItemImage::create(arg0, arg1, arg2);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.MenuItemImage");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 3)
        {

            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_CLOSURE) {
                break;
            }
            HSQOBJECT callback4;
            sq_getstackobj(vm, 4, &callback4);

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);
            if (!ok) { break; }
            std::string arg1;
            ok &= sqval_to_std_string(vm, 3, &arg1);
            if (!ok) { break; }
            std::function<void (cocos2d::Ref *)> arg2;
            do {
			    // Lambda binding for squirrel
			    arg2 = [vm, callback4](cocos2d::Ref* larg0) -> void {
			        if (sq_getrefcount(vm, (HSQOBJECT *)&callback4) > 0) {
			            sq_pushobject(vm, callback4);
			            sq_push(vm, 1);
			            object_to_sqval<cocos2d::Ref>(vm, "cc.Ref", (cocos2d::Ref*)larg0);
			            sq_call(vm, 2, SQFalse, SQTrue);
			            sq_poptop(vm);
			        }
			    };
			} while(0);
            if (!ok) { break; }
            cocos2d::MenuItemImage* ret = cocos2d::MenuItemImage::create(arg0, arg1, arg2);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.MenuItemImage");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            _SquirrelObject *sqobj = (_SquirrelObject *)ret->_scriptObject;
            sqobj->addClosure("callback4", callback4);
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 4)
        {

            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_CLOSURE) {
                break;
            }
            HSQOBJECT callback5;
            sq_getstackobj(vm, 5, &callback5);

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);
            if (!ok) { break; }
            std::string arg1;
            ok &= sqval_to_std_string(vm, 3, &arg1);
            if (!ok) { break; }
            std::string arg2;
            ok &= sqval_to_std_string(vm, 4, &arg2);
            if (!ok) { break; }
            std::function<void (cocos2d::Ref *)> arg3;
            do {
			    // Lambda binding for squirrel
			    arg3 = [vm, callback5](cocos2d::Ref* larg0) -> void {
			        if (sq_getrefcount(vm, (HSQOBJECT *)&callback5) > 0) {
			            sq_pushobject(vm, callback5);
			            sq_push(vm, 1);
			            object_to_sqval<cocos2d::Ref>(vm, "cc.Ref", (cocos2d::Ref*)larg0);
			            sq_call(vm, 2, SQFalse, SQTrue);
			            sq_poptop(vm);
			        }
			    };
			} while(0);
            if (!ok) { break; }
            cocos2d::MenuItemImage* ret = cocos2d::MenuItemImage::create(arg0, arg1, arg2, arg3);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.MenuItemImage");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            _SquirrelObject *sqobj = (_SquirrelObject *)ret->_scriptObject;
            sqobj->addClosure("callback5", callback5);
            return 1;
        }
    } while (0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d", "create", (int)argc, 4);
    return 0;
}

SQInteger squirrel_cocos2dx_MenuItemImage_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.MenuItemImage", -1);
    return 1;
}

void squirrel_cocos2dx_MenuItemImage_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::MenuItemImage", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::MenuItemSprite", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::MenuItem", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_MenuItemImage(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("MenuItemImage"), -1);


    sq_pushstring(vm, _SC("MenuItemSprite"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "setDisabledSpriteFrame", squirrel_cocos2dx_MenuItemImage_setDisabledSpriteFrame);
    to_squirrel_function(vm, "setSelectedSpriteFrame", squirrel_cocos2dx_MenuItemImage_setSelectedSpriteFrame);
    to_squirrel_function(vm, "setNormalSpriteFrame", squirrel_cocos2dx_MenuItemImage_setNormalSpriteFrame);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_MenuItemImage_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_MenuItemImage_typeof_meta);



    squirrel_cocos2dx_MenuItemImage_push_c_class(vm);

    std::string typeName = typeid(cocos2d::MenuItemImage).name();
    g_sqType[typeName] = "cc.MenuItemImage";

    return 1;
}
SQInteger squirrel_cocos2dx_TransitionJumpZoom_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        float arg0;
        cocos2d::Scene* arg1;
        ok &= sqval_to_float(vm, 2, &arg0);
        ok &= sqval_to_object<cocos2d::Scene>(vm, 3, &arg1);
        if(!ok)
            return 0;
        cocos2d::TransitionJumpZoom* ret = cocos2d::TransitionJumpZoom::create(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.TransitionJumpZoom");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_TransitionJumpZoom_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.TransitionJumpZoom", -1);
    return 1;
}

void squirrel_cocos2dx_TransitionJumpZoom_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::TransitionJumpZoom", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::TransitionScene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Scene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_TransitionJumpZoom(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("TransitionJumpZoom"), -1);


    sq_pushstring(vm, _SC("TransitionScene"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_TransitionJumpZoom_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_TransitionJumpZoom_typeof_meta);



    squirrel_cocos2dx_TransitionJumpZoom_push_c_class(vm);

    std::string typeName = typeid(cocos2d::TransitionJumpZoom).name();
    g_sqType[typeName] = "cc.TransitionJumpZoom";

    return 1;
}
SQInteger squirrel_cocos2dx_ParticleFire_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        cocos2d::ParticleFire* ret = cocos2d::ParticleFire::create();
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.ParticleFire");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleFire_createWithTotalParticles_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if(!ok)
            return 0;
        cocos2d::ParticleFire* ret = cocos2d::ParticleFire::createWithTotalParticles(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.ParticleFire");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "createWithTotalParticles", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_ParticleFire_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.ParticleFire", -1);
    return 1;
}

void squirrel_cocos2dx_ParticleFire_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::ParticleFire", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ParticleSystemQuad", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ParticleSystem", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TextureProtocol", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::BlendProtocol", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_ParticleFire(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("ParticleFire"), -1);


    sq_pushstring(vm, _SC("ParticleSystemQuad"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_ParticleFire_create_static, SQTrue);
    to_squirrel_function(vm, "createWithTotalParticles", squirrel_cocos2dx_ParticleFire_createWithTotalParticles_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_ParticleFire_typeof_meta);



    squirrel_cocos2dx_ParticleFire_push_c_class(vm);

    std::string typeName = typeid(cocos2d::ParticleFire).name();
    g_sqType[typeName] = "cc.ParticleFire";

    return 1;
}
SQInteger squirrel_cocos2dx_MenuItem_setEnabled(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::MenuItem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_MenuItem_setEnabled'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setEnabled(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setEnabled", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_MenuItem_activate(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::MenuItem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_MenuItem_activate'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->activate();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "activate", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_MenuItem_isEnabled(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::MenuItem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_MenuItem_isEnabled'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isEnabled();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isEnabled", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_MenuItem_selected(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::MenuItem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_MenuItem_selected'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->selected();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "selected", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_MenuItem_isSelected(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::MenuItem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_MenuItem_isSelected'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isSelected();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isSelected", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_MenuItem_setCallback(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::MenuItem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_MenuItem_setCallback'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::function<void (cocos2d::Ref *)> arg0;
        HSQOBJECT callback2;
        sq_getstackobj(vm, 2, &callback2);

        do {
			    // Lambda binding for squirrel
			    arg0 = [vm, callback2](cocos2d::Ref* larg0) -> void {
			        if (sq_getrefcount(vm, (HSQOBJECT *)&callback2) > 0) {
			            sq_pushobject(vm, callback2);
			            sq_push(vm, 1);
			            object_to_sqval<cocos2d::Ref>(vm, "cc.Ref", (cocos2d::Ref*)larg0);
			            sq_call(vm, 2, SQFalse, SQTrue);
			            sq_poptop(vm);
			        }
			    };
			} while(0);
        if (!ok)
            return 0;
        cobj->setCallback(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setCallback", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_MenuItem_unselected(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::MenuItem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_MenuItem_unselected'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->unselected();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "unselected", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_MenuItem_rect(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::MenuItem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_MenuItem_rect'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Rect ret = cobj->rect();
        rect_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "rect", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_MenuItem_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 1)
        {

            if (sq_gettype(vm, 2) != OT_CLOSURE) {
                break;
            }
            HSQOBJECT callback2;
            sq_getstackobj(vm, 2, &callback2);

            std::function<void (cocos2d::Ref *)> arg0;
            do {
			    // Lambda binding for squirrel
			    arg0 = [vm, callback2](cocos2d::Ref* larg0) -> void {
			        if (sq_getrefcount(vm, (HSQOBJECT *)&callback2) > 0) {
			            sq_pushobject(vm, callback2);
			            sq_push(vm, 1);
			            object_to_sqval<cocos2d::Ref>(vm, "cc.Ref", (cocos2d::Ref*)larg0);
			            sq_call(vm, 2, SQFalse, SQTrue);
			            sq_poptop(vm);
			        }
			    };
			} while(0);
            if (!ok) { break; }
            cocos2d::MenuItem* ret = cocos2d::MenuItem::create(arg0);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.MenuItem");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            _SquirrelObject *sqobj = (_SquirrelObject *)ret->_scriptObject;
            sqobj->addClosure("callback2", callback2);
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 0)
        {


            cocos2d::MenuItem* ret = cocos2d::MenuItem::create();
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.MenuItem");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d", "create", (int)argc, 0);
    return 0;
}

SQInteger squirrel_cocos2dx_MenuItem_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.MenuItem", -1);
    return 1;
}

void squirrel_cocos2dx_MenuItem_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::MenuItem", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_MenuItem(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("MenuItem"), -1);


    sq_pushstring(vm, _SC("Node"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "setEnabled", squirrel_cocos2dx_MenuItem_setEnabled);
    to_squirrel_function(vm, "activate", squirrel_cocos2dx_MenuItem_activate);
    to_squirrel_function(vm, "isEnabled", squirrel_cocos2dx_MenuItem_isEnabled);
    to_squirrel_function(vm, "selected", squirrel_cocos2dx_MenuItem_selected);
    to_squirrel_function(vm, "isSelected", squirrel_cocos2dx_MenuItem_isSelected);
    to_squirrel_function(vm, "setCallback", squirrel_cocos2dx_MenuItem_setCallback);
    to_squirrel_function(vm, "unselected", squirrel_cocos2dx_MenuItem_unselected);
    to_squirrel_function(vm, "rect", squirrel_cocos2dx_MenuItem_rect);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_MenuItem_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_MenuItem_typeof_meta);



    squirrel_cocos2dx_MenuItem_push_c_class(vm);

    std::string typeName = typeid(cocos2d::MenuItem).name();
    g_sqType[typeName] = "cc.MenuItem";

    return 1;
}
SQInteger squirrel_cocos2dx_ActionEase_getInnerAction(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ActionEase* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ActionEase_getInnerAction'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::ActionInterval* ret = cobj->getInnerAction();
        object_to_sqval<cocos2d::ActionInterval>(vm, "cc.ActionInterval", (cocos2d::ActionInterval*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getInnerAction", (int)argc, 0);
    return 0;
}

SQInteger squirrel_cocos2dx_ActionEase_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.ActionEase", -1);
    return 1;
}

void squirrel_cocos2dx_ActionEase_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::ActionEase", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_ActionEase(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("ActionEase"), -1);


    sq_pushstring(vm, _SC("ActionInterval"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "getInnerAction", squirrel_cocos2dx_ActionEase_getInnerAction);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_ActionEase_typeof_meta);



    squirrel_cocos2dx_ActionEase_push_c_class(vm);

    std::string typeName = typeid(cocos2d::ActionEase).name();
    g_sqType[typeName] = "cc.ActionEase";

    return 1;
}

SQInteger squirrel_cocos2dx_AffineTransform_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.AffineTransform", -1);
    return 1;
}

SQInteger squirrel_cocos2dx_AffineTransform_get_meta(HSQUIRRELVM vm)
{
    cocos2d::AffineTransform *cobj = nullptr;
    if (SQ_FAILED(sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0))) {
        CCLOG("cocos2d::AffineTransform sq_getinstanceup failed.");
        sq_pushnull(vm);
        return 1;
    }

    const char *varName = nullptr;
    sq_getstring(vm, 2, &varName);
    
    do {
        if (strcmp(varName, "a") == 0) {
            sq_pushfloat(vm, (SQFloat)cobj->a);
            break;
        }
        if (strcmp(varName, "b") == 0) {
            sq_pushfloat(vm, (SQFloat)cobj->b);
            break;
        }
        if (strcmp(varName, "c") == 0) {
            sq_pushfloat(vm, (SQFloat)cobj->c);
            break;
        }
        if (strcmp(varName, "d") == 0) {
            sq_pushfloat(vm, (SQFloat)cobj->d);
            break;
        }
        if (strcmp(varName, "tx") == 0) {
            sq_pushfloat(vm, (SQFloat)cobj->tx);
            break;
        }
        if (strcmp(varName, "ty") == 0) {
            sq_pushfloat(vm, (SQFloat)cobj->ty);
            break;
        }

        return 0;
        
    } while(0);

    return 1;
}

SQInteger squirrel_cocos2dx_AffineTransform_set_meta(HSQUIRRELVM vm)
{
    cocos2d::AffineTransform *cobj = nullptr;
    if (SQ_FAILED(sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0))) {
        CCLOG("cocos2d::AffineTransform sq_getinstanceup failed.");
        return 0;
    }

    bool ok  = true;
    const char *varName = nullptr;
    sq_getstring(vm, 2, &varName);
    
    do {
        if (strcmp(varName, "a") == 0) {
            ok &= sqval_to_float(vm, 3, &cobj->a);
            if (! ok) {
                return 0;
            }
            break;
        }
        if (strcmp(varName, "b") == 0) {
            ok &= sqval_to_float(vm, 3, &cobj->b);
            if (! ok) {
                return 0;
            }
            break;
        }
        if (strcmp(varName, "c") == 0) {
            ok &= sqval_to_float(vm, 3, &cobj->c);
            if (! ok) {
                return 0;
            }
            break;
        }
        if (strcmp(varName, "d") == 0) {
            ok &= sqval_to_float(vm, 3, &cobj->d);
            if (! ok) {
                return 0;
            }
            break;
        }
        if (strcmp(varName, "tx") == 0) {
            ok &= sqval_to_float(vm, 3, &cobj->tx);
            if (! ok) {
                return 0;
            }
            break;
        }
        if (strcmp(varName, "ty") == 0) {
            ok &= sqval_to_float(vm, 3, &cobj->ty);
            if (! ok) {
                return 0;
            }
            break;
        }

        CCLOG("specified variable is not found in cocos2d::AffineTransform");
    } while(0);

    return 0;
}

void squirrel_cocos2dx_AffineTransform_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::AffineTransform", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_AffineTransform(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("AffineTransform"), -1);

    sq_newclass(vm, SQFalse);


    to_squirrel_function(vm, "_get", squirrel_cocos2dx_AffineTransform_get_meta);
    to_squirrel_function(vm, "_set", squirrel_cocos2dx_AffineTransform_set_meta);
    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_AffineTransform_typeof_meta);

    to_squirrel_variable_object(vm, "IDENTITY", (SQUserPointer)&cocos2d::AffineTransform::IDENTITY, SQTrue);


    squirrel_cocos2dx_AffineTransform_push_c_class(vm);

    std::string typeName = typeid(cocos2d::AffineTransform).name();
    g_sqType[typeName] = "cc.AffineTransform";

    return 1;
}
SQInteger squirrel_cocos2dx_Event_isStopped(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Event* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Event_isStopped'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isStopped();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isStopped", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Event_getType(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Event* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Event_getType'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        int ret = (int)cobj->getType();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getType", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Event_getCurrentTarget(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Event* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Event_getCurrentTarget'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Node* ret = cobj->getCurrentTarget();
        object_to_sqval<cocos2d::Node>(vm, "cc.Node", (cocos2d::Node*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getCurrentTarget", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Event_stopPropagation(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Event* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Event_stopPropagation'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->stopPropagation();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "stopPropagation", (int)argc, 0);
    return 0;
}

SQInteger squirrel_cocos2dx_Event_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.Event", -1);
    return 1;
}

void squirrel_cocos2dx_Event_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::Event", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_Event(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("Event"), -1);


    sq_pushstring(vm, _SC("Ref"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "isStopped", squirrel_cocos2dx_Event_isStopped);
    to_squirrel_function(vm, "getType", squirrel_cocos2dx_Event_getType);
    to_squirrel_function(vm, "getCurrentTarget", squirrel_cocos2dx_Event_getCurrentTarget);
    to_squirrel_function(vm, "stopPropagation", squirrel_cocos2dx_Event_stopPropagation);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_Event_typeof_meta);


    sq_pushstring(vm, _SC("Type"), -1);
    sq_newtable(vm);
    to_squirrel_variable_integer(vm, "TOUCH", (SQInteger)cocos2d::Event::Type::TOUCH, SQTrue);
    to_squirrel_variable_integer(vm, "KEYBOARD", (SQInteger)cocos2d::Event::Type::KEYBOARD, SQTrue);
    to_squirrel_variable_integer(vm, "ACCELERATION", (SQInteger)cocos2d::Event::Type::ACCELERATION, SQTrue);
    to_squirrel_variable_integer(vm, "MOUSE", (SQInteger)cocos2d::Event::Type::MOUSE, SQTrue);
    to_squirrel_variable_integer(vm, "FOCUS", (SQInteger)cocos2d::Event::Type::FOCUS, SQTrue);
    to_squirrel_variable_integer(vm, "GAME_CONTROLLER", (SQInteger)cocos2d::Event::Type::GAME_CONTROLLER, SQTrue);
    to_squirrel_variable_integer(vm, "CUSTOM", (SQInteger)cocos2d::Event::Type::CUSTOM, SQTrue);
    sq_newslot(vm, -3, SQTrue);

    squirrel_cocos2dx_Event_push_c_class(vm);

    std::string typeName = typeid(cocos2d::Event).name();
    g_sqType[typeName] = "cc.Event";

    return 1;
}
SQInteger squirrel_cocos2dx_TransitionZoomFlipAngular_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 2)
        {

            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Scene")) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::Scene* arg1;
            ok &= sqval_to_object<cocos2d::Scene>(vm, 3, &arg1);
            if (!ok) { break; }
            cocos2d::TransitionZoomFlipAngular* ret = cocos2d::TransitionZoomFlipAngular::create(arg0, arg1);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.TransitionZoomFlipAngular");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 3)
        {

            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Scene")) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INSTANCE || ! instanceof_cclass(vm, 4, "cocos2d::TransitionScene::Orientation")) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::Scene* arg1;
            ok &= sqval_to_object<cocos2d::Scene>(vm, 3, &arg1);
            if (!ok) { break; }
            cocos2d::TransitionScene::Orientation arg2;
            ok &= sqval_to_int32(vm, 4, (int *)&arg2);
            if (!ok) { break; }
            cocos2d::TransitionZoomFlipAngular* ret = cocos2d::TransitionZoomFlipAngular::create(arg0, arg1, arg2);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.TransitionZoomFlipAngular");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d", "create", (int)argc, 3);
    return 0;
}

SQInteger squirrel_cocos2dx_TransitionZoomFlipAngular_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.TransitionZoomFlipAngular", -1);
    return 1;
}

void squirrel_cocos2dx_TransitionZoomFlipAngular_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::TransitionZoomFlipAngular", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::TransitionSceneOriented", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TransitionScene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Scene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_TransitionZoomFlipAngular(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("TransitionZoomFlipAngular"), -1);


    sq_pushstring(vm, _SC("TransitionSceneOriented"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_TransitionZoomFlipAngular_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_TransitionZoomFlipAngular_typeof_meta);



    squirrel_cocos2dx_TransitionZoomFlipAngular_push_c_class(vm);

    std::string typeName = typeid(cocos2d::TransitionZoomFlipAngular).name();
    g_sqType[typeName] = "cc.TransitionZoomFlipAngular";

    return 1;
}
SQInteger squirrel_cocos2dx_EaseIn_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        cocos2d::ActionInterval* arg0;
        float arg1;
        ok &= sqval_to_object<cocos2d::ActionInterval>(vm, 2, &arg0);
        ok &= sqval_to_float(vm, 3, &arg1);
        if(!ok)
            return 0;
        cocos2d::EaseIn* ret = cocos2d::EaseIn::create(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.EaseIn");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_EaseIn_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.EaseIn", -1);
    return 1;
}

void squirrel_cocos2dx_EaseIn_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::EaseIn", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::EaseRateAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionEase", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_EaseIn(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("EaseIn"), -1);


    sq_pushstring(vm, _SC("EaseRateAction"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_EaseIn_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_EaseIn_typeof_meta);



    squirrel_cocos2dx_EaseIn_push_c_class(vm);

    std::string typeName = typeid(cocos2d::EaseIn).name();
    g_sqType[typeName] = "cc.EaseIn";

    return 1;
}
SQInteger squirrel_cocos2dx_EaseExponentialInOut_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        cocos2d::ActionInterval* arg0;
        ok &= sqval_to_object<cocos2d::ActionInterval>(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::EaseExponentialInOut* ret = cocos2d::EaseExponentialInOut::create(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.EaseExponentialInOut");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_EaseExponentialInOut_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.EaseExponentialInOut", -1);
    return 1;
}

void squirrel_cocos2dx_EaseExponentialInOut_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::EaseExponentialInOut", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionEase", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_EaseExponentialInOut(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("EaseExponentialInOut"), -1);


    sq_pushstring(vm, _SC("ActionEase"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_EaseExponentialInOut_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_EaseExponentialInOut_typeof_meta);



    squirrel_cocos2dx_EaseExponentialInOut_push_c_class(vm);

    std::string typeName = typeid(cocos2d::EaseExponentialInOut).name();
    g_sqType[typeName] = "cc.EaseExponentialInOut";

    return 1;
}
SQInteger squirrel_cocos2dx_EaseBackInOut_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        cocos2d::ActionInterval* arg0;
        ok &= sqval_to_object<cocos2d::ActionInterval>(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::EaseBackInOut* ret = cocos2d::EaseBackInOut::create(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.EaseBackInOut");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_EaseBackInOut_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.EaseBackInOut", -1);
    return 1;
}

void squirrel_cocos2dx_EaseBackInOut_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::EaseBackInOut", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionEase", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_EaseBackInOut(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("EaseBackInOut"), -1);


    sq_pushstring(vm, _SC("ActionEase"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_EaseBackInOut_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_EaseBackInOut_typeof_meta);



    squirrel_cocos2dx_EaseBackInOut_push_c_class(vm);

    std::string typeName = typeid(cocos2d::EaseBackInOut).name();
    g_sqType[typeName] = "cc.EaseBackInOut";

    return 1;
}
SQInteger squirrel_cocos2dx_Waves3D_getAmplitudeRate(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Waves3D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Waves3D_getAmplitudeRate'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getAmplitudeRate();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getAmplitudeRate", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Waves3D_setAmplitude(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Waves3D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Waves3D_setAmplitude'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setAmplitude(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setAmplitude", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Waves3D_setAmplitudeRate(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Waves3D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Waves3D_setAmplitudeRate'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setAmplitudeRate(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setAmplitudeRate", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Waves3D_getAmplitude(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Waves3D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Waves3D_getAmplitude'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getAmplitude();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getAmplitude", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Waves3D_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 4)
    {
        float arg0;
        cocos2d::Size arg1;
        unsigned int arg2;
        float arg3;
        ok &= sqval_to_float(vm, 2, &arg0);
        cocos2d::Size* ptr3 = nullptr; ok &= sqval_to_size(vm, 3, ptr3); arg1 = *ptr3;
        ok &= sqval_to_uint32(vm, 4, &arg2);
        ok &= sqval_to_float(vm, 5, &arg3);
        if(!ok)
            return 0;
        cocos2d::Waves3D* ret = cocos2d::Waves3D::create(arg0, arg1, arg2, arg3);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.Waves3D");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 4);
    return 0;
}

SQInteger squirrel_cocos2dx_Waves3D_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.Waves3D", -1);
    return 1;
}

void squirrel_cocos2dx_Waves3D_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::Waves3D", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Grid3DAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::GridAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_Waves3D(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("Waves3D"), -1);


    sq_pushstring(vm, _SC("Grid3DAction"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "getAmplitudeRate", squirrel_cocos2dx_Waves3D_getAmplitudeRate);
    to_squirrel_function(vm, "setAmplitude", squirrel_cocos2dx_Waves3D_setAmplitude);
    to_squirrel_function(vm, "setAmplitudeRate", squirrel_cocos2dx_Waves3D_setAmplitudeRate);
    to_squirrel_function(vm, "getAmplitude", squirrel_cocos2dx_Waves3D_getAmplitude);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_Waves3D_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_Waves3D_typeof_meta);



    squirrel_cocos2dx_Waves3D_push_c_class(vm);

    std::string typeName = typeid(cocos2d::Waves3D).name();
    g_sqType[typeName] = "cc.Waves3D";

    return 1;
}
SQInteger squirrel_cocos2dx_EaseExponentialOut_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        cocos2d::ActionInterval* arg0;
        ok &= sqval_to_object<cocos2d::ActionInterval>(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::EaseExponentialOut* ret = cocos2d::EaseExponentialOut::create(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.EaseExponentialOut");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_EaseExponentialOut_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.EaseExponentialOut", -1);
    return 1;
}

void squirrel_cocos2dx_EaseExponentialOut_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::EaseExponentialOut", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionEase", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_EaseExponentialOut(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("EaseExponentialOut"), -1);


    sq_pushstring(vm, _SC("ActionEase"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_EaseExponentialOut_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_EaseExponentialOut_typeof_meta);



    squirrel_cocos2dx_EaseExponentialOut_push_c_class(vm);

    std::string typeName = typeid(cocos2d::EaseExponentialOut).name();
    g_sqType[typeName] = "cc.EaseExponentialOut";

    return 1;
}
SQInteger squirrel_cocos2dx_Label_isClipMarginEnabled(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Label* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Label_isClipMarginEnabled'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isClipMarginEnabled();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isClipMarginEnabled", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Label_enableShadow(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Label* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Label_enableShadow'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->enableShadow();
        return 0;
    }
    if (argc == 1) 
    {
        cocos2d::Color4B arg0;

        cocos2d::Color4B *ptr2 = nullptr; ok &=sqval_to_color4b(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->enableShadow(arg0);
        return 0;
    }
    if (argc == 2) 
    {
        cocos2d::Color4B arg0;
        cocos2d::Size arg1;

        cocos2d::Color4B *ptr2 = nullptr; ok &=sqval_to_color4b(vm, 2, ptr2); arg0 = *ptr2;

        cocos2d::Size* ptr3 = nullptr; ok &= sqval_to_size(vm, 3, ptr3); arg1 = *ptr3;
        if (!ok)
            return 0;
        cobj->enableShadow(arg0, arg1);
        return 0;
    }
    if (argc == 3) 
    {
        cocos2d::Color4B arg0;
        cocos2d::Size arg1;
        int arg2;

        cocos2d::Color4B *ptr2 = nullptr; ok &=sqval_to_color4b(vm, 2, ptr2); arg0 = *ptr2;

        cocos2d::Size* ptr3 = nullptr; ok &= sqval_to_size(vm, 3, ptr3); arg1 = *ptr3;

        ok &= sqval_to_int32(vm, 4, (int *)&arg2);
        if (!ok)
            return 0;
        cobj->enableShadow(arg0, arg1, arg2);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "enableShadow", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Label_setDimensions(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Label* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Label_setDimensions'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        unsigned int arg0;
        unsigned int arg1;

        ok &= sqval_to_uint32(vm, 2, &arg0);

        ok &= sqval_to_uint32(vm, 3, &arg1);
        if (!ok)
            return 0;
        cobj->setDimensions(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setDimensions", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_Label_getString(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Label* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Label_getString'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const std::string& ret = cobj->getString();
        sq_pushstring(vm, (const SQChar *)ret.c_str(), -1);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getString", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Label_getHeight(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Label* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Label_getHeight'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        unsigned int ret = cobj->getHeight();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getHeight", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Label_disableEffect(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Label* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Label_disableEffect'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->disableEffect();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "disableEffect", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Label_setTTFConfig(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Label* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Label_setTTFConfig'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::_ttfConfig arg0;

        cocos2d::_ttfConfig *ptr2 = nullptr; ok &= sqval_to_ttfconfig(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        bool ret = cobj->setTTFConfig(arg0);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setTTFConfig", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Label_getTextColor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Label* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Label_getTextColor'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::Color4B& ret = cobj->getTextColor();
        color4b_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getTextColor", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Label_setWidth(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Label* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Label_setWidth'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        unsigned int arg0;

        ok &= sqval_to_uint32(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setWidth(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setWidth", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Label_getMaxLineWidth(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Label* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Label_getMaxLineWidth'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        unsigned int ret = cobj->getMaxLineWidth();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getMaxLineWidth", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Label_getHorizontalAlignment(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Label* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Label_getHorizontalAlignment'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        int ret = (int)cobj->getHorizontalAlignment();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getHorizontalAlignment", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Label_setClipMarginEnabled(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Label* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Label_setClipMarginEnabled'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setClipMarginEnabled(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setClipMarginEnabled", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Label_setString(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Label* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Label_setString'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setString(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setString", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Label_setSystemFontName(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Label* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Label_setSystemFontName'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setSystemFontName(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setSystemFontName", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Label_setBMFontFilePath(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Label* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Label_setBMFontFilePath'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        bool ret = cobj->setBMFontFilePath(arg0);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    if (argc == 2) 
    {
        std::string arg0;
        cocos2d::Vec2 arg1;

        ok &= sqval_to_std_string(vm, 2, &arg0);

        cocos2d::Vec2* ptr3 = nullptr; ok &= sqval_to_vec2(vm, 3, ptr3); arg1 = *ptr3;
        if (!ok)
            return 0;
        bool ret = cobj->setBMFontFilePath(arg0, arg1);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setBMFontFilePath", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Label_getFontAtlas(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Label* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Label_getFontAtlas'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::FontAtlas* ret = cobj->getFontAtlas();
        object_to_sqval<cocos2d::FontAtlas>(vm, "cc.FontAtlas", (cocos2d::FontAtlas*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getFontAtlas", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Label_setLineHeight(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Label* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Label_setLineHeight'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setLineHeight(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setLineHeight", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Label_setSystemFontSize(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Label* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Label_setSystemFontSize'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setSystemFontSize(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setSystemFontSize", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Label_updateContent(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Label* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Label_updateContent'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->updateContent();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "updateContent", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Label_getStringLength(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Label* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Label_getStringLength'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        int ret = cobj->getStringLength();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getStringLength", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Label_setLineBreakWithoutSpace(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Label* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Label_setLineBreakWithoutSpace'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setLineBreakWithoutSpace(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setLineBreakWithoutSpace", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Label_getStringNumLines(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Label* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Label_getStringNumLines'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        int ret = cobj->getStringNumLines();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getStringNumLines", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Label_enableOutline(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Label* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Label_enableOutline'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Color4B arg0;

        cocos2d::Color4B *ptr2 = nullptr; ok &=sqval_to_color4b(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->enableOutline(arg0);
        return 0;
    }
    if (argc == 2) 
    {
        cocos2d::Color4B arg0;
        int arg1;

        cocos2d::Color4B *ptr2 = nullptr; ok &=sqval_to_color4b(vm, 2, ptr2); arg0 = *ptr2;

        ok &= sqval_to_int32(vm, 3, (int *)&arg1);
        if (!ok)
            return 0;
        cobj->enableOutline(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "enableOutline", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Label_getAdditionalKerning(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Label* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Label_getAdditionalKerning'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getAdditionalKerning();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getAdditionalKerning", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Label_setCharMap(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Label* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Label_setCharMap'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 4) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Texture2D")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INTEGER && sq_gettype(vm, 5) != OT_FLOAT) {
                break;
            }

            cocos2d::Texture2D* arg0;
            ok &= sqval_to_object<cocos2d::Texture2D>(vm, 2, &arg0);

            if (!ok) { break; }
            int arg1;
            ok &= sqval_to_int32(vm, 3, (int *)&arg1);

            if (!ok) { break; }
            int arg2;
            ok &= sqval_to_int32(vm, 4, (int *)&arg2);

            if (!ok) { break; }
            int arg3;
            ok &= sqval_to_int32(vm, 5, (int *)&arg3);

            if (!ok) { break; }
            bool ret = cobj->setCharMap(arg0, arg1, arg2, arg3);
            sq_pushbool(vm, (SQBool)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 4) {
            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INTEGER && sq_gettype(vm, 5) != OT_FLOAT) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);

            if (!ok) { break; }
            int arg1;
            ok &= sqval_to_int32(vm, 3, (int *)&arg1);

            if (!ok) { break; }
            int arg2;
            ok &= sqval_to_int32(vm, 4, (int *)&arg2);

            if (!ok) { break; }
            int arg3;
            ok &= sqval_to_int32(vm, 5, (int *)&arg3);

            if (!ok) { break; }
            bool ret = cobj->setCharMap(arg0, arg1, arg2, arg3);
            sq_pushbool(vm, (SQBool)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);

            if (!ok) { break; }
            bool ret = cobj->setCharMap(arg0);
            sq_pushbool(vm, (SQBool)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setCharMap", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Label_getDimensions(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Label* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Label_getDimensions'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::Size& ret = cobj->getDimensions();
        size_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getDimensions", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Label_setMaxLineWidth(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Label* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Label_setMaxLineWidth'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        unsigned int arg0;

        ok &= sqval_to_uint32(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setMaxLineWidth(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setMaxLineWidth", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Label_getSystemFontName(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Label* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Label_getSystemFontName'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const std::string& ret = cobj->getSystemFontName();
        sq_pushstring(vm, (const SQChar *)ret.c_str(), -1);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getSystemFontName", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Label_setVerticalAlignment(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Label* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Label_setVerticalAlignment'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::TextVAlignment arg0;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if (!ok)
            return 0;
        cobj->setVerticalAlignment(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setVerticalAlignment", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Label_getLineHeight(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Label* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Label_getLineHeight'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getLineHeight();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getLineHeight", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Label_getTTFConfig(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Label* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Label_getTTFConfig'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::_ttfConfig& ret = cobj->getTTFConfig();
        ttfconfig_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getTTFConfig", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Label_getVerticalAlignment(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Label* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Label_getVerticalAlignment'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        int ret = (int)cobj->getVerticalAlignment();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getVerticalAlignment", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Label_setTextColor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Label* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Label_setTextColor'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Color4B arg0;

        cocos2d::Color4B *ptr2 = nullptr; ok &=sqval_to_color4b(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->setTextColor(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setTextColor", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Label_setHeight(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Label* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Label_setHeight'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        unsigned int arg0;

        ok &= sqval_to_uint32(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setHeight(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setHeight", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Label_getWidth(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Label* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Label_getWidth'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        unsigned int ret = cobj->getWidth();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getWidth", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Label_enableGlow(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Label* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Label_enableGlow'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Color4B arg0;

        cocos2d::Color4B *ptr2 = nullptr; ok &=sqval_to_color4b(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->enableGlow(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "enableGlow", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Label_getLetter(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Label* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Label_getLetter'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        int arg0;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if (!ok)
            return 0;
        cocos2d::Sprite* ret = cobj->getLetter(arg0);
        object_to_sqval<cocos2d::Sprite>(vm, "cc.Sprite", (cocos2d::Sprite*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getLetter", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Label_setAdditionalKerning(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Label* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Label_setAdditionalKerning'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setAdditionalKerning(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setAdditionalKerning", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Label_getSystemFontSize(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Label* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Label_getSystemFontSize'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getSystemFontSize();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getSystemFontSize", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Label_getTextAlignment(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Label* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Label_getTextAlignment'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        int ret = (int)cobj->getTextAlignment();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getTextAlignment", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Label_getBMFontFilePath(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Label* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Label_getBMFontFilePath'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const std::string& ret = cobj->getBMFontFilePath();
        sq_pushstring(vm, (const SQChar *)ret.c_str(), -1);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getBMFontFilePath", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Label_setHorizontalAlignment(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Label* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Label_setHorizontalAlignment'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::TextHAlignment arg0;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if (!ok)
            return 0;
        cobj->setHorizontalAlignment(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setHorizontalAlignment", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Label_setAlignment(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Label* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Label_setAlignment'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::TextHAlignment")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::TextVAlignment")) {
                break;
            }

            cocos2d::TextHAlignment arg0;
            ok &= sqval_to_int32(vm, 2, (int *)&arg0);

            if (!ok) { break; }
            cocos2d::TextVAlignment arg1;
            ok &= sqval_to_int32(vm, 3, (int *)&arg1);

            if (!ok) { break; }
            cobj->setAlignment(arg0, arg1);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::TextHAlignment")) {
                break;
            }

            cocos2d::TextHAlignment arg0;
            ok &= sqval_to_int32(vm, 2, (int *)&arg0);

            if (!ok) { break; }
            cobj->setAlignment(arg0);
            return 0;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setAlignment", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Label_requestSystemFontRefresh(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Label* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Label_requestSystemFontRefresh'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->requestSystemFontRefresh();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "requestSystemFontRefresh", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Label_createWithBMFont_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        std::string arg0;
        std::string arg1;
        ok &= sqval_to_std_string(vm, 2, &arg0);
        ok &= sqval_to_std_string(vm, 3, &arg1);
        if(!ok)
            return 0;
        cocos2d::Label* ret = cocos2d::Label::createWithBMFont(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.Label");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    if (argc == 3)
    {
        std::string arg0;
        std::string arg1;
        cocos2d::TextHAlignment arg2;
        ok &= sqval_to_std_string(vm, 2, &arg0);
        ok &= sqval_to_std_string(vm, 3, &arg1);
        ok &= sqval_to_int32(vm, 4, (int *)&arg2);
        if(!ok)
            return 0;
        cocos2d::Label* ret = cocos2d::Label::createWithBMFont(arg0, arg1, arg2);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.Label");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    if (argc == 4)
    {
        std::string arg0;
        std::string arg1;
        cocos2d::TextHAlignment arg2;
        int arg3;
        ok &= sqval_to_std_string(vm, 2, &arg0);
        ok &= sqval_to_std_string(vm, 3, &arg1);
        ok &= sqval_to_int32(vm, 4, (int *)&arg2);
        ok &= sqval_to_int32(vm, 5, (int *)&arg3);
        if(!ok)
            return 0;
        cocos2d::Label* ret = cocos2d::Label::createWithBMFont(arg0, arg1, arg2, arg3);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.Label");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    if (argc == 5)
    {
        std::string arg0;
        std::string arg1;
        cocos2d::TextHAlignment arg2;
        int arg3;
        cocos2d::Vec2 arg4;
        ok &= sqval_to_std_string(vm, 2, &arg0);
        ok &= sqval_to_std_string(vm, 3, &arg1);
        ok &= sqval_to_int32(vm, 4, (int *)&arg2);
        ok &= sqval_to_int32(vm, 5, (int *)&arg3);
        cocos2d::Vec2* ptr6 = nullptr; ok &= sqval_to_vec2(vm, 6, ptr6); arg4 = *ptr6;
        if(!ok)
            return 0;
        cocos2d::Label* ret = cocos2d::Label::createWithBMFont(arg0, arg1, arg2, arg3, arg4);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.Label");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "createWithBMFont", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_Label_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        cocos2d::Label* ret = cocos2d::Label::create();
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.Label");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Label_createWithCharMap_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 4)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Texture2D")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INTEGER && sq_gettype(vm, 5) != OT_FLOAT) {
                break;
            }

            cocos2d::Texture2D* arg0;
            ok &= sqval_to_object<cocos2d::Texture2D>(vm, 2, &arg0);
            if (!ok) { break; }
            int arg1;
            ok &= sqval_to_int32(vm, 3, (int *)&arg1);
            if (!ok) { break; }
            int arg2;
            ok &= sqval_to_int32(vm, 4, (int *)&arg2);
            if (!ok) { break; }
            int arg3;
            ok &= sqval_to_int32(vm, 5, (int *)&arg3);
            if (!ok) { break; }
            cocos2d::Label* ret = cocos2d::Label::createWithCharMap(arg0, arg1, arg2, arg3);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.Label");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 4)
        {

            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INTEGER && sq_gettype(vm, 5) != OT_FLOAT) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);
            if (!ok) { break; }
            int arg1;
            ok &= sqval_to_int32(vm, 3, (int *)&arg1);
            if (!ok) { break; }
            int arg2;
            ok &= sqval_to_int32(vm, 4, (int *)&arg2);
            if (!ok) { break; }
            int arg3;
            ok &= sqval_to_int32(vm, 5, (int *)&arg3);
            if (!ok) { break; }
            cocos2d::Label* ret = cocos2d::Label::createWithCharMap(arg0, arg1, arg2, arg3);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.Label");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 1)
        {

            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::Label* ret = cocos2d::Label::createWithCharMap(arg0);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.Label");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d", "createWithCharMap", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Label_createWithSystemFont_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 3)
    {
        std::string arg0;
        std::string arg1;
        float arg2;
        ok &= sqval_to_std_string(vm, 2, &arg0);
        ok &= sqval_to_std_string(vm, 3, &arg1);
        ok &= sqval_to_float(vm, 4, &arg2);
        if(!ok)
            return 0;
        cocos2d::Label* ret = cocos2d::Label::createWithSystemFont(arg0, arg1, arg2);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.Label");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    if (argc == 4)
    {
        std::string arg0;
        std::string arg1;
        float arg2;
        cocos2d::Size arg3;
        ok &= sqval_to_std_string(vm, 2, &arg0);
        ok &= sqval_to_std_string(vm, 3, &arg1);
        ok &= sqval_to_float(vm, 4, &arg2);
        cocos2d::Size* ptr5 = nullptr; ok &= sqval_to_size(vm, 5, ptr5); arg3 = *ptr5;
        if(!ok)
            return 0;
        cocos2d::Label* ret = cocos2d::Label::createWithSystemFont(arg0, arg1, arg2, arg3);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.Label");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    if (argc == 5)
    {
        std::string arg0;
        std::string arg1;
        float arg2;
        cocos2d::Size arg3;
        cocos2d::TextHAlignment arg4;
        ok &= sqval_to_std_string(vm, 2, &arg0);
        ok &= sqval_to_std_string(vm, 3, &arg1);
        ok &= sqval_to_float(vm, 4, &arg2);
        cocos2d::Size* ptr5 = nullptr; ok &= sqval_to_size(vm, 5, ptr5); arg3 = *ptr5;
        ok &= sqval_to_int32(vm, 6, (int *)&arg4);
        if(!ok)
            return 0;
        cocos2d::Label* ret = cocos2d::Label::createWithSystemFont(arg0, arg1, arg2, arg3, arg4);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.Label");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    if (argc == 6)
    {
        std::string arg0;
        std::string arg1;
        float arg2;
        cocos2d::Size arg3;
        cocos2d::TextHAlignment arg4;
        cocos2d::TextVAlignment arg5;
        ok &= sqval_to_std_string(vm, 2, &arg0);
        ok &= sqval_to_std_string(vm, 3, &arg1);
        ok &= sqval_to_float(vm, 4, &arg2);
        cocos2d::Size* ptr5 = nullptr; ok &= sqval_to_size(vm, 5, ptr5); arg3 = *ptr5;
        ok &= sqval_to_int32(vm, 6, (int *)&arg4);
        ok &= sqval_to_int32(vm, 7, (int *)&arg5);
        if(!ok)
            return 0;
        cocos2d::Label* ret = cocos2d::Label::createWithSystemFont(arg0, arg1, arg2, arg3, arg4, arg5);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.Label");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "createWithSystemFont", (int)argc, 3);
    return 0;
}
SQInteger squirrel_cocos2dx_Label_createWithTTF_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 2)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::_ttfConfig")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_STRING) {
                break;
            }

            cocos2d::_ttfConfig arg0;
            cocos2d::_ttfConfig *ptr2 = nullptr; ok &= sqval_to_ttfconfig(vm, 2, ptr2); arg0 = *ptr2;
            if (!ok) { break; }
            std::string arg1;
            ok &= sqval_to_std_string(vm, 3, &arg1);
            if (!ok) { break; }
            cocos2d::Label* ret = cocos2d::Label::createWithTTF(arg0, arg1);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.Label");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 3)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::_ttfConfig")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INSTANCE || ! instanceof_cclass(vm, 4, "cocos2d::TextHAlignment")) {
                break;
            }

            cocos2d::_ttfConfig arg0;
            cocos2d::_ttfConfig *ptr2 = nullptr; ok &= sqval_to_ttfconfig(vm, 2, ptr2); arg0 = *ptr2;
            if (!ok) { break; }
            std::string arg1;
            ok &= sqval_to_std_string(vm, 3, &arg1);
            if (!ok) { break; }
            cocos2d::TextHAlignment arg2;
            ok &= sqval_to_int32(vm, 4, (int *)&arg2);
            if (!ok) { break; }
            cocos2d::Label* ret = cocos2d::Label::createWithTTF(arg0, arg1, arg2);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.Label");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 4)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::_ttfConfig")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INSTANCE || ! instanceof_cclass(vm, 4, "cocos2d::TextHAlignment")) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INTEGER && sq_gettype(vm, 5) != OT_FLOAT) {
                break;
            }

            cocos2d::_ttfConfig arg0;
            cocos2d::_ttfConfig *ptr2 = nullptr; ok &= sqval_to_ttfconfig(vm, 2, ptr2); arg0 = *ptr2;
            if (!ok) { break; }
            std::string arg1;
            ok &= sqval_to_std_string(vm, 3, &arg1);
            if (!ok) { break; }
            cocos2d::TextHAlignment arg2;
            ok &= sqval_to_int32(vm, 4, (int *)&arg2);
            if (!ok) { break; }
            int arg3;
            ok &= sqval_to_int32(vm, 5, (int *)&arg3);
            if (!ok) { break; }
            cocos2d::Label* ret = cocos2d::Label::createWithTTF(arg0, arg1, arg2, arg3);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.Label");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 3)
        {

            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);
            if (!ok) { break; }
            std::string arg1;
            ok &= sqval_to_std_string(vm, 3, &arg1);
            if (!ok) { break; }
            float arg2;
            ok &= sqval_to_float(vm, 4, &arg2);
            if (!ok) { break; }
            cocos2d::Label* ret = cocos2d::Label::createWithTTF(arg0, arg1, arg2);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.Label");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 4)
        {

            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INSTANCE || ! instanceof_cclass(vm, 5, "cocos2d::Size")) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);
            if (!ok) { break; }
            std::string arg1;
            ok &= sqval_to_std_string(vm, 3, &arg1);
            if (!ok) { break; }
            float arg2;
            ok &= sqval_to_float(vm, 4, &arg2);
            if (!ok) { break; }
            cocos2d::Size arg3;
            cocos2d::Size* ptr5 = nullptr; ok &= sqval_to_size(vm, 5, ptr5); arg3 = *ptr5;
            if (!ok) { break; }
            cocos2d::Label* ret = cocos2d::Label::createWithTTF(arg0, arg1, arg2, arg3);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.Label");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 5)
        {

            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INSTANCE || ! instanceof_cclass(vm, 5, "cocos2d::Size")) {
                break;
            }
            if (sq_gettype(vm, 6) != OT_INSTANCE || ! instanceof_cclass(vm, 6, "cocos2d::TextHAlignment")) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);
            if (!ok) { break; }
            std::string arg1;
            ok &= sqval_to_std_string(vm, 3, &arg1);
            if (!ok) { break; }
            float arg2;
            ok &= sqval_to_float(vm, 4, &arg2);
            if (!ok) { break; }
            cocos2d::Size arg3;
            cocos2d::Size* ptr5 = nullptr; ok &= sqval_to_size(vm, 5, ptr5); arg3 = *ptr5;
            if (!ok) { break; }
            cocos2d::TextHAlignment arg4;
            ok &= sqval_to_int32(vm, 6, (int *)&arg4);
            if (!ok) { break; }
            cocos2d::Label* ret = cocos2d::Label::createWithTTF(arg0, arg1, arg2, arg3, arg4);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.Label");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 6)
        {

            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INSTANCE || ! instanceof_cclass(vm, 5, "cocos2d::Size")) {
                break;
            }
            if (sq_gettype(vm, 6) != OT_INSTANCE || ! instanceof_cclass(vm, 6, "cocos2d::TextHAlignment")) {
                break;
            }
            if (sq_gettype(vm, 7) != OT_INSTANCE || ! instanceof_cclass(vm, 7, "cocos2d::TextVAlignment")) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);
            if (!ok) { break; }
            std::string arg1;
            ok &= sqval_to_std_string(vm, 3, &arg1);
            if (!ok) { break; }
            float arg2;
            ok &= sqval_to_float(vm, 4, &arg2);
            if (!ok) { break; }
            cocos2d::Size arg3;
            cocos2d::Size* ptr5 = nullptr; ok &= sqval_to_size(vm, 5, ptr5); arg3 = *ptr5;
            if (!ok) { break; }
            cocos2d::TextHAlignment arg4;
            ok &= sqval_to_int32(vm, 6, (int *)&arg4);
            if (!ok) { break; }
            cocos2d::TextVAlignment arg5;
            ok &= sqval_to_int32(vm, 7, (int *)&arg5);
            if (!ok) { break; }
            cocos2d::Label* ret = cocos2d::Label::createWithTTF(arg0, arg1, arg2, arg3, arg4, arg5);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.Label");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d", "createWithTTF", (int)argc, 3);
    return 0;
}

SQInteger squirrel_cocos2dx_Label_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.Label", -1);
    return 1;
}

void squirrel_cocos2dx_Label_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::Label", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::SpriteBatchNode", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TextureProtocol", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::BlendProtocol", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::LabelProtocol", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_Label(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("Label"), -1);


    sq_pushstring(vm, _SC("SpriteBatchNode"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "isClipMarginEnabled", squirrel_cocos2dx_Label_isClipMarginEnabled);
    to_squirrel_function(vm, "enableShadow", squirrel_cocos2dx_Label_enableShadow);
    to_squirrel_function(vm, "setDimensions", squirrel_cocos2dx_Label_setDimensions);
    to_squirrel_function(vm, "getString", squirrel_cocos2dx_Label_getString);
    to_squirrel_function(vm, "getHeight", squirrel_cocos2dx_Label_getHeight);
    to_squirrel_function(vm, "disableEffect", squirrel_cocos2dx_Label_disableEffect);
    to_squirrel_function(vm, "setTTFConfig", squirrel_cocos2dx_Label_setTTFConfig);
    to_squirrel_function(vm, "getTextColor", squirrel_cocos2dx_Label_getTextColor);
    to_squirrel_function(vm, "setWidth", squirrel_cocos2dx_Label_setWidth);
    to_squirrel_function(vm, "getMaxLineWidth", squirrel_cocos2dx_Label_getMaxLineWidth);
    to_squirrel_function(vm, "getHorizontalAlignment", squirrel_cocos2dx_Label_getHorizontalAlignment);
    to_squirrel_function(vm, "setClipMarginEnabled", squirrel_cocos2dx_Label_setClipMarginEnabled);
    to_squirrel_function(vm, "setString", squirrel_cocos2dx_Label_setString);
    to_squirrel_function(vm, "setSystemFontName", squirrel_cocos2dx_Label_setSystemFontName);
    to_squirrel_function(vm, "setBMFontFilePath", squirrel_cocos2dx_Label_setBMFontFilePath);
    to_squirrel_function(vm, "getFontAtlas", squirrel_cocos2dx_Label_getFontAtlas);
    to_squirrel_function(vm, "setLineHeight", squirrel_cocos2dx_Label_setLineHeight);
    to_squirrel_function(vm, "setSystemFontSize", squirrel_cocos2dx_Label_setSystemFontSize);
    to_squirrel_function(vm, "updateContent", squirrel_cocos2dx_Label_updateContent);
    to_squirrel_function(vm, "getStringLength", squirrel_cocos2dx_Label_getStringLength);
    to_squirrel_function(vm, "setLineBreakWithoutSpace", squirrel_cocos2dx_Label_setLineBreakWithoutSpace);
    to_squirrel_function(vm, "getStringNumLines", squirrel_cocos2dx_Label_getStringNumLines);
    to_squirrel_function(vm, "enableOutline", squirrel_cocos2dx_Label_enableOutline);
    to_squirrel_function(vm, "getAdditionalKerning", squirrel_cocos2dx_Label_getAdditionalKerning);
    to_squirrel_function(vm, "setCharMap", squirrel_cocos2dx_Label_setCharMap);
    to_squirrel_function(vm, "getDimensions", squirrel_cocos2dx_Label_getDimensions);
    to_squirrel_function(vm, "setMaxLineWidth", squirrel_cocos2dx_Label_setMaxLineWidth);
    to_squirrel_function(vm, "getSystemFontName", squirrel_cocos2dx_Label_getSystemFontName);
    to_squirrel_function(vm, "setVerticalAlignment", squirrel_cocos2dx_Label_setVerticalAlignment);
    to_squirrel_function(vm, "getLineHeight", squirrel_cocos2dx_Label_getLineHeight);
    to_squirrel_function(vm, "getTTFConfig", squirrel_cocos2dx_Label_getTTFConfig);
    to_squirrel_function(vm, "getVerticalAlignment", squirrel_cocos2dx_Label_getVerticalAlignment);
    to_squirrel_function(vm, "setTextColor", squirrel_cocos2dx_Label_setTextColor);
    to_squirrel_function(vm, "setHeight", squirrel_cocos2dx_Label_setHeight);
    to_squirrel_function(vm, "getWidth", squirrel_cocos2dx_Label_getWidth);
    to_squirrel_function(vm, "enableGlow", squirrel_cocos2dx_Label_enableGlow);
    to_squirrel_function(vm, "getLetter", squirrel_cocos2dx_Label_getLetter);
    to_squirrel_function(vm, "setAdditionalKerning", squirrel_cocos2dx_Label_setAdditionalKerning);
    to_squirrel_function(vm, "getSystemFontSize", squirrel_cocos2dx_Label_getSystemFontSize);
    to_squirrel_function(vm, "getTextAlignment", squirrel_cocos2dx_Label_getTextAlignment);
    to_squirrel_function(vm, "getBMFontFilePath", squirrel_cocos2dx_Label_getBMFontFilePath);
    to_squirrel_function(vm, "setHorizontalAlignment", squirrel_cocos2dx_Label_setHorizontalAlignment);
    to_squirrel_function(vm, "setAlignment", squirrel_cocos2dx_Label_setAlignment);
    to_squirrel_function(vm, "requestSystemFontRefresh", squirrel_cocos2dx_Label_requestSystemFontRefresh);
    to_squirrel_function(vm, "createWithBMFont", squirrel_cocos2dx_Label_createWithBMFont_static, SQTrue);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_Label_create_static, SQTrue);
    to_squirrel_function(vm, "createWithCharMap", squirrel_cocos2dx_Label_createWithCharMap_static, SQTrue);
    to_squirrel_function(vm, "createWithSystemFont", squirrel_cocos2dx_Label_createWithSystemFont_static, SQTrue);
    to_squirrel_function(vm, "createWithTTF", squirrel_cocos2dx_Label_createWithTTF_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_Label_typeof_meta);

    to_squirrel_variable_integer(vm, "DistanceFieldFontSize", (SQInteger)cocos2d::Label::DistanceFieldFontSize, SQTrue);


    squirrel_cocos2dx_Label_push_c_class(vm);

    std::string typeName = typeid(cocos2d::Label).name();
    g_sqType[typeName] = "cc.Label";

    return 1;
}
SQInteger squirrel_cocos2dx_Application_openURL(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Application* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Application_openURL'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        bool ret = cobj->openURL(arg0);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "openURL", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Application_getTargetPlatform(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Application* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Application_getTargetPlatform'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        int ret = (int)cobj->getTargetPlatform();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getTargetPlatform", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Application_getCurrentLanguage(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Application* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Application_getCurrentLanguage'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        int ret = (int)cobj->getCurrentLanguage();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getCurrentLanguage", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Application_getCurrentLanguageCode(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Application* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Application_getCurrentLanguageCode'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const char* ret = cobj->getCurrentLanguageCode();
        sq_pushstring(vm, (const SQChar *)ret, -1);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getCurrentLanguageCode", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Application_setAnimationInterval(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Application* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Application_setAnimationInterval'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        double arg0;

        ok &= sqval_to_number(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setAnimationInterval(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setAnimationInterval", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Application_getInstance_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        cocos2d::Application* ret = cocos2d::Application::getInstance();
        object_to_sqval<cocos2d::Application>(vm, "cc.Application", (cocos2d::Application*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "getInstance", (int)argc, 0);
    return 0;
}

SQInteger squirrel_cocos2dx_Application_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.Application", -1);
    return 1;
}

void squirrel_cocos2dx_Application_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::Application", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_Application(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("Application"), -1);

    sq_newclass(vm, SQFalse);

    to_squirrel_function(vm, "openURL", squirrel_cocos2dx_Application_openURL);
    to_squirrel_function(vm, "getTargetPlatform", squirrel_cocos2dx_Application_getTargetPlatform);
    to_squirrel_function(vm, "getCurrentLanguage", squirrel_cocos2dx_Application_getCurrentLanguage);
    to_squirrel_function(vm, "getCurrentLanguageCode", squirrel_cocos2dx_Application_getCurrentLanguageCode);
    to_squirrel_function(vm, "setAnimationInterval", squirrel_cocos2dx_Application_setAnimationInterval);
    to_squirrel_function(vm, "getInstance", squirrel_cocos2dx_Application_getInstance_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_Application_typeof_meta);



    squirrel_cocos2dx_Application_push_c_class(vm);

    std::string typeName = typeid(cocos2d::Application).name();
    g_sqType[typeName] = "cc.Application";

    return 1;
}
SQInteger squirrel_cocos2dx_DelayTime_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        float arg0;
        ok &= sqval_to_float(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::DelayTime* ret = cocos2d::DelayTime::create(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.DelayTime");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_DelayTime_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.DelayTime", -1);
    return 1;
}

void squirrel_cocos2dx_DelayTime_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::DelayTime", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_DelayTime(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("DelayTime"), -1);


    sq_pushstring(vm, _SC("ActionInterval"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_DelayTime_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_DelayTime_typeof_meta);



    squirrel_cocos2dx_DelayTime_push_c_class(vm);

    std::string typeName = typeid(cocos2d::DelayTime).name();
    g_sqType[typeName] = "cc.DelayTime";

    return 1;
}
SQInteger squirrel_cocos2dx_LabelAtlas_setString(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::LabelAtlas* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_LabelAtlas_setString'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setString(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setString", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_LabelAtlas_initWithString(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::LabelAtlas* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_LabelAtlas_initWithString'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_STRING) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);

            if (!ok) { break; }
            std::string arg1;
            ok &= sqval_to_std_string(vm, 3, &arg1);

            if (!ok) { break; }
            bool ret = cobj->initWithString(arg0, arg1);
            sq_pushbool(vm, (SQBool)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 5) {
            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INTEGER && sq_gettype(vm, 5) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 6) != OT_INTEGER && sq_gettype(vm, 6) != OT_FLOAT) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);

            if (!ok) { break; }
            std::string arg1;
            ok &= sqval_to_std_string(vm, 3, &arg1);

            if (!ok) { break; }
            int arg2;
            ok &= sqval_to_int32(vm, 4, (int *)&arg2);

            if (!ok) { break; }
            int arg3;
            ok &= sqval_to_int32(vm, 5, (int *)&arg3);

            if (!ok) { break; }
            int arg4;
            ok &= sqval_to_int32(vm, 6, (int *)&arg4);

            if (!ok) { break; }
            bool ret = cobj->initWithString(arg0, arg1, arg2, arg3, arg4);
            sq_pushbool(vm, (SQBool)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 5) {
            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Texture2D")) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INTEGER && sq_gettype(vm, 5) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 6) != OT_INTEGER && sq_gettype(vm, 6) != OT_FLOAT) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);

            if (!ok) { break; }
            cocos2d::Texture2D* arg1;
            ok &= sqval_to_object<cocos2d::Texture2D>(vm, 3, &arg1);

            if (!ok) { break; }
            int arg2;
            ok &= sqval_to_int32(vm, 4, (int *)&arg2);

            if (!ok) { break; }
            int arg3;
            ok &= sqval_to_int32(vm, 5, (int *)&arg3);

            if (!ok) { break; }
            int arg4;
            ok &= sqval_to_int32(vm, 6, (int *)&arg4);

            if (!ok) { break; }
            bool ret = cobj->initWithString(arg0, arg1, arg2, arg3, arg4);
            sq_pushbool(vm, (SQBool)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "initWithString", (int)argc, 5);
    return 0;
}
SQInteger squirrel_cocos2dx_LabelAtlas_updateAtlasValues(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::LabelAtlas* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_LabelAtlas_updateAtlasValues'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->updateAtlasValues();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "updateAtlasValues", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_LabelAtlas_getString(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::LabelAtlas* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_LabelAtlas_getString'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const std::string& ret = cobj->getString();
        sq_pushstring(vm, (const SQChar *)ret.c_str(), -1);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getString", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_LabelAtlas_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 5)
        {

            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INTEGER && sq_gettype(vm, 5) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 6) != OT_INTEGER && sq_gettype(vm, 6) != OT_FLOAT) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);
            if (!ok) { break; }
            std::string arg1;
            ok &= sqval_to_std_string(vm, 3, &arg1);
            if (!ok) { break; }
            int arg2;
            ok &= sqval_to_int32(vm, 4, (int *)&arg2);
            if (!ok) { break; }
            int arg3;
            ok &= sqval_to_int32(vm, 5, (int *)&arg3);
            if (!ok) { break; }
            int arg4;
            ok &= sqval_to_int32(vm, 6, (int *)&arg4);
            if (!ok) { break; }
            cocos2d::LabelAtlas* ret = cocos2d::LabelAtlas::create(arg0, arg1, arg2, arg3, arg4);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.LabelAtlas");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 0)
        {


            cocos2d::LabelAtlas* ret = cocos2d::LabelAtlas::create();
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.LabelAtlas");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 2)
        {

            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_STRING) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);
            if (!ok) { break; }
            std::string arg1;
            ok &= sqval_to_std_string(vm, 3, &arg1);
            if (!ok) { break; }
            cocos2d::LabelAtlas* ret = cocos2d::LabelAtlas::create(arg0, arg1);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.LabelAtlas");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d", "create", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_LabelAtlas_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.LabelAtlas", -1);
    return 1;
}

void squirrel_cocos2dx_LabelAtlas_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::LabelAtlas", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::AtlasNode", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TextureProtocol", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::BlendProtocol", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::LabelProtocol", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_LabelAtlas(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("LabelAtlas"), -1);


    sq_pushstring(vm, _SC("AtlasNode"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "setString", squirrel_cocos2dx_LabelAtlas_setString);
    to_squirrel_function(vm, "initWithString", squirrel_cocos2dx_LabelAtlas_initWithString);
    to_squirrel_function(vm, "updateAtlasValues", squirrel_cocos2dx_LabelAtlas_updateAtlasValues);
    to_squirrel_function(vm, "getString", squirrel_cocos2dx_LabelAtlas_getString);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_LabelAtlas_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_LabelAtlas_typeof_meta);



    squirrel_cocos2dx_LabelAtlas_push_c_class(vm);

    std::string typeName = typeid(cocos2d::LabelAtlas).name();
    g_sqType[typeName] = "cc.LabelAtlas";

    return 1;
}
SQInteger squirrel_cocos2dx_Ref_release(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Ref* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Ref_release'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->release();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "release", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Ref_retain(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Ref* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Ref_retain'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->retain();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "retain", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Ref_getReferenceCount(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Ref* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Ref_getReferenceCount'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        unsigned int ret = cobj->getReferenceCount();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getReferenceCount", (int)argc, 0);
    return 0;
}

SQInteger squirrel_cocos2dx_Ref_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.Ref", -1);
    return 1;
}

void squirrel_cocos2dx_Ref_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_Ref(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("Ref"), -1);

    sq_newclass(vm, SQFalse);

    to_squirrel_function(vm, "release", squirrel_cocos2dx_Ref_release);
    to_squirrel_function(vm, "retain", squirrel_cocos2dx_Ref_retain);
    to_squirrel_function(vm, "getReferenceCount", squirrel_cocos2dx_Ref_getReferenceCount);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_Ref_typeof_meta);



    squirrel_cocos2dx_Ref_push_c_class(vm);

    std::string typeName = typeid(cocos2d::Ref).name();
    g_sqType[typeName] = "cc.Ref";

    return 1;
}
SQInteger squirrel_cocos2dx_ParticleSnow_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        cocos2d::ParticleSnow* ret = cocos2d::ParticleSnow::create();
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.ParticleSnow");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSnow_createWithTotalParticles_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if(!ok)
            return 0;
        cocos2d::ParticleSnow* ret = cocos2d::ParticleSnow::createWithTotalParticles(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.ParticleSnow");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "createWithTotalParticles", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_ParticleSnow_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.ParticleSnow", -1);
    return 1;
}

void squirrel_cocos2dx_ParticleSnow_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::ParticleSnow", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ParticleSystemQuad", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ParticleSystem", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TextureProtocol", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::BlendProtocol", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_ParticleSnow(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("ParticleSnow"), -1);


    sq_pushstring(vm, _SC("ParticleSystemQuad"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_ParticleSnow_create_static, SQTrue);
    to_squirrel_function(vm, "createWithTotalParticles", squirrel_cocos2dx_ParticleSnow_createWithTotalParticles_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_ParticleSnow_typeof_meta);



    squirrel_cocos2dx_ParticleSnow_push_c_class(vm);

    std::string typeName = typeid(cocos2d::ParticleSnow).name();
    g_sqType[typeName] = "cc.ParticleSnow";

    return 1;
}
SQInteger squirrel_cocos2dx_Scale9Sprite_disableCascadeColor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ui::Scale9Sprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Scale9Sprite_disableCascadeColor'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->disableCascadeColor();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "disableCascadeColor", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Scale9Sprite_updateWithSprite(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ui::Scale9Sprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Scale9Sprite_updateWithSprite'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 6) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Sprite")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Rect")) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_BOOL) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INSTANCE || ! instanceof_cclass(vm, 5, "cocos2d::Vec2")) {
                break;
            }
            if (sq_gettype(vm, 6) != OT_INSTANCE || ! instanceof_cclass(vm, 6, "cocos2d::Size")) {
                break;
            }
            if (sq_gettype(vm, 7) != OT_INSTANCE || ! instanceof_cclass(vm, 7, "cocos2d::Rect")) {
                break;
            }

            cocos2d::Sprite* arg0;
            ok &= sqval_to_object<cocos2d::Sprite>(vm, 2, &arg0);

            if (!ok) { break; }
            cocos2d::Rect arg1;
            cocos2d::Rect* ptr3 = nullptr; ok &= sqval_to_rect(vm, 3, ptr3); arg1 = *ptr3;

            if (!ok) { break; }
            bool arg2;
            ok &= sqval_to_boolean(vm, 4, &arg2);

            if (!ok) { break; }
            cocos2d::Vec2 arg3;
            cocos2d::Vec2* ptr5 = nullptr; ok &= sqval_to_vec2(vm, 5, ptr5); arg3 = *ptr5;

            if (!ok) { break; }
            cocos2d::Size arg4;
            cocos2d::Size* ptr6 = nullptr; ok &= sqval_to_size(vm, 6, ptr6); arg4 = *ptr6;

            if (!ok) { break; }
            cocos2d::Rect arg5;
            cocos2d::Rect* ptr7 = nullptr; ok &= sqval_to_rect(vm, 7, ptr7); arg5 = *ptr7;

            if (!ok) { break; }
            bool ret = cobj->updateWithSprite(arg0, arg1, arg2, arg3, arg4, arg5);
            sq_pushbool(vm, (SQBool)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 4) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Sprite")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Rect")) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_BOOL) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INSTANCE || ! instanceof_cclass(vm, 5, "cocos2d::Rect")) {
                break;
            }

            cocos2d::Sprite* arg0;
            ok &= sqval_to_object<cocos2d::Sprite>(vm, 2, &arg0);

            if (!ok) { break; }
            cocos2d::Rect arg1;
            cocos2d::Rect* ptr3 = nullptr; ok &= sqval_to_rect(vm, 3, ptr3); arg1 = *ptr3;

            if (!ok) { break; }
            bool arg2;
            ok &= sqval_to_boolean(vm, 4, &arg2);

            if (!ok) { break; }
            cocos2d::Rect arg3;
            cocos2d::Rect* ptr5 = nullptr; ok &= sqval_to_rect(vm, 5, ptr5); arg3 = *ptr5;

            if (!ok) { break; }
            bool ret = cobj->updateWithSprite(arg0, arg1, arg2, arg3);
            sq_pushbool(vm, (SQBool)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "updateWithSprite", (int)argc, 4);
    return 0;
}
SQInteger squirrel_cocos2dx_Scale9Sprite_isFlippedX(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ui::Scale9Sprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Scale9Sprite_isFlippedX'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isFlippedX();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isFlippedX", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Scale9Sprite_setFlippedY(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ui::Scale9Sprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Scale9Sprite_setFlippedY'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setFlippedY(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setFlippedY", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Scale9Sprite_setFlippedX(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ui::Scale9Sprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Scale9Sprite_setFlippedX'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setFlippedX(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setFlippedX", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Scale9Sprite_setScale9Enabled(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ui::Scale9Sprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Scale9Sprite_setScale9Enabled'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setScale9Enabled(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setScale9Enabled", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Scale9Sprite_disableCascadeOpacity(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ui::Scale9Sprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Scale9Sprite_disableCascadeOpacity'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->disableCascadeOpacity();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "disableCascadeOpacity", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Scale9Sprite_setInsetBottom(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ui::Scale9Sprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Scale9Sprite_setInsetBottom'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setInsetBottom(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setInsetBottom", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Scale9Sprite_initWithSpriteFrameName(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ui::Scale9Sprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Scale9Sprite_initWithSpriteFrameName'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);

            if (!ok) { break; }
            bool ret = cobj->initWithSpriteFrameName(arg0);
            sq_pushbool(vm, (SQBool)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Rect")) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);

            if (!ok) { break; }
            cocos2d::Rect arg1;
            cocos2d::Rect* ptr3 = nullptr; ok &= sqval_to_rect(vm, 3, ptr3); arg1 = *ptr3;

            if (!ok) { break; }
            bool ret = cobj->initWithSpriteFrameName(arg0, arg1);
            sq_pushbool(vm, (SQBool)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "initWithSpriteFrameName", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_Scale9Sprite_getSprite(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ui::Scale9Sprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Scale9Sprite_getSprite'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Sprite* ret = cobj->getSprite();
        object_to_sqval<cocos2d::Sprite>(vm, "cc.Sprite", (cocos2d::Sprite*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getSprite", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Scale9Sprite_setInsetTop(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ui::Scale9Sprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Scale9Sprite_setInsetTop'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setInsetTop(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setInsetTop", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Scale9Sprite_init(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ui::Scale9Sprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Scale9Sprite_init'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 4) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Sprite")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Rect")) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_BOOL) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INSTANCE || ! instanceof_cclass(vm, 5, "cocos2d::Rect")) {
                break;
            }

            cocos2d::Sprite* arg0;
            ok &= sqval_to_object<cocos2d::Sprite>(vm, 2, &arg0);

            if (!ok) { break; }
            cocos2d::Rect arg1;
            cocos2d::Rect* ptr3 = nullptr; ok &= sqval_to_rect(vm, 3, ptr3); arg1 = *ptr3;

            if (!ok) { break; }
            bool arg2;
            ok &= sqval_to_boolean(vm, 4, &arg2);

            if (!ok) { break; }
            cocos2d::Rect arg3;
            cocos2d::Rect* ptr5 = nullptr; ok &= sqval_to_rect(vm, 5, ptr5); arg3 = *ptr5;

            if (!ok) { break; }
            bool ret = cobj->init(arg0, arg1, arg2, arg3);
            sq_pushbool(vm, (SQBool)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 0) {

            bool ret = cobj->init();
            sq_pushbool(vm, (SQBool)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 3) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Sprite")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Rect")) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INSTANCE || ! instanceof_cclass(vm, 4, "cocos2d::Rect")) {
                break;
            }

            cocos2d::Sprite* arg0;
            ok &= sqval_to_object<cocos2d::Sprite>(vm, 2, &arg0);

            if (!ok) { break; }
            cocos2d::Rect arg1;
            cocos2d::Rect* ptr3 = nullptr; ok &= sqval_to_rect(vm, 3, ptr3); arg1 = *ptr3;

            if (!ok) { break; }
            cocos2d::Rect arg2;
            cocos2d::Rect* ptr4 = nullptr; ok &= sqval_to_rect(vm, 4, ptr4); arg2 = *ptr4;

            if (!ok) { break; }
            bool ret = cobj->init(arg0, arg1, arg2);
            sq_pushbool(vm, (SQBool)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 6) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Sprite")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Rect")) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_BOOL) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INSTANCE || ! instanceof_cclass(vm, 5, "cocos2d::Vec2")) {
                break;
            }
            if (sq_gettype(vm, 6) != OT_INSTANCE || ! instanceof_cclass(vm, 6, "cocos2d::Size")) {
                break;
            }
            if (sq_gettype(vm, 7) != OT_INSTANCE || ! instanceof_cclass(vm, 7, "cocos2d::Rect")) {
                break;
            }

            cocos2d::Sprite* arg0;
            ok &= sqval_to_object<cocos2d::Sprite>(vm, 2, &arg0);

            if (!ok) { break; }
            cocos2d::Rect arg1;
            cocos2d::Rect* ptr3 = nullptr; ok &= sqval_to_rect(vm, 3, ptr3); arg1 = *ptr3;

            if (!ok) { break; }
            bool arg2;
            ok &= sqval_to_boolean(vm, 4, &arg2);

            if (!ok) { break; }
            cocos2d::Vec2 arg3;
            cocos2d::Vec2* ptr5 = nullptr; ok &= sqval_to_vec2(vm, 5, ptr5); arg3 = *ptr5;

            if (!ok) { break; }
            cocos2d::Size arg4;
            cocos2d::Size* ptr6 = nullptr; ok &= sqval_to_size(vm, 6, ptr6); arg4 = *ptr6;

            if (!ok) { break; }
            cocos2d::Rect arg5;
            cocos2d::Rect* ptr7 = nullptr; ok &= sqval_to_rect(vm, 7, ptr7); arg5 = *ptr7;

            if (!ok) { break; }
            bool ret = cobj->init(arg0, arg1, arg2, arg3, arg4, arg5);
            sq_pushbool(vm, (SQBool)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "init", (int)argc, 6);
    return 0;
}
SQInteger squirrel_cocos2dx_Scale9Sprite_setPreferredSize(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ui::Scale9Sprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Scale9Sprite_setPreferredSize'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Size arg0;

        cocos2d::Size* ptr2 = nullptr; ok &= sqval_to_size(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->setPreferredSize(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setPreferredSize", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Scale9Sprite_getInsetRight(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ui::Scale9Sprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Scale9Sprite_getInsetRight'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getInsetRight();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getInsetRight", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Scale9Sprite_setSpriteFrame(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ui::Scale9Sprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Scale9Sprite_setSpriteFrame'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::SpriteFrame* arg0;

        ok &= sqval_to_object<cocos2d::SpriteFrame>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setSpriteFrame(arg0);
        return 0;
    }
    if (argc == 2) 
    {
        cocos2d::SpriteFrame* arg0;
        cocos2d::Rect arg1;

        ok &= sqval_to_object<cocos2d::SpriteFrame>(vm, 2, &arg0);

        cocos2d::Rect* ptr3 = nullptr; ok &= sqval_to_rect(vm, 3, ptr3); arg1 = *ptr3;
        if (!ok)
            return 0;
        cobj->setSpriteFrame(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setSpriteFrame", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Scale9Sprite_getInsetBottom(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ui::Scale9Sprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Scale9Sprite_getInsetBottom'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getInsetBottom();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getInsetBottom", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Scale9Sprite_resizableSpriteWithCapInsets(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ui::Scale9Sprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Scale9Sprite_resizableSpriteWithCapInsets'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Rect arg0;

        cocos2d::Rect* ptr2 = nullptr; ok &= sqval_to_rect(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cocos2d::ui::Scale9Sprite* ret = cobj->resizableSpriteWithCapInsets(arg0);
        object_to_sqval<cocos2d::ui::Scale9Sprite>(vm, "ccui.Scale9Sprite", (cocos2d::ui::Scale9Sprite*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "resizableSpriteWithCapInsets", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Scale9Sprite_isScale9Enabled(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ui::Scale9Sprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Scale9Sprite_isScale9Enabled'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isScale9Enabled();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isScale9Enabled", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Scale9Sprite_getCapInsets(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ui::Scale9Sprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Scale9Sprite_getCapInsets'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Rect ret = cobj->getCapInsets();
        rect_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getCapInsets", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Scale9Sprite_getOriginalSize(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ui::Scale9Sprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Scale9Sprite_getOriginalSize'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Size ret = cobj->getOriginalSize();
        size_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getOriginalSize", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Scale9Sprite_initWithFile(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ui::Scale9Sprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Scale9Sprite_initWithFile'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Rect")) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);

            if (!ok) { break; }
            cocos2d::Rect arg1;
            cocos2d::Rect* ptr3 = nullptr; ok &= sqval_to_rect(vm, 3, ptr3); arg1 = *ptr3;

            if (!ok) { break; }
            bool ret = cobj->initWithFile(arg0, arg1);
            sq_pushbool(vm, (SQBool)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 3) {
            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Rect")) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INSTANCE || ! instanceof_cclass(vm, 4, "cocos2d::Rect")) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);

            if (!ok) { break; }
            cocos2d::Rect arg1;
            cocos2d::Rect* ptr3 = nullptr; ok &= sqval_to_rect(vm, 3, ptr3); arg1 = *ptr3;

            if (!ok) { break; }
            cocos2d::Rect arg2;
            cocos2d::Rect* ptr4 = nullptr; ok &= sqval_to_rect(vm, 4, ptr4); arg2 = *ptr4;

            if (!ok) { break; }
            bool ret = cobj->initWithFile(arg0, arg1, arg2);
            sq_pushbool(vm, (SQBool)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Rect")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_STRING) {
                break;
            }

            cocos2d::Rect arg0;
            cocos2d::Rect* ptr2 = nullptr; ok &= sqval_to_rect(vm, 2, ptr2); arg0 = *ptr2;

            if (!ok) { break; }
            std::string arg1;
            ok &= sqval_to_std_string(vm, 3, &arg1);

            if (!ok) { break; }
            bool ret = cobj->initWithFile(arg0, arg1);
            sq_pushbool(vm, (SQBool)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);

            if (!ok) { break; }
            bool ret = cobj->initWithFile(arg0);
            sq_pushbool(vm, (SQBool)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "initWithFile", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Scale9Sprite_getInsetTop(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ui::Scale9Sprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Scale9Sprite_getInsetTop'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getInsetTop();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getInsetTop", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Scale9Sprite_setInsetLeft(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ui::Scale9Sprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Scale9Sprite_setInsetLeft'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setInsetLeft(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setInsetLeft", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Scale9Sprite_initWithSpriteFrame(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ui::Scale9Sprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Scale9Sprite_initWithSpriteFrame'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::SpriteFrame")) {
                break;
            }

            cocos2d::SpriteFrame* arg0;
            ok &= sqval_to_object<cocos2d::SpriteFrame>(vm, 2, &arg0);

            if (!ok) { break; }
            bool ret = cobj->initWithSpriteFrame(arg0);
            sq_pushbool(vm, (SQBool)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::SpriteFrame")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Rect")) {
                break;
            }

            cocos2d::SpriteFrame* arg0;
            ok &= sqval_to_object<cocos2d::SpriteFrame>(vm, 2, &arg0);

            if (!ok) { break; }
            cocos2d::Rect arg1;
            cocos2d::Rect* ptr3 = nullptr; ok &= sqval_to_rect(vm, 3, ptr3); arg1 = *ptr3;

            if (!ok) { break; }
            bool ret = cobj->initWithSpriteFrame(arg0, arg1);
            sq_pushbool(vm, (SQBool)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "initWithSpriteFrame", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_Scale9Sprite_getPreferredSize(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ui::Scale9Sprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Scale9Sprite_getPreferredSize'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Size ret = cobj->getPreferredSize();
        size_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getPreferredSize", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Scale9Sprite_setCapInsets(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ui::Scale9Sprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Scale9Sprite_setCapInsets'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Rect arg0;

        cocos2d::Rect* ptr2 = nullptr; ok &= sqval_to_rect(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->setCapInsets(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setCapInsets", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Scale9Sprite_isFlippedY(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ui::Scale9Sprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Scale9Sprite_isFlippedY'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isFlippedY();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isFlippedY", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Scale9Sprite_getInsetLeft(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ui::Scale9Sprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Scale9Sprite_getInsetLeft'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getInsetLeft();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getInsetLeft", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Scale9Sprite_setInsetRight(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ui::Scale9Sprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Scale9Sprite_setInsetRight'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setInsetRight(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setInsetRight", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Scale9Sprite_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 3)
        {

            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Rect")) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INSTANCE || ! instanceof_cclass(vm, 4, "cocos2d::Rect")) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::Rect arg1;
            cocos2d::Rect* ptr3 = nullptr; ok &= sqval_to_rect(vm, 3, ptr3); arg1 = *ptr3;
            if (!ok) { break; }
            cocos2d::Rect arg2;
            cocos2d::Rect* ptr4 = nullptr; ok &= sqval_to_rect(vm, 4, ptr4); arg2 = *ptr4;
            if (!ok) { break; }
            cocos2d::ui::Scale9Sprite* ret = cocos2d::ui::Scale9Sprite::create(arg0, arg1, arg2);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "ccui.Scale9Sprite");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 0)
        {


            cocos2d::ui::Scale9Sprite* ret = cocos2d::ui::Scale9Sprite::create();
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "ccui.Scale9Sprite");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 2)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Rect")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_STRING) {
                break;
            }

            cocos2d::Rect arg0;
            cocos2d::Rect* ptr2 = nullptr; ok &= sqval_to_rect(vm, 2, ptr2); arg0 = *ptr2;
            if (!ok) { break; }
            std::string arg1;
            ok &= sqval_to_std_string(vm, 3, &arg1);
            if (!ok) { break; }
            cocos2d::ui::Scale9Sprite* ret = cocos2d::ui::Scale9Sprite::create(arg0, arg1);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "ccui.Scale9Sprite");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 2)
        {

            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Rect")) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::Rect arg1;
            cocos2d::Rect* ptr3 = nullptr; ok &= sqval_to_rect(vm, 3, ptr3); arg1 = *ptr3;
            if (!ok) { break; }
            cocos2d::ui::Scale9Sprite* ret = cocos2d::ui::Scale9Sprite::create(arg0, arg1);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "ccui.Scale9Sprite");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 1)
        {

            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::ui::Scale9Sprite* ret = cocos2d::ui::Scale9Sprite::create(arg0);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "ccui.Scale9Sprite");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d", "create", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Scale9Sprite_createWithSpriteFrameName_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 2)
        {

            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Rect")) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::Rect arg1;
            cocos2d::Rect* ptr3 = nullptr; ok &= sqval_to_rect(vm, 3, ptr3); arg1 = *ptr3;
            if (!ok) { break; }
            cocos2d::ui::Scale9Sprite* ret = cocos2d::ui::Scale9Sprite::createWithSpriteFrameName(arg0, arg1);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "ccui.Scale9Sprite");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 1)
        {

            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::ui::Scale9Sprite* ret = cocos2d::ui::Scale9Sprite::createWithSpriteFrameName(arg0);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "ccui.Scale9Sprite");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d", "createWithSpriteFrameName", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Scale9Sprite_createWithSpriteFrame_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 2)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::SpriteFrame")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Rect")) {
                break;
            }

            cocos2d::SpriteFrame* arg0;
            ok &= sqval_to_object<cocos2d::SpriteFrame>(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::Rect arg1;
            cocos2d::Rect* ptr3 = nullptr; ok &= sqval_to_rect(vm, 3, ptr3); arg1 = *ptr3;
            if (!ok) { break; }
            cocos2d::ui::Scale9Sprite* ret = cocos2d::ui::Scale9Sprite::createWithSpriteFrame(arg0, arg1);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "ccui.Scale9Sprite");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 1)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::SpriteFrame")) {
                break;
            }

            cocos2d::SpriteFrame* arg0;
            ok &= sqval_to_object<cocos2d::SpriteFrame>(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::ui::Scale9Sprite* ret = cocos2d::ui::Scale9Sprite::createWithSpriteFrame(arg0);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "ccui.Scale9Sprite");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d", "createWithSpriteFrame", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Scale9Sprite_constructor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ui::Scale9Sprite* cobj = nullptr;
    bool ok  = true;

    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj = new cocos2d::ui::Scale9Sprite();
        sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
        cobj->retain();
        sq_setreleasehook(vm, 1, squirrel_releasehook_Ref);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "Scale9Sprite", (int)argc, 0);
    return 0;
}


SQInteger squirrel_cocos2dx_Scale9Sprite_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "ccui.Scale9Sprite", -1);
    return 1;
}

void squirrel_cocos2dx_Scale9Sprite_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::ui::Scale9Sprite", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_Scale9Sprite(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("Scale9Sprite"), -1);


    sq_pushstring(vm, _SC("Node"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "constructor", squirrel_cocos2dx_Scale9Sprite_constructor);
    to_squirrel_function(vm, "disableCascadeColor", squirrel_cocos2dx_Scale9Sprite_disableCascadeColor);
    to_squirrel_function(vm, "updateWithSprite", squirrel_cocos2dx_Scale9Sprite_updateWithSprite);
    to_squirrel_function(vm, "isFlippedX", squirrel_cocos2dx_Scale9Sprite_isFlippedX);
    to_squirrel_function(vm, "setFlippedY", squirrel_cocos2dx_Scale9Sprite_setFlippedY);
    to_squirrel_function(vm, "setFlippedX", squirrel_cocos2dx_Scale9Sprite_setFlippedX);
    to_squirrel_function(vm, "setScale9Enabled", squirrel_cocos2dx_Scale9Sprite_setScale9Enabled);
    to_squirrel_function(vm, "disableCascadeOpacity", squirrel_cocos2dx_Scale9Sprite_disableCascadeOpacity);
    to_squirrel_function(vm, "setInsetBottom", squirrel_cocos2dx_Scale9Sprite_setInsetBottom);
    to_squirrel_function(vm, "initWithSpriteFrameName", squirrel_cocos2dx_Scale9Sprite_initWithSpriteFrameName);
    to_squirrel_function(vm, "getSprite", squirrel_cocos2dx_Scale9Sprite_getSprite);
    to_squirrel_function(vm, "setInsetTop", squirrel_cocos2dx_Scale9Sprite_setInsetTop);
    to_squirrel_function(vm, "init", squirrel_cocos2dx_Scale9Sprite_init);
    to_squirrel_function(vm, "setPreferredSize", squirrel_cocos2dx_Scale9Sprite_setPreferredSize);
    to_squirrel_function(vm, "getInsetRight", squirrel_cocos2dx_Scale9Sprite_getInsetRight);
    to_squirrel_function(vm, "setSpriteFrame", squirrel_cocos2dx_Scale9Sprite_setSpriteFrame);
    to_squirrel_function(vm, "getInsetBottom", squirrel_cocos2dx_Scale9Sprite_getInsetBottom);
    to_squirrel_function(vm, "resizableSpriteWithCapInsets", squirrel_cocos2dx_Scale9Sprite_resizableSpriteWithCapInsets);
    to_squirrel_function(vm, "isScale9Enabled", squirrel_cocos2dx_Scale9Sprite_isScale9Enabled);
    to_squirrel_function(vm, "getCapInsets", squirrel_cocos2dx_Scale9Sprite_getCapInsets);
    to_squirrel_function(vm, "getOriginalSize", squirrel_cocos2dx_Scale9Sprite_getOriginalSize);
    to_squirrel_function(vm, "initWithFile", squirrel_cocos2dx_Scale9Sprite_initWithFile);
    to_squirrel_function(vm, "getInsetTop", squirrel_cocos2dx_Scale9Sprite_getInsetTop);
    to_squirrel_function(vm, "setInsetLeft", squirrel_cocos2dx_Scale9Sprite_setInsetLeft);
    to_squirrel_function(vm, "initWithSpriteFrame", squirrel_cocos2dx_Scale9Sprite_initWithSpriteFrame);
    to_squirrel_function(vm, "getPreferredSize", squirrel_cocos2dx_Scale9Sprite_getPreferredSize);
    to_squirrel_function(vm, "setCapInsets", squirrel_cocos2dx_Scale9Sprite_setCapInsets);
    to_squirrel_function(vm, "isFlippedY", squirrel_cocos2dx_Scale9Sprite_isFlippedY);
    to_squirrel_function(vm, "getInsetLeft", squirrel_cocos2dx_Scale9Sprite_getInsetLeft);
    to_squirrel_function(vm, "setInsetRight", squirrel_cocos2dx_Scale9Sprite_setInsetRight);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_Scale9Sprite_create_static, SQTrue);
    to_squirrel_function(vm, "createWithSpriteFrameName", squirrel_cocos2dx_Scale9Sprite_createWithSpriteFrameName_static, SQTrue);
    to_squirrel_function(vm, "createWithSpriteFrame", squirrel_cocos2dx_Scale9Sprite_createWithSpriteFrame_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_Scale9Sprite_typeof_meta);



    squirrel_cocos2dx_Scale9Sprite_push_c_class(vm);

    std::string typeName = typeid(cocos2d::ui::Scale9Sprite).name();
    g_sqType[typeName] = "ccui.Scale9Sprite";

    return 1;
}
SQInteger squirrel_cocos2dx_FadeOutTRTiles_turnOnTile(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::FadeOutTRTiles* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_FadeOutTRTiles_turnOnTile'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec2 arg0;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->turnOnTile(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "turnOnTile", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_FadeOutTRTiles_turnOffTile(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::FadeOutTRTiles* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_FadeOutTRTiles_turnOffTile'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec2 arg0;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->turnOffTile(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "turnOffTile", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_FadeOutTRTiles_transformTile(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::FadeOutTRTiles* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_FadeOutTRTiles_transformTile'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        cocos2d::Vec2 arg0;
        float arg1;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;

        ok &= sqval_to_float(vm, 3, &arg1);
        if (!ok)
            return 0;
        cobj->transformTile(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "transformTile", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_FadeOutTRTiles_testFunc(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::FadeOutTRTiles* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_FadeOutTRTiles_testFunc'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        cocos2d::Size arg0;
        float arg1;

        cocos2d::Size* ptr2 = nullptr; ok &= sqval_to_size(vm, 2, ptr2); arg0 = *ptr2;

        ok &= sqval_to_float(vm, 3, &arg1);
        if (!ok)
            return 0;
        float ret = cobj->testFunc(arg0, arg1);
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "testFunc", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_FadeOutTRTiles_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        float arg0;
        cocos2d::Size arg1;
        ok &= sqval_to_float(vm, 2, &arg0);
        cocos2d::Size* ptr3 = nullptr; ok &= sqval_to_size(vm, 3, ptr3); arg1 = *ptr3;
        if(!ok)
            return 0;
        cocos2d::FadeOutTRTiles* ret = cocos2d::FadeOutTRTiles::create(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.FadeOutTRTiles");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_FadeOutTRTiles_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.FadeOutTRTiles", -1);
    return 1;
}

void squirrel_cocos2dx_FadeOutTRTiles_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::FadeOutTRTiles", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::TiledGrid3DAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::GridAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_FadeOutTRTiles(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("FadeOutTRTiles"), -1);


    sq_pushstring(vm, _SC("TiledGrid3DAction"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "turnOnTile", squirrel_cocos2dx_FadeOutTRTiles_turnOnTile);
    to_squirrel_function(vm, "turnOffTile", squirrel_cocos2dx_FadeOutTRTiles_turnOffTile);
    to_squirrel_function(vm, "transformTile", squirrel_cocos2dx_FadeOutTRTiles_transformTile);
    to_squirrel_function(vm, "testFunc", squirrel_cocos2dx_FadeOutTRTiles_testFunc);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_FadeOutTRTiles_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_FadeOutTRTiles_typeof_meta);



    squirrel_cocos2dx_FadeOutTRTiles_push_c_class(vm);

    std::string typeName = typeid(cocos2d::FadeOutTRTiles).name();
    g_sqType[typeName] = "cc.FadeOutTRTiles";

    return 1;
}
SQInteger squirrel_cocos2dx_EaseElasticIn_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 1)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::ActionInterval")) {
                break;
            }

            cocos2d::ActionInterval* arg0;
            ok &= sqval_to_object<cocos2d::ActionInterval>(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::EaseElasticIn* ret = cocos2d::EaseElasticIn::create(arg0);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.EaseElasticIn");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 2)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::ActionInterval")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }

            cocos2d::ActionInterval* arg0;
            ok &= sqval_to_object<cocos2d::ActionInterval>(vm, 2, &arg0);
            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);
            if (!ok) { break; }
            cocos2d::EaseElasticIn* ret = cocos2d::EaseElasticIn::create(arg0, arg1);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.EaseElasticIn");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d", "create", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_EaseElasticIn_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.EaseElasticIn", -1);
    return 1;
}

void squirrel_cocos2dx_EaseElasticIn_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::EaseElasticIn", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::EaseElastic", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionEase", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_EaseElasticIn(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("EaseElasticIn"), -1);


    sq_pushstring(vm, _SC("EaseElastic"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_EaseElasticIn_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_EaseElasticIn_typeof_meta);



    squirrel_cocos2dx_EaseElasticIn_push_c_class(vm);

    std::string typeName = typeid(cocos2d::EaseElasticIn).name();
    g_sqType[typeName] = "cc.EaseElasticIn";

    return 1;
}
SQInteger squirrel_cocos2dx_EaseCircleActionInOut_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        cocos2d::ActionInterval* arg0;
        ok &= sqval_to_object<cocos2d::ActionInterval>(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::EaseCircleActionInOut* ret = cocos2d::EaseCircleActionInOut::create(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.EaseCircleActionInOut");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_EaseCircleActionInOut_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.EaseCircleActionInOut", -1);
    return 1;
}

void squirrel_cocos2dx_EaseCircleActionInOut_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::EaseCircleActionInOut", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionEase", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_EaseCircleActionInOut(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("EaseCircleActionInOut"), -1);


    sq_pushstring(vm, _SC("ActionEase"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_EaseCircleActionInOut_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_EaseCircleActionInOut_typeof_meta);



    squirrel_cocos2dx_EaseCircleActionInOut_push_c_class(vm);

    std::string typeName = typeid(cocos2d::EaseCircleActionInOut).name();
    g_sqType[typeName] = "cc.EaseCircleActionInOut";

    return 1;
}
SQInteger squirrel_cocos2dx_MenuItemSprite_setEnabled(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::MenuItemSprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_MenuItemSprite_setEnabled'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setEnabled(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setEnabled", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_MenuItemSprite_selected(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::MenuItemSprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_MenuItemSprite_selected'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->selected();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "selected", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_MenuItemSprite_setNormalImage(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::MenuItemSprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_MenuItemSprite_setNormalImage'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Node* arg0;

        ok &= sqval_to_object<cocos2d::Node>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setNormalImage(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setNormalImage", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_MenuItemSprite_setDisabledImage(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::MenuItemSprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_MenuItemSprite_setDisabledImage'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Node* arg0;

        ok &= sqval_to_object<cocos2d::Node>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setDisabledImage(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setDisabledImage", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_MenuItemSprite_setSelectedImage(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::MenuItemSprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_MenuItemSprite_setSelectedImage'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Node* arg0;

        ok &= sqval_to_object<cocos2d::Node>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setSelectedImage(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setSelectedImage", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_MenuItemSprite_getDisabledImage(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::MenuItemSprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_MenuItemSprite_getDisabledImage'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Node* ret = cobj->getDisabledImage();
        object_to_sqval<cocos2d::Node>(vm, "cc.Node", (cocos2d::Node*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getDisabledImage", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_MenuItemSprite_getSelectedImage(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::MenuItemSprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_MenuItemSprite_getSelectedImage'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Node* ret = cobj->getSelectedImage();
        object_to_sqval<cocos2d::Node>(vm, "cc.Node", (cocos2d::Node*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getSelectedImage", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_MenuItemSprite_getNormalImage(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::MenuItemSprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_MenuItemSprite_getNormalImage'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Node* ret = cobj->getNormalImage();
        object_to_sqval<cocos2d::Node>(vm, "cc.Node", (cocos2d::Node*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getNormalImage", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_MenuItemSprite_unselected(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::MenuItemSprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_MenuItemSprite_unselected'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->unselected();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "unselected", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_MenuItemSprite_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 3)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Node")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Node")) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_CLOSURE) {
                break;
            }
            HSQOBJECT callback4;
            sq_getstackobj(vm, 4, &callback4);

            cocos2d::Node* arg0;
            ok &= sqval_to_object<cocos2d::Node>(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::Node* arg1;
            ok &= sqval_to_object<cocos2d::Node>(vm, 3, &arg1);
            if (!ok) { break; }
            std::function<void (cocos2d::Ref *)> arg2;
            do {
			    // Lambda binding for squirrel
			    arg2 = [vm, callback4](cocos2d::Ref* larg0) -> void {
			        if (sq_getrefcount(vm, (HSQOBJECT *)&callback4) > 0) {
			            sq_pushobject(vm, callback4);
			            sq_push(vm, 1);
			            object_to_sqval<cocos2d::Ref>(vm, "cc.Ref", (cocos2d::Ref*)larg0);
			            sq_call(vm, 2, SQFalse, SQTrue);
			            sq_poptop(vm);
			        }
			    };
			} while(0);
            if (!ok) { break; }
            cocos2d::MenuItemSprite* ret = cocos2d::MenuItemSprite::create(arg0, arg1, arg2);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.MenuItemSprite");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            _SquirrelObject *sqobj = (_SquirrelObject *)ret->_scriptObject;
            sqobj->addClosure("callback4", callback4);
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 2)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Node")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Node")) {
                break;
            }

            cocos2d::Node* arg0;
            ok &= sqval_to_object<cocos2d::Node>(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::Node* arg1;
            ok &= sqval_to_object<cocos2d::Node>(vm, 3, &arg1);
            if (!ok) { break; }
            cocos2d::MenuItemSprite* ret = cocos2d::MenuItemSprite::create(arg0, arg1);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.MenuItemSprite");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 3)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Node")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Node")) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INSTANCE || ! instanceof_cclass(vm, 4, "cocos2d::Node")) {
                break;
            }

            cocos2d::Node* arg0;
            ok &= sqval_to_object<cocos2d::Node>(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::Node* arg1;
            ok &= sqval_to_object<cocos2d::Node>(vm, 3, &arg1);
            if (!ok) { break; }
            cocos2d::Node* arg2;
            ok &= sqval_to_object<cocos2d::Node>(vm, 4, &arg2);
            if (!ok) { break; }
            cocos2d::MenuItemSprite* ret = cocos2d::MenuItemSprite::create(arg0, arg1, arg2);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.MenuItemSprite");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 4)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Node")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Node")) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INSTANCE || ! instanceof_cclass(vm, 4, "cocos2d::Node")) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_CLOSURE) {
                break;
            }
            HSQOBJECT callback5;
            sq_getstackobj(vm, 5, &callback5);

            cocos2d::Node* arg0;
            ok &= sqval_to_object<cocos2d::Node>(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::Node* arg1;
            ok &= sqval_to_object<cocos2d::Node>(vm, 3, &arg1);
            if (!ok) { break; }
            cocos2d::Node* arg2;
            ok &= sqval_to_object<cocos2d::Node>(vm, 4, &arg2);
            if (!ok) { break; }
            std::function<void (cocos2d::Ref *)> arg3;
            do {
			    // Lambda binding for squirrel
			    arg3 = [vm, callback5](cocos2d::Ref* larg0) -> void {
			        if (sq_getrefcount(vm, (HSQOBJECT *)&callback5) > 0) {
			            sq_pushobject(vm, callback5);
			            sq_push(vm, 1);
			            object_to_sqval<cocos2d::Ref>(vm, "cc.Ref", (cocos2d::Ref*)larg0);
			            sq_call(vm, 2, SQFalse, SQTrue);
			            sq_poptop(vm);
			        }
			    };
			} while(0);
            if (!ok) { break; }
            cocos2d::MenuItemSprite* ret = cocos2d::MenuItemSprite::create(arg0, arg1, arg2, arg3);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.MenuItemSprite");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            _SquirrelObject *sqobj = (_SquirrelObject *)ret->_scriptObject;
            sqobj->addClosure("callback5", callback5);
            return 1;
        }
    } while (0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d", "create", (int)argc, 4);
    return 0;
}

SQInteger squirrel_cocos2dx_MenuItemSprite_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.MenuItemSprite", -1);
    return 1;
}

void squirrel_cocos2dx_MenuItemSprite_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::MenuItemSprite", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::MenuItem", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_MenuItemSprite(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("MenuItemSprite"), -1);


    sq_pushstring(vm, _SC("MenuItem"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "setEnabled", squirrel_cocos2dx_MenuItemSprite_setEnabled);
    to_squirrel_function(vm, "selected", squirrel_cocos2dx_MenuItemSprite_selected);
    to_squirrel_function(vm, "setNormalImage", squirrel_cocos2dx_MenuItemSprite_setNormalImage);
    to_squirrel_function(vm, "setDisabledImage", squirrel_cocos2dx_MenuItemSprite_setDisabledImage);
    to_squirrel_function(vm, "setSelectedImage", squirrel_cocos2dx_MenuItemSprite_setSelectedImage);
    to_squirrel_function(vm, "getDisabledImage", squirrel_cocos2dx_MenuItemSprite_getDisabledImage);
    to_squirrel_function(vm, "getSelectedImage", squirrel_cocos2dx_MenuItemSprite_getSelectedImage);
    to_squirrel_function(vm, "getNormalImage", squirrel_cocos2dx_MenuItemSprite_getNormalImage);
    to_squirrel_function(vm, "unselected", squirrel_cocos2dx_MenuItemSprite_unselected);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_MenuItemSprite_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_MenuItemSprite_typeof_meta);



    squirrel_cocos2dx_MenuItemSprite_push_c_class(vm);

    std::string typeName = typeid(cocos2d::MenuItemSprite).name();
    g_sqType[typeName] = "cc.MenuItemSprite";

    return 1;
}
SQInteger squirrel_cocos2dx_Animation3DData_resetData(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Animation3DData* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Animation3DData_resetData'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->resetData();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "resetData", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Animation3DData_constructor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Animation3DData* cobj = nullptr;
    bool ok  = true;

    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj = new cocos2d::Animation3DData();
        sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
        sq_setreleasehook(vm, 1, squirrel_releasehook_Animation3DData);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "Animation3DData", (int)argc, 0);
    return 0;
}


SQInteger squirrel_cocos2dx_Animation3DData_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.Animation3DData", -1);
    return 1;
}

void squirrel_cocos2dx_Animation3DData_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::Animation3DData", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_Animation3DData(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("Animation3DData"), -1);

    sq_newclass(vm, SQFalse);

    to_squirrel_function(vm, "constructor", squirrel_cocos2dx_Animation3DData_constructor);
    to_squirrel_function(vm, "resetData", squirrel_cocos2dx_Animation3DData_resetData);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_Animation3DData_typeof_meta);



    squirrel_cocos2dx_Animation3DData_push_c_class(vm);

    std::string typeName = typeid(cocos2d::Animation3DData).name();
    g_sqType[typeName] = "cc.Animation3DData";

    return 1;
}
SQInteger squirrel_cocos2dx_EaseQuarticActionOut_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        cocos2d::ActionInterval* arg0;
        ok &= sqval_to_object<cocos2d::ActionInterval>(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::EaseQuarticActionOut* ret = cocos2d::EaseQuarticActionOut::create(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.EaseQuarticActionOut");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_EaseQuarticActionOut_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.EaseQuarticActionOut", -1);
    return 1;
}

void squirrel_cocos2dx_EaseQuarticActionOut_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::EaseQuarticActionOut", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionEase", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_EaseQuarticActionOut(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("EaseQuarticActionOut"), -1);


    sq_pushstring(vm, _SC("ActionEase"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_EaseQuarticActionOut_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_EaseQuarticActionOut_typeof_meta);



    squirrel_cocos2dx_EaseQuarticActionOut_push_c_class(vm);

    std::string typeName = typeid(cocos2d::EaseQuarticActionOut).name();
    g_sqType[typeName] = "cc.EaseQuarticActionOut";

    return 1;
}
SQInteger squirrel_cocos2dx_FiniteTimeAction_setDuration(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::FiniteTimeAction* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_FiniteTimeAction_setDuration'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setDuration(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setDuration", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_FiniteTimeAction_getDuration(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::FiniteTimeAction* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_FiniteTimeAction_getDuration'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getDuration();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getDuration", (int)argc, 0);
    return 0;
}

SQInteger squirrel_cocos2dx_FiniteTimeAction_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.FiniteTimeAction", -1);
    return 1;
}

void squirrel_cocos2dx_FiniteTimeAction_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_FiniteTimeAction(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("FiniteTimeAction"), -1);


    sq_pushstring(vm, _SC("Action"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "setDuration", squirrel_cocos2dx_FiniteTimeAction_setDuration);
    to_squirrel_function(vm, "getDuration", squirrel_cocos2dx_FiniteTimeAction_getDuration);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_FiniteTimeAction_typeof_meta);



    squirrel_cocos2dx_FiniteTimeAction_push_c_class(vm);

    std::string typeName = typeid(cocos2d::FiniteTimeAction).name();
    g_sqType[typeName] = "cc.FiniteTimeAction";

    return 1;
}

SQInteger squirrel_cocos2dx_EventAcceleration_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.EventAcceleration", -1);
    return 1;
}

void squirrel_cocos2dx_EventAcceleration_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::EventAcceleration", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Event", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_EventAcceleration(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("EventAcceleration"), -1);


    sq_pushstring(vm, _SC("Event"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }


    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_EventAcceleration_typeof_meta);



    squirrel_cocos2dx_EventAcceleration_push_c_class(vm);

    std::string typeName = typeid(cocos2d::EventAcceleration).name();
    g_sqType[typeName] = "cc.EventAcceleration";

    return 1;
}
SQInteger squirrel_cocos2dx_EaseCubicActionIn_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        cocos2d::ActionInterval* arg0;
        ok &= sqval_to_object<cocos2d::ActionInterval>(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::EaseCubicActionIn* ret = cocos2d::EaseCubicActionIn::create(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.EaseCubicActionIn");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_EaseCubicActionIn_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.EaseCubicActionIn", -1);
    return 1;
}

void squirrel_cocos2dx_EaseCubicActionIn_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::EaseCubicActionIn", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionEase", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_EaseCubicActionIn(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("EaseCubicActionIn"), -1);


    sq_pushstring(vm, _SC("ActionEase"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_EaseCubicActionIn_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_EaseCubicActionIn_typeof_meta);



    squirrel_cocos2dx_EaseCubicActionIn_push_c_class(vm);

    std::string typeName = typeid(cocos2d::EaseCubicActionIn).name();
    g_sqType[typeName] = "cc.EaseCubicActionIn";

    return 1;
}
SQInteger squirrel_cocos2dx_TextureCache_reloadTexture(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TextureCache* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TextureCache_reloadTexture'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        bool ret = cobj->reloadTexture(arg0);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "reloadTexture", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TextureCache_unbindAllImageAsync(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TextureCache* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TextureCache_unbindAllImageAsync'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->unbindAllImageAsync();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "unbindAllImageAsync", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_TextureCache_removeTextureForKey(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TextureCache* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TextureCache_removeTextureForKey'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->removeTextureForKey(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "removeTextureForKey", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TextureCache_removeAllTextures(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TextureCache* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TextureCache_removeAllTextures'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->removeAllTextures();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "removeAllTextures", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_TextureCache_getDescription(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TextureCache* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TextureCache_getDescription'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        std::string ret = cobj->getDescription();
        sq_pushstring(vm, (const SQChar *)ret.c_str(), -1);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getDescription", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_TextureCache_getCachedTextureInfo(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TextureCache* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TextureCache_getCachedTextureInfo'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        std::string ret = cobj->getCachedTextureInfo();
        sq_pushstring(vm, (const SQChar *)ret.c_str(), -1);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getCachedTextureInfo", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_TextureCache_addImage(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TextureCache* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TextureCache_addImage'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Image")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_STRING) {
                break;
            }

            cocos2d::Image* arg0;
            ok &= sqval_to_object<cocos2d::Image>(vm, 2, &arg0);

            if (!ok) { break; }
            std::string arg1;
            ok &= sqval_to_std_string(vm, 3, &arg1);

            if (!ok) { break; }
            cocos2d::Texture2D* ret = cobj->addImage(arg0, arg1);
            object_to_sqval<cocos2d::Texture2D>(vm, "cc.Texture2D", (cocos2d::Texture2D*)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);

            if (!ok) { break; }
            cocos2d::Texture2D* ret = cobj->addImage(arg0);
            object_to_sqval<cocos2d::Texture2D>(vm, "cc.Texture2D", (cocos2d::Texture2D*)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "addImage", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TextureCache_unbindImageAsync(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TextureCache* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TextureCache_unbindImageAsync'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->unbindImageAsync(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "unbindImageAsync", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TextureCache_getTextureForKey(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TextureCache* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TextureCache_getTextureForKey'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        cocos2d::Texture2D* ret = cobj->getTextureForKey(arg0);
        object_to_sqval<cocos2d::Texture2D>(vm, "cc.Texture2D", (cocos2d::Texture2D*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getTextureForKey", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TextureCache_removeUnusedTextures(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TextureCache* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TextureCache_removeUnusedTextures'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->removeUnusedTextures();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "removeUnusedTextures", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_TextureCache_removeTexture(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TextureCache* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TextureCache_removeTexture'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Texture2D* arg0;

        ok &= sqval_to_object<cocos2d::Texture2D>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->removeTexture(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "removeTexture", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TextureCache_waitForQuit(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TextureCache* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TextureCache_waitForQuit'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->waitForQuit();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "waitForQuit", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_TextureCache_constructor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TextureCache* cobj = nullptr;
    bool ok  = true;

    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj = new cocos2d::TextureCache();
        sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
        cobj->retain();
        sq_setreleasehook(vm, 1, squirrel_releasehook_Ref);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "TextureCache", (int)argc, 0);
    return 0;
}


SQInteger squirrel_cocos2dx_TextureCache_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.TextureCache", -1);
    return 1;
}

void squirrel_cocos2dx_TextureCache_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::TextureCache", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_TextureCache(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("TextureCache"), -1);


    sq_pushstring(vm, _SC("Ref"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "constructor", squirrel_cocos2dx_TextureCache_constructor);
    to_squirrel_function(vm, "reloadTexture", squirrel_cocos2dx_TextureCache_reloadTexture);
    to_squirrel_function(vm, "unbindAllImageAsync", squirrel_cocos2dx_TextureCache_unbindAllImageAsync);
    to_squirrel_function(vm, "removeTextureForKey", squirrel_cocos2dx_TextureCache_removeTextureForKey);
    to_squirrel_function(vm, "removeAllTextures", squirrel_cocos2dx_TextureCache_removeAllTextures);
    to_squirrel_function(vm, "getDescription", squirrel_cocos2dx_TextureCache_getDescription);
    to_squirrel_function(vm, "getCachedTextureInfo", squirrel_cocos2dx_TextureCache_getCachedTextureInfo);
    to_squirrel_function(vm, "addImage", squirrel_cocos2dx_TextureCache_addImage);
    to_squirrel_function(vm, "unbindImageAsync", squirrel_cocos2dx_TextureCache_unbindImageAsync);
    to_squirrel_function(vm, "getTextureForKey", squirrel_cocos2dx_TextureCache_getTextureForKey);
    to_squirrel_function(vm, "removeUnusedTextures", squirrel_cocos2dx_TextureCache_removeUnusedTextures);
    to_squirrel_function(vm, "removeTexture", squirrel_cocos2dx_TextureCache_removeTexture);
    to_squirrel_function(vm, "waitForQuit", squirrel_cocos2dx_TextureCache_waitForQuit);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_TextureCache_typeof_meta);



    squirrel_cocos2dx_TextureCache_push_c_class(vm);

    std::string typeName = typeid(cocos2d::TextureCache).name();
    g_sqType[typeName] = "cc.TextureCache";

    return 1;
}
SQInteger squirrel_cocos2dx_SpriteBatchNode_appendChild(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::SpriteBatchNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_SpriteBatchNode_appendChild'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Sprite* arg0;

        ok &= sqval_to_object<cocos2d::Sprite>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->appendChild(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "appendChild", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_SpriteBatchNode_addSpriteWithoutQuad(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::SpriteBatchNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_SpriteBatchNode_addSpriteWithoutQuad'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 3) 
    {
        cocos2d::Sprite* arg0;
        int arg1;
        int arg2;

        ok &= sqval_to_object<cocos2d::Sprite>(vm, 2, &arg0);

        ok &= sqval_to_int32(vm, 3, (int *)&arg1);

        ok &= sqval_to_int32(vm, 4, (int *)&arg2);
        if (!ok)
            return 0;
        cocos2d::SpriteBatchNode* ret = cobj->addSpriteWithoutQuad(arg0, arg1, arg2);
        object_to_sqval<cocos2d::SpriteBatchNode>(vm, "cc.SpriteBatchNode", (cocos2d::SpriteBatchNode*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "addSpriteWithoutQuad", (int)argc, 3);
    return 0;
}
SQInteger squirrel_cocos2dx_SpriteBatchNode_reorderBatch(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::SpriteBatchNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_SpriteBatchNode_reorderBatch'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->reorderBatch(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "reorderBatch", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_SpriteBatchNode_lowestAtlasIndexInChild(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::SpriteBatchNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_SpriteBatchNode_lowestAtlasIndexInChild'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Sprite* arg0;

        ok &= sqval_to_object<cocos2d::Sprite>(vm, 2, &arg0);
        if (!ok)
            return 0;
        ssize_t ret = cobj->lowestAtlasIndexInChild(arg0);
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "lowestAtlasIndexInChild", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_SpriteBatchNode_atlasIndexForChild(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::SpriteBatchNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_SpriteBatchNode_atlasIndexForChild'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        cocos2d::Sprite* arg0;
        int arg1;

        ok &= sqval_to_object<cocos2d::Sprite>(vm, 2, &arg0);

        ok &= sqval_to_int32(vm, 3, (int *)&arg1);
        if (!ok)
            return 0;
        ssize_t ret = cobj->atlasIndexForChild(arg0, arg1);
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "atlasIndexForChild", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_SpriteBatchNode_setTextureAtlas(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::SpriteBatchNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_SpriteBatchNode_setTextureAtlas'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::TextureAtlas* arg0;

        ok &= sqval_to_object<cocos2d::TextureAtlas>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setTextureAtlas(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setTextureAtlas", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_SpriteBatchNode_getTexture(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::SpriteBatchNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_SpriteBatchNode_getTexture'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Texture2D* ret = cobj->getTexture();
        object_to_sqval<cocos2d::Texture2D>(vm, "cc.Texture2D", (cocos2d::Texture2D*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getTexture", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_SpriteBatchNode_increaseAtlasCapacity(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::SpriteBatchNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_SpriteBatchNode_increaseAtlasCapacity'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->increaseAtlasCapacity();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "increaseAtlasCapacity", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_SpriteBatchNode_getTextureAtlas(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::SpriteBatchNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_SpriteBatchNode_getTextureAtlas'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::TextureAtlas* ret = cobj->getTextureAtlas();
        object_to_sqval<cocos2d::TextureAtlas>(vm, "cc.TextureAtlas", (cocos2d::TextureAtlas*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getTextureAtlas", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_SpriteBatchNode_insertQuadFromSprite(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::SpriteBatchNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_SpriteBatchNode_insertQuadFromSprite'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        cocos2d::Sprite* arg0;
        ssize_t arg1;

        ok &= sqval_to_object<cocos2d::Sprite>(vm, 2, &arg0);

        ok &= sqval_to_ssize(vm, 3, &arg1);
        if (!ok)
            return 0;
        cobj->insertQuadFromSprite(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "insertQuadFromSprite", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_SpriteBatchNode_setTexture(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::SpriteBatchNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_SpriteBatchNode_setTexture'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Texture2D* arg0;

        ok &= sqval_to_object<cocos2d::Texture2D>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setTexture(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setTexture", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_SpriteBatchNode_rebuildIndexInOrder(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::SpriteBatchNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_SpriteBatchNode_rebuildIndexInOrder'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        cocos2d::Sprite* arg0;
        ssize_t arg1;

        ok &= sqval_to_object<cocos2d::Sprite>(vm, 2, &arg0);

        ok &= sqval_to_ssize(vm, 3, &arg1);
        if (!ok)
            return 0;
        ssize_t ret = cobj->rebuildIndexInOrder(arg0, arg1);
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "rebuildIndexInOrder", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_SpriteBatchNode_highestAtlasIndexInChild(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::SpriteBatchNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_SpriteBatchNode_highestAtlasIndexInChild'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Sprite* arg0;

        ok &= sqval_to_object<cocos2d::Sprite>(vm, 2, &arg0);
        if (!ok)
            return 0;
        ssize_t ret = cobj->highestAtlasIndexInChild(arg0);
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "highestAtlasIndexInChild", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_SpriteBatchNode_removeChildAtIndex(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::SpriteBatchNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_SpriteBatchNode_removeChildAtIndex'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        ssize_t arg0;
        bool arg1;

        ok &= sqval_to_ssize(vm, 2, &arg0);

        ok &= sqval_to_boolean(vm, 3, &arg1);
        if (!ok)
            return 0;
        cobj->removeChildAtIndex(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "removeChildAtIndex", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_SpriteBatchNode_removeSpriteFromAtlas(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::SpriteBatchNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_SpriteBatchNode_removeSpriteFromAtlas'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Sprite* arg0;

        ok &= sqval_to_object<cocos2d::Sprite>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->removeSpriteFromAtlas(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "removeSpriteFromAtlas", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_SpriteBatchNode_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        std::string arg0;
        ok &= sqval_to_std_string(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::SpriteBatchNode* ret = cocos2d::SpriteBatchNode::create(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.SpriteBatchNode");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    if (argc == 2)
    {
        std::string arg0;
        ssize_t arg1;
        ok &= sqval_to_std_string(vm, 2, &arg0);
        ok &= sqval_to_ssize(vm, 3, &arg1);
        if(!ok)
            return 0;
        cocos2d::SpriteBatchNode* ret = cocos2d::SpriteBatchNode::create(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.SpriteBatchNode");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_SpriteBatchNode_createWithTexture_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        cocos2d::Texture2D* arg0;
        ok &= sqval_to_object<cocos2d::Texture2D>(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::SpriteBatchNode* ret = cocos2d::SpriteBatchNode::createWithTexture(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.SpriteBatchNode");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    if (argc == 2)
    {
        cocos2d::Texture2D* arg0;
        ssize_t arg1;
        ok &= sqval_to_object<cocos2d::Texture2D>(vm, 2, &arg0);
        ok &= sqval_to_ssize(vm, 3, &arg1);
        if(!ok)
            return 0;
        cocos2d::SpriteBatchNode* ret = cocos2d::SpriteBatchNode::createWithTexture(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.SpriteBatchNode");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "createWithTexture", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_SpriteBatchNode_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.SpriteBatchNode", -1);
    return 1;
}

void squirrel_cocos2dx_SpriteBatchNode_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::SpriteBatchNode", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TextureProtocol", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::BlendProtocol", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_SpriteBatchNode(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("SpriteBatchNode"), -1);


    sq_pushstring(vm, _SC("Node"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "appendChild", squirrel_cocos2dx_SpriteBatchNode_appendChild);
    to_squirrel_function(vm, "addSpriteWithoutQuad", squirrel_cocos2dx_SpriteBatchNode_addSpriteWithoutQuad);
    to_squirrel_function(vm, "reorderBatch", squirrel_cocos2dx_SpriteBatchNode_reorderBatch);
    to_squirrel_function(vm, "lowestAtlasIndexInChild", squirrel_cocos2dx_SpriteBatchNode_lowestAtlasIndexInChild);
    to_squirrel_function(vm, "atlasIndexForChild", squirrel_cocos2dx_SpriteBatchNode_atlasIndexForChild);
    to_squirrel_function(vm, "setTextureAtlas", squirrel_cocos2dx_SpriteBatchNode_setTextureAtlas);
    to_squirrel_function(vm, "getTexture", squirrel_cocos2dx_SpriteBatchNode_getTexture);
    to_squirrel_function(vm, "increaseAtlasCapacity", squirrel_cocos2dx_SpriteBatchNode_increaseAtlasCapacity);
    to_squirrel_function(vm, "getTextureAtlas", squirrel_cocos2dx_SpriteBatchNode_getTextureAtlas);
    to_squirrel_function(vm, "insertQuadFromSprite", squirrel_cocos2dx_SpriteBatchNode_insertQuadFromSprite);
    to_squirrel_function(vm, "setTexture", squirrel_cocos2dx_SpriteBatchNode_setTexture);
    to_squirrel_function(vm, "rebuildIndexInOrder", squirrel_cocos2dx_SpriteBatchNode_rebuildIndexInOrder);
    to_squirrel_function(vm, "highestAtlasIndexInChild", squirrel_cocos2dx_SpriteBatchNode_highestAtlasIndexInChild);
    to_squirrel_function(vm, "removeChildAtIndex", squirrel_cocos2dx_SpriteBatchNode_removeChildAtIndex);
    to_squirrel_function(vm, "removeSpriteFromAtlas", squirrel_cocos2dx_SpriteBatchNode_removeSpriteFromAtlas);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_SpriteBatchNode_create_static, SQTrue);
    to_squirrel_function(vm, "createWithTexture", squirrel_cocos2dx_SpriteBatchNode_createWithTexture_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_SpriteBatchNode_typeof_meta);



    squirrel_cocos2dx_SpriteBatchNode_push_c_class(vm);

    std::string typeName = typeid(cocos2d::SpriteBatchNode).name();
    g_sqType[typeName] = "cc.SpriteBatchNode";

    return 1;
}
SQInteger squirrel_cocos2dx_ParticleSystem_getStartSizeVar(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_getStartSizeVar'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getStartSizeVar();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getStartSizeVar", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_getTexture(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_getTexture'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Texture2D* ret = cobj->getTexture();
        object_to_sqval<cocos2d::Texture2D>(vm, "cc.Texture2D", (cocos2d::Texture2D*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getTexture", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_isFull(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_isFull'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isFull();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isFull", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_getBatchNode(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_getBatchNode'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::ParticleBatchNode* ret = cobj->getBatchNode();
        object_to_sqval<cocos2d::ParticleBatchNode>(vm, "cc.ParticleBatchNode", (cocos2d::ParticleBatchNode*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getBatchNode", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_getStartColor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_getStartColor'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::Color4F& ret = cobj->getStartColor();
        color4f_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getStartColor", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_getPositionType(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_getPositionType'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        int ret = (int)cobj->getPositionType();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getPositionType", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_setPosVar(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_setPosVar'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec2 arg0;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->setPosVar(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setPosVar", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_getEndSpin(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_getEndSpin'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getEndSpin();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getEndSpin", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_setRotatePerSecondVar(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_setRotatePerSecondVar'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setRotatePerSecondVar(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setRotatePerSecondVar", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_getStartSpinVar(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_getStartSpinVar'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getStartSpinVar();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getStartSpinVar", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_getRadialAccelVar(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_getRadialAccelVar'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getRadialAccelVar();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getRadialAccelVar", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_getEndSizeVar(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_getEndSizeVar'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getEndSizeVar();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getEndSizeVar", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_setRotation(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_setRotation'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setRotation(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setRotation", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_setTangentialAccel(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_setTangentialAccel'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setTangentialAccel(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setTangentialAccel", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_setScaleY(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_setScaleY'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setScaleY(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setScaleY", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_setScaleX(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_setScaleX'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setScaleX(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setScaleX", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_getRadialAccel(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_getRadialAccel'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getRadialAccel();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getRadialAccel", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_setStartRadius(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_setStartRadius'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setStartRadius(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setStartRadius", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_setRotatePerSecond(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_setRotatePerSecond'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setRotatePerSecond(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setRotatePerSecond", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_setEndSize(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_setEndSize'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setEndSize(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setEndSize", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_getGravity(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_getGravity'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::Vec2& ret = cobj->getGravity();
        vec2_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getGravity", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_getTangentialAccel(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_getTangentialAccel'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getTangentialAccel();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getTangentialAccel", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_setEndRadius(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_setEndRadius'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setEndRadius(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setEndRadius", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_getSpeed(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_getSpeed'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getSpeed();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getSpeed", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_getAngle(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_getAngle'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getAngle();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getAngle", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_setEndColor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_setEndColor'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Color4F arg0;

        cocos2d::Color4F *ptr2 = nullptr; ok &=sqval_to_color4f(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->setEndColor(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setEndColor", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_setStartSpin(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_setStartSpin'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setStartSpin(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setStartSpin", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_setDuration(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_setDuration'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setDuration(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setDuration", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_setTexture(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_setTexture'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Texture2D* arg0;

        ok &= sqval_to_object<cocos2d::Texture2D>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setTexture(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setTexture", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_getPosVar(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_getPosVar'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::Vec2& ret = cobj->getPosVar();
        vec2_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getPosVar", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_updateWithNoTime(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_updateWithNoTime'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->updateWithNoTime();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "updateWithNoTime", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_isBlendAdditive(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_isBlendAdditive'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isBlendAdditive();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isBlendAdditive", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_getSpeedVar(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_getSpeedVar'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getSpeedVar();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getSpeedVar", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_setPositionType(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_setPositionType'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::ParticleSystem::PositionType arg0;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if (!ok)
            return 0;
        cobj->setPositionType(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setPositionType", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_stopSystem(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_stopSystem'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->stopSystem();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "stopSystem", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_getSourcePosition(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_getSourcePosition'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::Vec2& ret = cobj->getSourcePosition();
        vec2_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getSourcePosition", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_setLifeVar(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_setLifeVar'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setLifeVar(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setLifeVar", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_setTotalParticles(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_setTotalParticles'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        int arg0;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if (!ok)
            return 0;
        cobj->setTotalParticles(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setTotalParticles", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_setEndColorVar(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_setEndColorVar'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Color4F arg0;

        cocos2d::Color4F *ptr2 = nullptr; ok &=sqval_to_color4f(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->setEndColorVar(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setEndColorVar", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_getAtlasIndex(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_getAtlasIndex'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        int ret = cobj->getAtlasIndex();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getAtlasIndex", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_getStartSize(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_getStartSize'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getStartSize();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getStartSize", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_setStartSpinVar(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_setStartSpinVar'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setStartSpinVar(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setStartSpinVar", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_resetSystem(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_resetSystem'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->resetSystem();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "resetSystem", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_setAtlasIndex(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_setAtlasIndex'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        int arg0;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if (!ok)
            return 0;
        cobj->setAtlasIndex(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setAtlasIndex", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_setTangentialAccelVar(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_setTangentialAccelVar'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setTangentialAccelVar(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setTangentialAccelVar", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_setEndRadiusVar(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_setEndRadiusVar'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setEndRadiusVar(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setEndRadiusVar", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_getEndRadius(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_getEndRadius'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getEndRadius();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getEndRadius", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_isOpacityModifyRGB(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_isOpacityModifyRGB'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isOpacityModifyRGB();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isOpacityModifyRGB", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_isActive(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_isActive'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isActive();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isActive", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_setRadialAccelVar(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_setRadialAccelVar'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setRadialAccelVar(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setRadialAccelVar", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_setStartSize(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_setStartSize'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setStartSize(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setStartSize", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_setSpeed(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_setSpeed'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setSpeed(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setSpeed", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_getStartSpin(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_getStartSpin'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getStartSpin();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getStartSpin", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_getRotatePerSecond(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_getRotatePerSecond'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getRotatePerSecond();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getRotatePerSecond", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_setEmitterMode(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_setEmitterMode'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::ParticleSystem::Mode arg0;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if (!ok)
            return 0;
        cobj->setEmitterMode(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setEmitterMode", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_getDuration(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_getDuration'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getDuration();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getDuration", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_setSourcePosition(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_setSourcePosition'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec2 arg0;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->setSourcePosition(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setSourcePosition", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_getEndSpinVar(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_getEndSpinVar'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getEndSpinVar();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getEndSpinVar", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_setBlendAdditive(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_setBlendAdditive'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setBlendAdditive(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setBlendAdditive", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_setLife(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_setLife'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setLife(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setLife", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_setAngleVar(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_setAngleVar'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setAngleVar(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setAngleVar", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_setRotationIsDir(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_setRotationIsDir'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setRotationIsDir(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setRotationIsDir", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_setEndSizeVar(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_setEndSizeVar'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setEndSizeVar(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setEndSizeVar", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_setAngle(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_setAngle'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setAngle(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setAngle", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_setBatchNode(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_setBatchNode'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::ParticleBatchNode* arg0;

        ok &= sqval_to_object<cocos2d::ParticleBatchNode>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setBatchNode(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setBatchNode", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_getTangentialAccelVar(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_getTangentialAccelVar'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getTangentialAccelVar();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getTangentialAccelVar", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_getEmitterMode(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_getEmitterMode'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        int ret = (int)cobj->getEmitterMode();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getEmitterMode", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_setEndSpinVar(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_setEndSpinVar'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setEndSpinVar(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setEndSpinVar", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_getAngleVar(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_getAngleVar'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getAngleVar();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getAngleVar", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_setStartColor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_setStartColor'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Color4F arg0;

        cocos2d::Color4F *ptr2 = nullptr; ok &=sqval_to_color4f(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->setStartColor(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setStartColor", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_getRotatePerSecondVar(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_getRotatePerSecondVar'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getRotatePerSecondVar();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getRotatePerSecondVar", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_getEndSize(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_getEndSize'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getEndSize();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getEndSize", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_getLife(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_getLife'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getLife();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getLife", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_setSpeedVar(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_setSpeedVar'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setSpeedVar(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setSpeedVar", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_setAutoRemoveOnFinish(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_setAutoRemoveOnFinish'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setAutoRemoveOnFinish(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setAutoRemoveOnFinish", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_setGravity(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_setGravity'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec2 arg0;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->setGravity(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setGravity", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_postStep(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_postStep'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->postStep();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "postStep", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_setEmissionRate(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_setEmissionRate'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setEmissionRate(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setEmissionRate", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_getEndColorVar(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_getEndColorVar'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::Color4F& ret = cobj->getEndColorVar();
        color4f_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getEndColorVar", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_getRotationIsDir(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_getRotationIsDir'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->getRotationIsDir();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getRotationIsDir", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_setScale(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_setScale'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setScale(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setScale", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_getEmissionRate(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_getEmissionRate'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getEmissionRate();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getEmissionRate", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_getEndColor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_getEndColor'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::Color4F& ret = cobj->getEndColor();
        color4f_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getEndColor", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_getLifeVar(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_getLifeVar'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getLifeVar();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getLifeVar", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_setStartSizeVar(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_setStartSizeVar'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setStartSizeVar(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setStartSizeVar", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_setOpacityModifyRGB(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_setOpacityModifyRGB'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setOpacityModifyRGB(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setOpacityModifyRGB", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_addParticle(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_addParticle'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->addParticle();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "addParticle", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_getStartRadius(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_getStartRadius'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getStartRadius();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getStartRadius", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_getParticleCount(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_getParticleCount'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        unsigned int ret = cobj->getParticleCount();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getParticleCount", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_getStartRadiusVar(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_getStartRadiusVar'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getStartRadiusVar();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getStartRadiusVar", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_setStartColorVar(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_setStartColorVar'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Color4F arg0;

        cocos2d::Color4F *ptr2 = nullptr; ok &=sqval_to_color4f(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->setStartColorVar(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setStartColorVar", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_setEndSpin(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_setEndSpin'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setEndSpin(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setEndSpin", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_setRadialAccel(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_setRadialAccel'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setRadialAccel(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setRadialAccel", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_isAutoRemoveOnFinish(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_isAutoRemoveOnFinish'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isAutoRemoveOnFinish();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isAutoRemoveOnFinish", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_getTotalParticles(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_getTotalParticles'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        int ret = cobj->getTotalParticles();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getTotalParticles", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_setStartRadiusVar(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_setStartRadiusVar'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setStartRadiusVar(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setStartRadiusVar", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_getEndRadiusVar(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_getEndRadiusVar'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getEndRadiusVar();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getEndRadiusVar", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_getStartColorVar(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystem* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystem_getStartColorVar'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::Color4F& ret = cobj->getStartColorVar();
        color4f_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getStartColorVar", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        std::string arg0;
        ok &= sqval_to_std_string(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::ParticleSystem* ret = cocos2d::ParticleSystem::create(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.ParticleSystem");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystem_createWithTotalParticles_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if(!ok)
            return 0;
        cocos2d::ParticleSystem* ret = cocos2d::ParticleSystem::createWithTotalParticles(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.ParticleSystem");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "createWithTotalParticles", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_ParticleSystem_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.ParticleSystem", -1);
    return 1;
}

void squirrel_cocos2dx_ParticleSystem_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::ParticleSystem", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TextureProtocol", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::BlendProtocol", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_ParticleSystem(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("ParticleSystem"), -1);


    sq_pushstring(vm, _SC("Node"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "getStartSizeVar", squirrel_cocos2dx_ParticleSystem_getStartSizeVar);
    to_squirrel_function(vm, "getTexture", squirrel_cocos2dx_ParticleSystem_getTexture);
    to_squirrel_function(vm, "isFull", squirrel_cocos2dx_ParticleSystem_isFull);
    to_squirrel_function(vm, "getBatchNode", squirrel_cocos2dx_ParticleSystem_getBatchNode);
    to_squirrel_function(vm, "getStartColor", squirrel_cocos2dx_ParticleSystem_getStartColor);
    to_squirrel_function(vm, "getPositionType", squirrel_cocos2dx_ParticleSystem_getPositionType);
    to_squirrel_function(vm, "setPosVar", squirrel_cocos2dx_ParticleSystem_setPosVar);
    to_squirrel_function(vm, "getEndSpin", squirrel_cocos2dx_ParticleSystem_getEndSpin);
    to_squirrel_function(vm, "setRotatePerSecondVar", squirrel_cocos2dx_ParticleSystem_setRotatePerSecondVar);
    to_squirrel_function(vm, "getStartSpinVar", squirrel_cocos2dx_ParticleSystem_getStartSpinVar);
    to_squirrel_function(vm, "getRadialAccelVar", squirrel_cocos2dx_ParticleSystem_getRadialAccelVar);
    to_squirrel_function(vm, "getEndSizeVar", squirrel_cocos2dx_ParticleSystem_getEndSizeVar);
    to_squirrel_function(vm, "setRotation", squirrel_cocos2dx_ParticleSystem_setRotation);
    to_squirrel_function(vm, "setTangentialAccel", squirrel_cocos2dx_ParticleSystem_setTangentialAccel);
    to_squirrel_function(vm, "setScaleY", squirrel_cocos2dx_ParticleSystem_setScaleY);
    to_squirrel_function(vm, "setScaleX", squirrel_cocos2dx_ParticleSystem_setScaleX);
    to_squirrel_function(vm, "getRadialAccel", squirrel_cocos2dx_ParticleSystem_getRadialAccel);
    to_squirrel_function(vm, "setStartRadius", squirrel_cocos2dx_ParticleSystem_setStartRadius);
    to_squirrel_function(vm, "setRotatePerSecond", squirrel_cocos2dx_ParticleSystem_setRotatePerSecond);
    to_squirrel_function(vm, "setEndSize", squirrel_cocos2dx_ParticleSystem_setEndSize);
    to_squirrel_function(vm, "getGravity", squirrel_cocos2dx_ParticleSystem_getGravity);
    to_squirrel_function(vm, "getTangentialAccel", squirrel_cocos2dx_ParticleSystem_getTangentialAccel);
    to_squirrel_function(vm, "setEndRadius", squirrel_cocos2dx_ParticleSystem_setEndRadius);
    to_squirrel_function(vm, "getSpeed", squirrel_cocos2dx_ParticleSystem_getSpeed);
    to_squirrel_function(vm, "getAngle", squirrel_cocos2dx_ParticleSystem_getAngle);
    to_squirrel_function(vm, "setEndColor", squirrel_cocos2dx_ParticleSystem_setEndColor);
    to_squirrel_function(vm, "setStartSpin", squirrel_cocos2dx_ParticleSystem_setStartSpin);
    to_squirrel_function(vm, "setDuration", squirrel_cocos2dx_ParticleSystem_setDuration);
    to_squirrel_function(vm, "setTexture", squirrel_cocos2dx_ParticleSystem_setTexture);
    to_squirrel_function(vm, "getPosVar", squirrel_cocos2dx_ParticleSystem_getPosVar);
    to_squirrel_function(vm, "updateWithNoTime", squirrel_cocos2dx_ParticleSystem_updateWithNoTime);
    to_squirrel_function(vm, "isBlendAdditive", squirrel_cocos2dx_ParticleSystem_isBlendAdditive);
    to_squirrel_function(vm, "getSpeedVar", squirrel_cocos2dx_ParticleSystem_getSpeedVar);
    to_squirrel_function(vm, "setPositionType", squirrel_cocos2dx_ParticleSystem_setPositionType);
    to_squirrel_function(vm, "stopSystem", squirrel_cocos2dx_ParticleSystem_stopSystem);
    to_squirrel_function(vm, "getSourcePosition", squirrel_cocos2dx_ParticleSystem_getSourcePosition);
    to_squirrel_function(vm, "setLifeVar", squirrel_cocos2dx_ParticleSystem_setLifeVar);
    to_squirrel_function(vm, "setTotalParticles", squirrel_cocos2dx_ParticleSystem_setTotalParticles);
    to_squirrel_function(vm, "setEndColorVar", squirrel_cocos2dx_ParticleSystem_setEndColorVar);
    to_squirrel_function(vm, "getAtlasIndex", squirrel_cocos2dx_ParticleSystem_getAtlasIndex);
    to_squirrel_function(vm, "getStartSize", squirrel_cocos2dx_ParticleSystem_getStartSize);
    to_squirrel_function(vm, "setStartSpinVar", squirrel_cocos2dx_ParticleSystem_setStartSpinVar);
    to_squirrel_function(vm, "resetSystem", squirrel_cocos2dx_ParticleSystem_resetSystem);
    to_squirrel_function(vm, "setAtlasIndex", squirrel_cocos2dx_ParticleSystem_setAtlasIndex);
    to_squirrel_function(vm, "setTangentialAccelVar", squirrel_cocos2dx_ParticleSystem_setTangentialAccelVar);
    to_squirrel_function(vm, "setEndRadiusVar", squirrel_cocos2dx_ParticleSystem_setEndRadiusVar);
    to_squirrel_function(vm, "getEndRadius", squirrel_cocos2dx_ParticleSystem_getEndRadius);
    to_squirrel_function(vm, "isOpacityModifyRGB", squirrel_cocos2dx_ParticleSystem_isOpacityModifyRGB);
    to_squirrel_function(vm, "isActive", squirrel_cocos2dx_ParticleSystem_isActive);
    to_squirrel_function(vm, "setRadialAccelVar", squirrel_cocos2dx_ParticleSystem_setRadialAccelVar);
    to_squirrel_function(vm, "setStartSize", squirrel_cocos2dx_ParticleSystem_setStartSize);
    to_squirrel_function(vm, "setSpeed", squirrel_cocos2dx_ParticleSystem_setSpeed);
    to_squirrel_function(vm, "getStartSpin", squirrel_cocos2dx_ParticleSystem_getStartSpin);
    to_squirrel_function(vm, "getRotatePerSecond", squirrel_cocos2dx_ParticleSystem_getRotatePerSecond);
    to_squirrel_function(vm, "setEmitterMode", squirrel_cocos2dx_ParticleSystem_setEmitterMode);
    to_squirrel_function(vm, "getDuration", squirrel_cocos2dx_ParticleSystem_getDuration);
    to_squirrel_function(vm, "setSourcePosition", squirrel_cocos2dx_ParticleSystem_setSourcePosition);
    to_squirrel_function(vm, "getEndSpinVar", squirrel_cocos2dx_ParticleSystem_getEndSpinVar);
    to_squirrel_function(vm, "setBlendAdditive", squirrel_cocos2dx_ParticleSystem_setBlendAdditive);
    to_squirrel_function(vm, "setLife", squirrel_cocos2dx_ParticleSystem_setLife);
    to_squirrel_function(vm, "setAngleVar", squirrel_cocos2dx_ParticleSystem_setAngleVar);
    to_squirrel_function(vm, "setRotationIsDir", squirrel_cocos2dx_ParticleSystem_setRotationIsDir);
    to_squirrel_function(vm, "setEndSizeVar", squirrel_cocos2dx_ParticleSystem_setEndSizeVar);
    to_squirrel_function(vm, "setAngle", squirrel_cocos2dx_ParticleSystem_setAngle);
    to_squirrel_function(vm, "setBatchNode", squirrel_cocos2dx_ParticleSystem_setBatchNode);
    to_squirrel_function(vm, "getTangentialAccelVar", squirrel_cocos2dx_ParticleSystem_getTangentialAccelVar);
    to_squirrel_function(vm, "getEmitterMode", squirrel_cocos2dx_ParticleSystem_getEmitterMode);
    to_squirrel_function(vm, "setEndSpinVar", squirrel_cocos2dx_ParticleSystem_setEndSpinVar);
    to_squirrel_function(vm, "getAngleVar", squirrel_cocos2dx_ParticleSystem_getAngleVar);
    to_squirrel_function(vm, "setStartColor", squirrel_cocos2dx_ParticleSystem_setStartColor);
    to_squirrel_function(vm, "getRotatePerSecondVar", squirrel_cocos2dx_ParticleSystem_getRotatePerSecondVar);
    to_squirrel_function(vm, "getEndSize", squirrel_cocos2dx_ParticleSystem_getEndSize);
    to_squirrel_function(vm, "getLife", squirrel_cocos2dx_ParticleSystem_getLife);
    to_squirrel_function(vm, "setSpeedVar", squirrel_cocos2dx_ParticleSystem_setSpeedVar);
    to_squirrel_function(vm, "setAutoRemoveOnFinish", squirrel_cocos2dx_ParticleSystem_setAutoRemoveOnFinish);
    to_squirrel_function(vm, "setGravity", squirrel_cocos2dx_ParticleSystem_setGravity);
    to_squirrel_function(vm, "postStep", squirrel_cocos2dx_ParticleSystem_postStep);
    to_squirrel_function(vm, "setEmissionRate", squirrel_cocos2dx_ParticleSystem_setEmissionRate);
    to_squirrel_function(vm, "getEndColorVar", squirrel_cocos2dx_ParticleSystem_getEndColorVar);
    to_squirrel_function(vm, "getRotationIsDir", squirrel_cocos2dx_ParticleSystem_getRotationIsDir);
    to_squirrel_function(vm, "setScale", squirrel_cocos2dx_ParticleSystem_setScale);
    to_squirrel_function(vm, "getEmissionRate", squirrel_cocos2dx_ParticleSystem_getEmissionRate);
    to_squirrel_function(vm, "getEndColor", squirrel_cocos2dx_ParticleSystem_getEndColor);
    to_squirrel_function(vm, "getLifeVar", squirrel_cocos2dx_ParticleSystem_getLifeVar);
    to_squirrel_function(vm, "setStartSizeVar", squirrel_cocos2dx_ParticleSystem_setStartSizeVar);
    to_squirrel_function(vm, "setOpacityModifyRGB", squirrel_cocos2dx_ParticleSystem_setOpacityModifyRGB);
    to_squirrel_function(vm, "addParticle", squirrel_cocos2dx_ParticleSystem_addParticle);
    to_squirrel_function(vm, "getStartRadius", squirrel_cocos2dx_ParticleSystem_getStartRadius);
    to_squirrel_function(vm, "getParticleCount", squirrel_cocos2dx_ParticleSystem_getParticleCount);
    to_squirrel_function(vm, "getStartRadiusVar", squirrel_cocos2dx_ParticleSystem_getStartRadiusVar);
    to_squirrel_function(vm, "setStartColorVar", squirrel_cocos2dx_ParticleSystem_setStartColorVar);
    to_squirrel_function(vm, "setEndSpin", squirrel_cocos2dx_ParticleSystem_setEndSpin);
    to_squirrel_function(vm, "setRadialAccel", squirrel_cocos2dx_ParticleSystem_setRadialAccel);
    to_squirrel_function(vm, "isAutoRemoveOnFinish", squirrel_cocos2dx_ParticleSystem_isAutoRemoveOnFinish);
    to_squirrel_function(vm, "getTotalParticles", squirrel_cocos2dx_ParticleSystem_getTotalParticles);
    to_squirrel_function(vm, "setStartRadiusVar", squirrel_cocos2dx_ParticleSystem_setStartRadiusVar);
    to_squirrel_function(vm, "getEndRadiusVar", squirrel_cocos2dx_ParticleSystem_getEndRadiusVar);
    to_squirrel_function(vm, "getStartColorVar", squirrel_cocos2dx_ParticleSystem_getStartColorVar);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_ParticleSystem_create_static, SQTrue);
    to_squirrel_function(vm, "createWithTotalParticles", squirrel_cocos2dx_ParticleSystem_createWithTotalParticles_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_ParticleSystem_typeof_meta);

    to_squirrel_variable_integer(vm, "DURATION_INFINITY", (SQInteger)cocos2d::ParticleSystem::DURATION_INFINITY, SQTrue);
    to_squirrel_variable_integer(vm, "START_SIZE_EQUAL_TO_END_SIZE", (SQInteger)cocos2d::ParticleSystem::START_SIZE_EQUAL_TO_END_SIZE, SQTrue);
    to_squirrel_variable_integer(vm, "START_RADIUS_EQUAL_TO_END_RADIUS", (SQInteger)cocos2d::ParticleSystem::START_RADIUS_EQUAL_TO_END_RADIUS, SQTrue);

    sq_pushstring(vm, _SC("Mode"), -1);
    sq_newtable(vm);
    to_squirrel_variable_integer(vm, "GRAVITY", (SQInteger)cocos2d::ParticleSystem::Mode::GRAVITY, SQTrue);
    to_squirrel_variable_integer(vm, "RADIUS", (SQInteger)cocos2d::ParticleSystem::Mode::RADIUS, SQTrue);
    sq_newslot(vm, -3, SQTrue);
    sq_pushstring(vm, _SC("PositionType"), -1);
    sq_newtable(vm);
    to_squirrel_variable_integer(vm, "FREE", (SQInteger)cocos2d::ParticleSystem::PositionType::FREE, SQTrue);
    to_squirrel_variable_integer(vm, "RELATIVE", (SQInteger)cocos2d::ParticleSystem::PositionType::RELATIVE, SQTrue);
    to_squirrel_variable_integer(vm, "GROUPED", (SQInteger)cocos2d::ParticleSystem::PositionType::GROUPED, SQTrue);
    sq_newslot(vm, -3, SQTrue);

    squirrel_cocos2dx_ParticleSystem_push_c_class(vm);

    std::string typeName = typeid(cocos2d::ParticleSystem).name();
    g_sqType[typeName] = "cc.ParticleSystem";

    return 1;
}
SQInteger squirrel_cocos2dx_ActionTween_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 4)
    {
        float arg0;
        std::string arg1;
        float arg2;
        float arg3;
        ok &= sqval_to_float(vm, 2, &arg0);
        ok &= sqval_to_std_string(vm, 3, &arg1);
        ok &= sqval_to_float(vm, 4, &arg2);
        ok &= sqval_to_float(vm, 5, &arg3);
        if(!ok)
            return 0;
        cocos2d::ActionTween* ret = cocos2d::ActionTween::create(arg0, arg1, arg2, arg3);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.ActionTween");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 4);
    return 0;
}

SQInteger squirrel_cocos2dx_ActionTween_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.ActionTween", -1);
    return 1;
}

void squirrel_cocos2dx_ActionTween_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::ActionTween", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_ActionTween(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("ActionTween"), -1);


    sq_pushstring(vm, _SC("ActionInterval"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_ActionTween_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_ActionTween_typeof_meta);



    squirrel_cocos2dx_ActionTween_push_c_class(vm);

    std::string typeName = typeid(cocos2d::ActionTween).name();
    g_sqType[typeName] = "cc.ActionTween";

    return 1;
}
SQInteger squirrel_cocos2dx_TransitionFadeDown_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        float arg0;
        cocos2d::Scene* arg1;
        ok &= sqval_to_float(vm, 2, &arg0);
        ok &= sqval_to_object<cocos2d::Scene>(vm, 3, &arg1);
        if(!ok)
            return 0;
        cocos2d::TransitionFadeDown* ret = cocos2d::TransitionFadeDown::create(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.TransitionFadeDown");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_TransitionFadeDown_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.TransitionFadeDown", -1);
    return 1;
}

void squirrel_cocos2dx_TransitionFadeDown_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::TransitionFadeDown", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::TransitionFadeTR", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TransitionScene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Scene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TransitionEaseScene", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_TransitionFadeDown(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("TransitionFadeDown"), -1);


    sq_pushstring(vm, _SC("TransitionFadeTR"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_TransitionFadeDown_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_TransitionFadeDown_typeof_meta);



    squirrel_cocos2dx_TransitionFadeDown_push_c_class(vm);

    std::string typeName = typeid(cocos2d::TransitionFadeDown).name();
    g_sqType[typeName] = "cc.TransitionFadeDown";

    return 1;
}
SQInteger squirrel_cocos2dx_ParticleSun_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        cocos2d::ParticleSun* ret = cocos2d::ParticleSun::create();
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.ParticleSun");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSun_createWithTotalParticles_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if(!ok)
            return 0;
        cocos2d::ParticleSun* ret = cocos2d::ParticleSun::createWithTotalParticles(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.ParticleSun");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "createWithTotalParticles", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_ParticleSun_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.ParticleSun", -1);
    return 1;
}

void squirrel_cocos2dx_ParticleSun_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::ParticleSun", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ParticleSystemQuad", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ParticleSystem", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TextureProtocol", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::BlendProtocol", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_ParticleSun(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("ParticleSun"), -1);


    sq_pushstring(vm, _SC("ParticleSystemQuad"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_ParticleSun_create_static, SQTrue);
    to_squirrel_function(vm, "createWithTotalParticles", squirrel_cocos2dx_ParticleSun_createWithTotalParticles_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_ParticleSun_typeof_meta);



    squirrel_cocos2dx_ParticleSun_push_c_class(vm);

    std::string typeName = typeid(cocos2d::ParticleSun).name();
    g_sqType[typeName] = "cc.ParticleSun";

    return 1;
}
SQInteger squirrel_cocos2dx_TransitionProgressHorizontal_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        float arg0;
        cocos2d::Scene* arg1;
        ok &= sqval_to_float(vm, 2, &arg0);
        ok &= sqval_to_object<cocos2d::Scene>(vm, 3, &arg1);
        if(!ok)
            return 0;
        cocos2d::TransitionProgressHorizontal* ret = cocos2d::TransitionProgressHorizontal::create(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.TransitionProgressHorizontal");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_TransitionProgressHorizontal_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.TransitionProgressHorizontal", -1);
    return 1;
}

void squirrel_cocos2dx_TransitionProgressHorizontal_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::TransitionProgressHorizontal", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::TransitionProgress", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TransitionScene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Scene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_TransitionProgressHorizontal(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("TransitionProgressHorizontal"), -1);


    sq_pushstring(vm, _SC("TransitionProgress"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_TransitionProgressHorizontal_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_TransitionProgressHorizontal_typeof_meta);



    squirrel_cocos2dx_TransitionProgressHorizontal_push_c_class(vm);

    std::string typeName = typeid(cocos2d::TransitionProgressHorizontal).name();
    g_sqType[typeName] = "cc.TransitionProgressHorizontal";

    return 1;
}
SQInteger squirrel_cocos2dx_TMXObjectGroup_setPositionOffset(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TMXObjectGroup* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXObjectGroup_setPositionOffset'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec2 arg0;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->setPositionOffset(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setPositionOffset", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXObjectGroup_getProperty(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TMXObjectGroup* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXObjectGroup_getProperty'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        cocos2d::Value ret = cobj->getProperty(arg0);
        ccvalue_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getProperty", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXObjectGroup_getPositionOffset(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TMXObjectGroup* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXObjectGroup_getPositionOffset'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::Vec2& ret = cobj->getPositionOffset();
        vec2_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getPositionOffset", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXObjectGroup_getObject(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TMXObjectGroup* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXObjectGroup_getObject'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        cocos2d::ValueMap ret = cobj->getObject(arg0);
        ccvaluemap_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getObject", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXObjectGroup_getObjects(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TMXObjectGroup* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXObjectGroup_getObjects'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 0) {

            cocos2d::ValueVector& ret = cobj->getObjects();
            ccvaluevector_to_sqval(vm, ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 0) {

            const cocos2d::ValueVector& ret = cobj->getObjects();
            ccvaluevector_to_sqval(vm, ret);
            return 1;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getObjects", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXObjectGroup_setGroupName(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TMXObjectGroup* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXObjectGroup_setGroupName'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setGroupName(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setGroupName", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXObjectGroup_getProperties(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TMXObjectGroup* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXObjectGroup_getProperties'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 0) {

            cocos2d::ValueMap& ret = cobj->getProperties();
            ccvaluemap_to_sqval(vm, ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 0) {

            const cocos2d::ValueMap& ret = cobj->getProperties();
            ccvaluemap_to_sqval(vm, ret);
            return 1;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getProperties", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXObjectGroup_getGroupName(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TMXObjectGroup* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXObjectGroup_getGroupName'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const std::string& ret = cobj->getGroupName();
        sq_pushstring(vm, (const SQChar *)ret.c_str(), -1);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getGroupName", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXObjectGroup_setProperties(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TMXObjectGroup* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXObjectGroup_setProperties'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::ValueMap arg0;

        ok &= sqval_to_ccvaluemap(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setProperties(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setProperties", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXObjectGroup_setObjects(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TMXObjectGroup* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXObjectGroup_setObjects'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::ValueVector arg0;

        ok &= sqval_to_ccvaluevector(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setObjects(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setObjects", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXObjectGroup_constructor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TMXObjectGroup* cobj = nullptr;
    bool ok  = true;

    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj = new cocos2d::TMXObjectGroup();
        sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
        cobj->retain();
        sq_setreleasehook(vm, 1, squirrel_releasehook_Ref);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "TMXObjectGroup", (int)argc, 0);
    return 0;
}


SQInteger squirrel_cocos2dx_TMXObjectGroup_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.TMXObjectGroup", -1);
    return 1;
}

void squirrel_cocos2dx_TMXObjectGroup_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::TMXObjectGroup", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_TMXObjectGroup(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("TMXObjectGroup"), -1);


    sq_pushstring(vm, _SC("Ref"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "constructor", squirrel_cocos2dx_TMXObjectGroup_constructor);
    to_squirrel_function(vm, "setPositionOffset", squirrel_cocos2dx_TMXObjectGroup_setPositionOffset);
    to_squirrel_function(vm, "getProperty", squirrel_cocos2dx_TMXObjectGroup_getProperty);
    to_squirrel_function(vm, "getPositionOffset", squirrel_cocos2dx_TMXObjectGroup_getPositionOffset);
    to_squirrel_function(vm, "getObject", squirrel_cocos2dx_TMXObjectGroup_getObject);
    to_squirrel_function(vm, "getObjects", squirrel_cocos2dx_TMXObjectGroup_getObjects);
    to_squirrel_function(vm, "setGroupName", squirrel_cocos2dx_TMXObjectGroup_setGroupName);
    to_squirrel_function(vm, "getProperties", squirrel_cocos2dx_TMXObjectGroup_getProperties);
    to_squirrel_function(vm, "getGroupName", squirrel_cocos2dx_TMXObjectGroup_getGroupName);
    to_squirrel_function(vm, "setProperties", squirrel_cocos2dx_TMXObjectGroup_setProperties);
    to_squirrel_function(vm, "setObjects", squirrel_cocos2dx_TMXObjectGroup_setObjects);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_TMXObjectGroup_typeof_meta);



    squirrel_cocos2dx_TMXObjectGroup_push_c_class(vm);

    std::string typeName = typeid(cocos2d::TMXObjectGroup).name();
    g_sqType[typeName] = "cc.TMXObjectGroup";

    return 1;
}
SQInteger squirrel_cocos2dx_TMXLayer_getPositionAt(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::experimental::TMXLayer* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXLayer_getPositionAt'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec2 arg0;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cocos2d::Vec2 ret = cobj->getPositionAt(arg0);
        vec2_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getPositionAt", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXLayer_setLayerOrientation(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::experimental::TMXLayer* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXLayer_setLayerOrientation'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        int arg0;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if (!ok)
            return 0;
        cobj->setLayerOrientation(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setLayerOrientation", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXLayer_getLayerSize(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::experimental::TMXLayer* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXLayer_getLayerSize'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::Size& ret = cobj->getLayerSize();
        size_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getLayerSize", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXLayer_setMapTileSize(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::experimental::TMXLayer* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXLayer_setMapTileSize'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Size arg0;

        cocos2d::Size* ptr2 = nullptr; ok &= sqval_to_size(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->setMapTileSize(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setMapTileSize", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXLayer_getLayerOrientation(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::experimental::TMXLayer* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXLayer_getLayerOrientation'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        int ret = cobj->getLayerOrientation();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getLayerOrientation", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXLayer_setProperties(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::experimental::TMXLayer* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXLayer_setProperties'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::ValueMap arg0;

        ok &= sqval_to_ccvaluemap(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setProperties(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setProperties", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXLayer_setLayerName(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::experimental::TMXLayer* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXLayer_setLayerName'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setLayerName(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setLayerName", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXLayer_removeTileAt(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::experimental::TMXLayer* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXLayer_removeTileAt'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec2 arg0;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->removeTileAt(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "removeTileAt", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXLayer_getProperties(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::experimental::TMXLayer* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXLayer_getProperties'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 0) {

            cocos2d::ValueMap& ret = cobj->getProperties();
            ccvaluemap_to_sqval(vm, ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 0) {

            const cocos2d::ValueMap& ret = cobj->getProperties();
            ccvaluemap_to_sqval(vm, ret);
            return 1;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getProperties", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXLayer_setupTiles(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::experimental::TMXLayer* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXLayer_setupTiles'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->setupTiles();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setupTiles", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXLayer_setupTileSprite(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::experimental::TMXLayer* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXLayer_setupTileSprite'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 3) 
    {
        cocos2d::Sprite* arg0;
        cocos2d::Vec2 arg1;
        int arg2;

        ok &= sqval_to_object<cocos2d::Sprite>(vm, 2, &arg0);

        cocos2d::Vec2* ptr3 = nullptr; ok &= sqval_to_vec2(vm, 3, ptr3); arg1 = *ptr3;

        ok &= sqval_to_int32(vm, 4, (int *)&arg2);
        if (!ok)
            return 0;
        cobj->setupTileSprite(arg0, arg1, arg2);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setupTileSprite", (int)argc, 3);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXLayer_setTileGID(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::experimental::TMXLayer* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXLayer_setTileGID'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 3) {
            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Vec2")) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INSTANCE || ! instanceof_cclass(vm, 4, "cocos2d::TMXTileFlags_")) {
                break;
            }

            int arg0;
            ok &= sqval_to_int32(vm, 2, (int *)&arg0);

            if (!ok) { break; }
            cocos2d::Vec2 arg1;
            cocos2d::Vec2* ptr3 = nullptr; ok &= sqval_to_vec2(vm, 3, ptr3); arg1 = *ptr3;

            if (!ok) { break; }
            cocos2d::TMXTileFlags_ arg2;
            ok &= sqval_to_int32(vm, 4, (int *)&arg2);

            if (!ok) { break; }
            cobj->setTileGID(arg0, arg1, arg2);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Vec2")) {
                break;
            }

            int arg0;
            ok &= sqval_to_int32(vm, 2, (int *)&arg0);

            if (!ok) { break; }
            cocos2d::Vec2 arg1;
            cocos2d::Vec2* ptr3 = nullptr; ok &= sqval_to_vec2(vm, 3, ptr3); arg1 = *ptr3;

            if (!ok) { break; }
            cobj->setTileGID(arg0, arg1);
            return 0;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setTileGID", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXLayer_getMapTileSize(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::experimental::TMXLayer* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXLayer_getMapTileSize'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::Size& ret = cobj->getMapTileSize();
        size_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getMapTileSize", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXLayer_getProperty(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::experimental::TMXLayer* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXLayer_getProperty'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        cocos2d::Value ret = cobj->getProperty(arg0);
        ccvalue_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getProperty", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXLayer_setLayerSize(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::experimental::TMXLayer* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXLayer_setLayerSize'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Size arg0;

        cocos2d::Size* ptr2 = nullptr; ok &= sqval_to_size(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->setLayerSize(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setLayerSize", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXLayer_getLayerName(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::experimental::TMXLayer* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXLayer_getLayerName'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const std::string& ret = cobj->getLayerName();
        sq_pushstring(vm, (const SQChar *)ret.c_str(), -1);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getLayerName", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXLayer_setTileSet(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::experimental::TMXLayer* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXLayer_setTileSet'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::TMXTilesetInfo* arg0;

        ok &= sqval_to_object<cocos2d::TMXTilesetInfo>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setTileSet(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setTileSet", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXLayer_getTileSet(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::experimental::TMXLayer* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXLayer_getTileSet'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::TMXTilesetInfo* ret = cobj->getTileSet();
        object_to_sqval<cocos2d::TMXTilesetInfo>(vm, "cc.TMXTilesetInfo", (cocos2d::TMXTilesetInfo*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getTileSet", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXLayer_getTileAt(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::experimental::TMXLayer* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXLayer_getTileAt'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec2 arg0;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cocos2d::Sprite* ret = cobj->getTileAt(arg0);
        object_to_sqval<cocos2d::Sprite>(vm, "cc.Sprite", (cocos2d::Sprite*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getTileAt", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXLayer_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 3)
    {
        cocos2d::TMXTilesetInfo* arg0;
        cocos2d::TMXLayerInfo* arg1;
        cocos2d::TMXMapInfo* arg2;
        ok &= sqval_to_object<cocos2d::TMXTilesetInfo>(vm, 2, &arg0);
        ok &= sqval_to_object<cocos2d::TMXLayerInfo>(vm, 3, &arg1);
        ok &= sqval_to_object<cocos2d::TMXMapInfo>(vm, 4, &arg2);
        if(!ok)
            return 0;
        cocos2d::experimental::TMXLayer* ret = cocos2d::experimental::TMXLayer::create(arg0, arg1, arg2);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "ccexp.TMXLayer");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 3);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXLayer_constructor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::experimental::TMXLayer* cobj = nullptr;
    bool ok  = true;

    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj = new cocos2d::experimental::TMXLayer();
        sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
        cobj->retain();
        sq_setreleasehook(vm, 1, squirrel_releasehook_Ref);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "TMXLayer", (int)argc, 0);
    return 0;
}


SQInteger squirrel_cocos2dx_TMXLayer_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "ccexp.TMXLayer", -1);
    return 1;
}

void squirrel_cocos2dx_TMXLayer_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::experimental::TMXLayer", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_TMXLayer(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("TMXLayer"), -1);


    sq_pushstring(vm, _SC("Node"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "constructor", squirrel_cocos2dx_TMXLayer_constructor);
    to_squirrel_function(vm, "getPositionAt", squirrel_cocos2dx_TMXLayer_getPositionAt);
    to_squirrel_function(vm, "setLayerOrientation", squirrel_cocos2dx_TMXLayer_setLayerOrientation);
    to_squirrel_function(vm, "getLayerSize", squirrel_cocos2dx_TMXLayer_getLayerSize);
    to_squirrel_function(vm, "setMapTileSize", squirrel_cocos2dx_TMXLayer_setMapTileSize);
    to_squirrel_function(vm, "getLayerOrientation", squirrel_cocos2dx_TMXLayer_getLayerOrientation);
    to_squirrel_function(vm, "setProperties", squirrel_cocos2dx_TMXLayer_setProperties);
    to_squirrel_function(vm, "setLayerName", squirrel_cocos2dx_TMXLayer_setLayerName);
    to_squirrel_function(vm, "removeTileAt", squirrel_cocos2dx_TMXLayer_removeTileAt);
    to_squirrel_function(vm, "getProperties", squirrel_cocos2dx_TMXLayer_getProperties);
    to_squirrel_function(vm, "setupTiles", squirrel_cocos2dx_TMXLayer_setupTiles);
    to_squirrel_function(vm, "setupTileSprite", squirrel_cocos2dx_TMXLayer_setupTileSprite);
    to_squirrel_function(vm, "setTileGID", squirrel_cocos2dx_TMXLayer_setTileGID);
    to_squirrel_function(vm, "getMapTileSize", squirrel_cocos2dx_TMXLayer_getMapTileSize);
    to_squirrel_function(vm, "getProperty", squirrel_cocos2dx_TMXLayer_getProperty);
    to_squirrel_function(vm, "setLayerSize", squirrel_cocos2dx_TMXLayer_setLayerSize);
    to_squirrel_function(vm, "getLayerName", squirrel_cocos2dx_TMXLayer_getLayerName);
    to_squirrel_function(vm, "setTileSet", squirrel_cocos2dx_TMXLayer_setTileSet);
    to_squirrel_function(vm, "getTileSet", squirrel_cocos2dx_TMXLayer_getTileSet);
    to_squirrel_function(vm, "getTileAt", squirrel_cocos2dx_TMXLayer_getTileAt);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_TMXLayer_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_TMXLayer_typeof_meta);

    to_squirrel_variable_integer(vm, "FAST_TMX_ORIENTATION_ORTHO", (SQInteger)cocos2d::experimental::TMXLayer::FAST_TMX_ORIENTATION_ORTHO, SQTrue);
    to_squirrel_variable_integer(vm, "FAST_TMX_ORIENTATION_HEX", (SQInteger)cocos2d::experimental::TMXLayer::FAST_TMX_ORIENTATION_HEX, SQTrue);
    to_squirrel_variable_integer(vm, "FAST_TMX_ORIENTATION_ISO", (SQInteger)cocos2d::experimental::TMXLayer::FAST_TMX_ORIENTATION_ISO, SQTrue);


    squirrel_cocos2dx_TMXLayer_push_c_class(vm);

    std::string typeName = typeid(cocos2d::experimental::TMXLayer).name();
    g_sqType[typeName] = "ccexp.TMXLayer";

    return 1;
}
SQInteger squirrel_cocos2dx_FlipX_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        bool arg0;
        ok &= sqval_to_boolean(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::FlipX* ret = cocos2d::FlipX::create(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.FlipX");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_FlipX_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.FlipX", -1);
    return 1;
}

void squirrel_cocos2dx_FlipX_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::FlipX", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionInstant", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_FlipX(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("FlipX"), -1);


    sq_pushstring(vm, _SC("ActionInstant"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_FlipX_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_FlipX_typeof_meta);



    squirrel_cocos2dx_FlipX_push_c_class(vm);

    std::string typeName = typeid(cocos2d::FlipX).name();
    g_sqType[typeName] = "cc.FlipX";

    return 1;
}
SQInteger squirrel_cocos2dx_FlipY_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        bool arg0;
        ok &= sqval_to_boolean(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::FlipY* ret = cocos2d::FlipY::create(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.FlipY");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_FlipY_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.FlipY", -1);
    return 1;
}

void squirrel_cocos2dx_FlipY_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::FlipY", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionInstant", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_FlipY(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("FlipY"), -1);


    sq_pushstring(vm, _SC("ActionInstant"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_FlipY_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_FlipY_typeof_meta);



    squirrel_cocos2dx_FlipY_push_c_class(vm);

    std::string typeName = typeid(cocos2d::FlipY).name();
    g_sqType[typeName] = "cc.FlipY";

    return 1;
}
SQInteger squirrel_cocos2dx_EventKeyboard_constructor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::EventKeyboard* cobj = nullptr;
    bool ok  = true;

    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        cocos2d::EventKeyboard::KeyCode arg0;
        bool arg1;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);

        ok &= sqval_to_boolean(vm, 3, &arg1);
        if (!ok)
            return 0;
        cobj = new cocos2d::EventKeyboard(arg0, arg1);
        sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
        cobj->retain();
        sq_setreleasehook(vm, 1, squirrel_releasehook_Ref);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "EventKeyboard", (int)argc, 2);
    return 0;
}


SQInteger squirrel_cocos2dx_EventKeyboard_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.EventKeyboard", -1);
    return 1;
}

void squirrel_cocos2dx_EventKeyboard_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::EventKeyboard", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Event", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_EventKeyboard(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("EventKeyboard"), -1);


    sq_pushstring(vm, _SC("Event"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "constructor", squirrel_cocos2dx_EventKeyboard_constructor);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_EventKeyboard_typeof_meta);


    sq_pushstring(vm, _SC("KeyCode"), -1);
    sq_newtable(vm);
    to_squirrel_variable_integer(vm, "KEY_NONE", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_NONE, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_PAUSE", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_PAUSE, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_SCROLL_LOCK", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_SCROLL_LOCK, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_PRINT", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_PRINT, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_SYSREQ", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_SYSREQ, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_BREAK", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_BREAK, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_ESCAPE", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_ESCAPE, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_BACK", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_BACK, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_BACKSPACE", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_BACKSPACE, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_TAB", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_TAB, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_BACK_TAB", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_BACK_TAB, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_RETURN", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_RETURN, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_CAPS_LOCK", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_CAPS_LOCK, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_SHIFT", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_SHIFT, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_LEFT_SHIFT", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_LEFT_SHIFT, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_RIGHT_SHIFT", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_RIGHT_SHIFT, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_CTRL", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_CTRL, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_LEFT_CTRL", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_LEFT_CTRL, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_RIGHT_CTRL", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_RIGHT_CTRL, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_ALT", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_ALT, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_LEFT_ALT", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_LEFT_ALT, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_RIGHT_ALT", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_RIGHT_ALT, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_MENU", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_MENU, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_HYPER", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_HYPER, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_INSERT", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_INSERT, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_HOME", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_HOME, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_PG_UP", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_PG_UP, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_DELETE", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_DELETE, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_END", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_END, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_PG_DOWN", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_PG_DOWN, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_LEFT_ARROW", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_LEFT_ARROW, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_RIGHT_ARROW", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_RIGHT_ARROW, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_UP_ARROW", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_UP_ARROW, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_DOWN_ARROW", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_DOWN_ARROW, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_NUM_LOCK", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_NUM_LOCK, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_KP_PLUS", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_KP_PLUS, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_KP_MINUS", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_KP_MINUS, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_KP_MULTIPLY", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_KP_MULTIPLY, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_KP_DIVIDE", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_KP_DIVIDE, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_KP_ENTER", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_KP_ENTER, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_KP_HOME", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_KP_HOME, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_KP_UP", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_KP_UP, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_KP_PG_UP", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_KP_PG_UP, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_KP_LEFT", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_KP_LEFT, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_KP_FIVE", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_KP_FIVE, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_KP_RIGHT", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_KP_RIGHT, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_KP_END", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_KP_END, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_KP_DOWN", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_KP_DOWN, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_KP_PG_DOWN", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_KP_PG_DOWN, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_KP_INSERT", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_KP_INSERT, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_KP_DELETE", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_KP_DELETE, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_F1", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_F1, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_F2", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_F2, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_F3", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_F3, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_F4", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_F4, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_F5", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_F5, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_F6", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_F6, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_F7", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_F7, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_F8", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_F8, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_F9", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_F9, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_F10", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_F10, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_F11", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_F11, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_F12", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_F12, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_SPACE", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_SPACE, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_EXCLAM", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_EXCLAM, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_QUOTE", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_QUOTE, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_NUMBER", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_NUMBER, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_DOLLAR", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_DOLLAR, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_PERCENT", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_PERCENT, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_CIRCUMFLEX", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_CIRCUMFLEX, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_AMPERSAND", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_AMPERSAND, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_APOSTROPHE", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_APOSTROPHE, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_LEFT_PARENTHESIS", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_LEFT_PARENTHESIS, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_RIGHT_PARENTHESIS", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_RIGHT_PARENTHESIS, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_ASTERISK", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_ASTERISK, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_PLUS", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_PLUS, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_COMMA", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_COMMA, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_MINUS", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_MINUS, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_PERIOD", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_PERIOD, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_SLASH", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_SLASH, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_0", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_0, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_1", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_1, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_2", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_2, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_3", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_3, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_4", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_4, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_5", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_5, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_6", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_6, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_7", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_7, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_8", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_8, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_9", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_9, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_COLON", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_COLON, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_SEMICOLON", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_SEMICOLON, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_LESS_THAN", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_LESS_THAN, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_EQUAL", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_EQUAL, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_GREATER_THAN", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_GREATER_THAN, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_QUESTION", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_QUESTION, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_AT", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_AT, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_CAPITAL_A", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_A, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_CAPITAL_B", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_B, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_CAPITAL_C", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_C, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_CAPITAL_D", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_D, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_CAPITAL_E", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_E, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_CAPITAL_F", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_F, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_CAPITAL_G", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_G, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_CAPITAL_H", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_H, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_CAPITAL_I", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_I, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_CAPITAL_J", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_J, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_CAPITAL_K", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_K, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_CAPITAL_L", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_L, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_CAPITAL_M", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_M, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_CAPITAL_N", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_N, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_CAPITAL_O", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_O, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_CAPITAL_P", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_P, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_CAPITAL_Q", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_Q, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_CAPITAL_R", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_R, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_CAPITAL_S", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_S, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_CAPITAL_T", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_T, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_CAPITAL_U", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_U, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_CAPITAL_V", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_V, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_CAPITAL_W", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_W, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_CAPITAL_X", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_X, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_CAPITAL_Y", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_Y, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_CAPITAL_Z", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_Z, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_LEFT_BRACKET", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_LEFT_BRACKET, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_BACK_SLASH", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_BACK_SLASH, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_RIGHT_BRACKET", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_RIGHT_BRACKET, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_UNDERSCORE", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_UNDERSCORE, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_GRAVE", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_GRAVE, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_A", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_A, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_B", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_B, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_C", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_C, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_D", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_D, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_E", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_E, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_F", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_F, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_G", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_G, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_H", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_H, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_I", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_I, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_J", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_J, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_K", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_K, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_L", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_L, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_M", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_M, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_N", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_N, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_O", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_O, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_P", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_P, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_Q", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_Q, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_R", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_R, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_S", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_S, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_T", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_T, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_U", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_U, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_V", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_V, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_W", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_W, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_X", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_X, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_Y", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_Y, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_Z", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_Z, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_LEFT_BRACE", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_LEFT_BRACE, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_BAR", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_BAR, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_RIGHT_BRACE", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_RIGHT_BRACE, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_TILDE", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_TILDE, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_EURO", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_EURO, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_POUND", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_POUND, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_YEN", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_YEN, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_MIDDLE_DOT", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_MIDDLE_DOT, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_SEARCH", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_SEARCH, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_DPAD_LEFT", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_DPAD_LEFT, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_DPAD_RIGHT", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_DPAD_RIGHT, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_DPAD_UP", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_DPAD_UP, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_DPAD_DOWN", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_DPAD_DOWN, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_DPAD_CENTER", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_DPAD_CENTER, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_ENTER", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_ENTER, SQTrue);
    to_squirrel_variable_integer(vm, "KEY_PLAY", (SQInteger)cocos2d::EventKeyboard::KeyCode::KEY_PLAY, SQTrue);
    sq_newslot(vm, -3, SQTrue);

    squirrel_cocos2dx_EventKeyboard_push_c_class(vm);

    std::string typeName = typeid(cocos2d::EventKeyboard).name();
    g_sqType[typeName] = "cc.EventKeyboard";

    return 1;
}
SQInteger squirrel_cocos2dx_PhysicsMaterial_constructor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::PhysicsMaterial* cobj = nullptr;
    bool ok  = true;

    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 3) {
            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);

            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);

            if (!ok) { break; }
            float arg2;
            ok &= sqval_to_float(vm, 4, &arg2);

            if (!ok) { break; }
            cobj = new cocos2d::PhysicsMaterial(arg0, arg1, arg2);
            sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
            sq_setreleasehook(vm, 1, squirrel_releasehook_PhysicsMaterial);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 0) {

            cobj = new cocos2d::PhysicsMaterial();
            sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
            sq_setreleasehook(vm, 1, squirrel_releasehook_PhysicsMaterial);
            return 1;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "PhysicsMaterial", (int)argc, 0);
    return 0;
}


SQInteger squirrel_cocos2dx_PhysicsMaterial_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.PhysicsMaterial", -1);
    return 1;
}

SQInteger squirrel_cocos2dx_PhysicsMaterial_get_meta(HSQUIRRELVM vm)
{
    cocos2d::PhysicsMaterial *cobj = nullptr;
    if (SQ_FAILED(sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0))) {
        CCLOG("cocos2d::PhysicsMaterial sq_getinstanceup failed.");
        sq_pushnull(vm);
        return 1;
    }

    const char *varName = nullptr;
    sq_getstring(vm, 2, &varName);
    
    do {
        if (strcmp(varName, "density") == 0) {
            sq_pushfloat(vm, (SQFloat)cobj->density);
            break;
        }
        if (strcmp(varName, "restitution") == 0) {
            sq_pushfloat(vm, (SQFloat)cobj->restitution);
            break;
        }
        if (strcmp(varName, "friction") == 0) {
            sq_pushfloat(vm, (SQFloat)cobj->friction);
            break;
        }

        return 0;
        
    } while(0);

    return 1;
}

SQInteger squirrel_cocos2dx_PhysicsMaterial_set_meta(HSQUIRRELVM vm)
{
    cocos2d::PhysicsMaterial *cobj = nullptr;
    if (SQ_FAILED(sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0))) {
        CCLOG("cocos2d::PhysicsMaterial sq_getinstanceup failed.");
        return 0;
    }

    bool ok  = true;
    const char *varName = nullptr;
    sq_getstring(vm, 2, &varName);
    
    do {
        if (strcmp(varName, "density") == 0) {
            ok &= sqval_to_float(vm, 3, &cobj->density);
            if (! ok) {
                return 0;
            }
            break;
        }
        if (strcmp(varName, "restitution") == 0) {
            ok &= sqval_to_float(vm, 3, &cobj->restitution);
            if (! ok) {
                return 0;
            }
            break;
        }
        if (strcmp(varName, "friction") == 0) {
            ok &= sqval_to_float(vm, 3, &cobj->friction);
            if (! ok) {
                return 0;
            }
            break;
        }

        CCLOG("specified variable is not found in cocos2d::PhysicsMaterial");
    } while(0);

    return 0;
}

void squirrel_cocos2dx_PhysicsMaterial_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::PhysicsMaterial", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_PhysicsMaterial(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("PhysicsMaterial"), -1);

    sq_newclass(vm, SQFalse);

    to_squirrel_function(vm, "constructor", squirrel_cocos2dx_PhysicsMaterial_constructor);

    to_squirrel_function(vm, "_get", squirrel_cocos2dx_PhysicsMaterial_get_meta);
    to_squirrel_function(vm, "_set", squirrel_cocos2dx_PhysicsMaterial_set_meta);
    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_PhysicsMaterial_typeof_meta);



    squirrel_cocos2dx_PhysicsMaterial_push_c_class(vm);

    std::string typeName = typeid(cocos2d::PhysicsMaterial).name();
    g_sqType[typeName] = "cc.PhysicsMaterial";

    return 1;
}
SQInteger squirrel_cocos2dx_TransitionSplitCols_action(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TransitionSplitCols* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TransitionSplitCols_action'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::ActionInterval* ret = cobj->action();
        object_to_sqval<cocos2d::ActionInterval>(vm, "cc.ActionInterval", (cocos2d::ActionInterval*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "action", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_TransitionSplitCols_easeActionWithAction(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TransitionSplitCols* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TransitionSplitCols_easeActionWithAction'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::ActionInterval* arg0;

        ok &= sqval_to_object<cocos2d::ActionInterval>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cocos2d::ActionInterval* ret = cobj->easeActionWithAction(arg0);
        object_to_sqval<cocos2d::ActionInterval>(vm, "cc.ActionInterval", (cocos2d::ActionInterval*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "easeActionWithAction", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TransitionSplitCols_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        float arg0;
        cocos2d::Scene* arg1;
        ok &= sqval_to_float(vm, 2, &arg0);
        ok &= sqval_to_object<cocos2d::Scene>(vm, 3, &arg1);
        if(!ok)
            return 0;
        cocos2d::TransitionSplitCols* ret = cocos2d::TransitionSplitCols::create(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.TransitionSplitCols");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_TransitionSplitCols_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.TransitionSplitCols", -1);
    return 1;
}

void squirrel_cocos2dx_TransitionSplitCols_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::TransitionSplitCols", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::TransitionScene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Scene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TransitionEaseScene", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_TransitionSplitCols(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("TransitionSplitCols"), -1);


    sq_pushstring(vm, _SC("TransitionScene"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "action", squirrel_cocos2dx_TransitionSplitCols_action);
    to_squirrel_function(vm, "easeActionWithAction", squirrel_cocos2dx_TransitionSplitCols_easeActionWithAction);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_TransitionSplitCols_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_TransitionSplitCols_typeof_meta);



    squirrel_cocos2dx_TransitionSplitCols_push_c_class(vm);

    std::string typeName = typeid(cocos2d::TransitionSplitCols).name();
    g_sqType[typeName] = "cc.TransitionSplitCols";

    return 1;
}
SQInteger squirrel_cocos2dx_Timer_getInterval(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Timer* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Timer_getInterval'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getInterval();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getInterval", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Timer_setupTimerWithInterval(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Timer* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Timer_setupTimerWithInterval'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 3) 
    {
        float arg0;
        unsigned int arg1;
        float arg2;

        ok &= sqval_to_float(vm, 2, &arg0);

        ok &= sqval_to_uint32(vm, 3, &arg1);

        ok &= sqval_to_float(vm, 4, &arg2);
        if (!ok)
            return 0;
        cobj->setupTimerWithInterval(arg0, arg1, arg2);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setupTimerWithInterval", (int)argc, 3);
    return 0;
}
SQInteger squirrel_cocos2dx_Timer_setInterval(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Timer* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Timer_setInterval'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setInterval(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setInterval", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Timer_update(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Timer* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Timer_update'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->update(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "update", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Timer_trigger(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Timer* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Timer_trigger'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->trigger();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "trigger", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Timer_cancel(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Timer* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Timer_cancel'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->cancel();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "cancel", (int)argc, 0);
    return 0;
}

SQInteger squirrel_cocos2dx_Timer_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.Timer", -1);
    return 1;
}

void squirrel_cocos2dx_Timer_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::Timer", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_Timer(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("Timer"), -1);


    sq_pushstring(vm, _SC("Ref"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "getInterval", squirrel_cocos2dx_Timer_getInterval);
    to_squirrel_function(vm, "setupTimerWithInterval", squirrel_cocos2dx_Timer_setupTimerWithInterval);
    to_squirrel_function(vm, "setInterval", squirrel_cocos2dx_Timer_setInterval);
    to_squirrel_function(vm, "update", squirrel_cocos2dx_Timer_update);
    to_squirrel_function(vm, "trigger", squirrel_cocos2dx_Timer_trigger);
    to_squirrel_function(vm, "cancel", squirrel_cocos2dx_Timer_cancel);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_Timer_typeof_meta);



    squirrel_cocos2dx_Timer_push_c_class(vm);

    std::string typeName = typeid(cocos2d::Timer).name();
    g_sqType[typeName] = "cc.Timer";

    return 1;
}
SQInteger squirrel_cocos2dx_FadeTo_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        float arg0;
        uint16_t arg1;
        ok &= sqval_to_float(vm, 2, &arg0);
        ok &= sqval_to_uint16(vm, 3, (uint16_t *)&arg1);
        if(!ok)
            return 0;
        cocos2d::FadeTo* ret = cocos2d::FadeTo::create(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.FadeTo");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_FadeTo_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.FadeTo", -1);
    return 1;
}

void squirrel_cocos2dx_FadeTo_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::FadeTo", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_FadeTo(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("FadeTo"), -1);


    sq_pushstring(vm, _SC("ActionInterval"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_FadeTo_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_FadeTo_typeof_meta);



    squirrel_cocos2dx_FadeTo_push_c_class(vm);

    std::string typeName = typeid(cocos2d::FadeTo).name();
    g_sqType[typeName] = "cc.FadeTo";

    return 1;
}
SQInteger squirrel_cocos2dx_ProgressTimer_setReverseProgress(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ProgressTimer* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ProgressTimer_setReverseProgress'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setReverseProgress(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setReverseProgress", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ProgressTimer_isReverseDirection(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ProgressTimer* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ProgressTimer_isReverseDirection'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isReverseDirection();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isReverseDirection", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ProgressTimer_setBarChangeRate(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ProgressTimer* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ProgressTimer_setBarChangeRate'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec2 arg0;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->setBarChangeRate(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setBarChangeRate", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ProgressTimer_getPercentage(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ProgressTimer* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ProgressTimer_getPercentage'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getPercentage();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getPercentage", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ProgressTimer_setSprite(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ProgressTimer* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ProgressTimer_setSprite'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Sprite* arg0;

        ok &= sqval_to_object<cocos2d::Sprite>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setSprite(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setSprite", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ProgressTimer_getType(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ProgressTimer* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ProgressTimer_getType'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        int ret = (int)cobj->getType();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getType", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ProgressTimer_getSprite(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ProgressTimer* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ProgressTimer_getSprite'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Sprite* ret = cobj->getSprite();
        object_to_sqval<cocos2d::Sprite>(vm, "cc.Sprite", (cocos2d::Sprite*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getSprite", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ProgressTimer_setMidpoint(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ProgressTimer* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ProgressTimer_setMidpoint'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec2 arg0;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->setMidpoint(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setMidpoint", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ProgressTimer_getBarChangeRate(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ProgressTimer* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ProgressTimer_getBarChangeRate'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Vec2 ret = cobj->getBarChangeRate();
        vec2_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getBarChangeRate", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ProgressTimer_setReverseDirection(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ProgressTimer* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ProgressTimer_setReverseDirection'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setReverseDirection(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setReverseDirection", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ProgressTimer_getMidpoint(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ProgressTimer* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ProgressTimer_getMidpoint'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Vec2 ret = cobj->getMidpoint();
        vec2_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getMidpoint", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ProgressTimer_setPercentage(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ProgressTimer* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ProgressTimer_setPercentage'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setPercentage(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setPercentage", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ProgressTimer_setType(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ProgressTimer* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ProgressTimer_setType'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::ProgressTimer::Type arg0;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if (!ok)
            return 0;
        cobj->setType(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setType", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ProgressTimer_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        cocos2d::Sprite* arg0;
        ok &= sqval_to_object<cocos2d::Sprite>(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::ProgressTimer* ret = cocos2d::ProgressTimer::create(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.ProgressTimer");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_ProgressTimer_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.ProgressTimer", -1);
    return 1;
}

void squirrel_cocos2dx_ProgressTimer_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::ProgressTimer", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_ProgressTimer(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("ProgressTimer"), -1);


    sq_pushstring(vm, _SC("Node"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "setReverseProgress", squirrel_cocos2dx_ProgressTimer_setReverseProgress);
    to_squirrel_function(vm, "isReverseDirection", squirrel_cocos2dx_ProgressTimer_isReverseDirection);
    to_squirrel_function(vm, "setBarChangeRate", squirrel_cocos2dx_ProgressTimer_setBarChangeRate);
    to_squirrel_function(vm, "getPercentage", squirrel_cocos2dx_ProgressTimer_getPercentage);
    to_squirrel_function(vm, "setSprite", squirrel_cocos2dx_ProgressTimer_setSprite);
    to_squirrel_function(vm, "getType", squirrel_cocos2dx_ProgressTimer_getType);
    to_squirrel_function(vm, "getSprite", squirrel_cocos2dx_ProgressTimer_getSprite);
    to_squirrel_function(vm, "setMidpoint", squirrel_cocos2dx_ProgressTimer_setMidpoint);
    to_squirrel_function(vm, "getBarChangeRate", squirrel_cocos2dx_ProgressTimer_getBarChangeRate);
    to_squirrel_function(vm, "setReverseDirection", squirrel_cocos2dx_ProgressTimer_setReverseDirection);
    to_squirrel_function(vm, "getMidpoint", squirrel_cocos2dx_ProgressTimer_getMidpoint);
    to_squirrel_function(vm, "setPercentage", squirrel_cocos2dx_ProgressTimer_setPercentage);
    to_squirrel_function(vm, "setType", squirrel_cocos2dx_ProgressTimer_setType);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_ProgressTimer_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_ProgressTimer_typeof_meta);


    sq_pushstring(vm, _SC("Type"), -1);
    sq_newtable(vm);
    to_squirrel_variable_integer(vm, "RADIAL", (SQInteger)cocos2d::ProgressTimer::Type::RADIAL, SQTrue);
    to_squirrel_variable_integer(vm, "BAR", (SQInteger)cocos2d::ProgressTimer::Type::BAR, SQTrue);
    sq_newslot(vm, -3, SQTrue);

    squirrel_cocos2dx_ProgressTimer_push_c_class(vm);

    std::string typeName = typeid(cocos2d::ProgressTimer).name();
    g_sqType[typeName] = "cc.ProgressTimer";

    return 1;
}
SQInteger squirrel_cocos2dx_RepeatForever_setInnerAction(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::RepeatForever* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_RepeatForever_setInnerAction'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::ActionInterval* arg0;

        ok &= sqval_to_object<cocos2d::ActionInterval>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setInnerAction(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setInnerAction", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_RepeatForever_getInnerAction(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::RepeatForever* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_RepeatForever_getInnerAction'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::ActionInterval* ret = cobj->getInnerAction();
        object_to_sqval<cocos2d::ActionInterval>(vm, "cc.ActionInterval", (cocos2d::ActionInterval*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getInnerAction", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_RepeatForever_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        cocos2d::ActionInterval* arg0;
        ok &= sqval_to_object<cocos2d::ActionInterval>(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::RepeatForever* ret = cocos2d::RepeatForever::create(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.RepeatForever");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_RepeatForever_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.RepeatForever", -1);
    return 1;
}

void squirrel_cocos2dx_RepeatForever_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::RepeatForever", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_RepeatForever(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("RepeatForever"), -1);


    sq_pushstring(vm, _SC("ActionInterval"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "setInnerAction", squirrel_cocos2dx_RepeatForever_setInnerAction);
    to_squirrel_function(vm, "getInnerAction", squirrel_cocos2dx_RepeatForever_getInnerAction);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_RepeatForever_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_RepeatForever_typeof_meta);



    squirrel_cocos2dx_RepeatForever_push_c_class(vm);

    std::string typeName = typeid(cocos2d::RepeatForever).name();
    g_sqType[typeName] = "cc.RepeatForever";

    return 1;
}
SQInteger squirrel_cocos2dx_Place_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        cocos2d::Vec2 arg0;
        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        if(!ok)
            return 0;
        cocos2d::Place* ret = cocos2d::Place::create(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.Place");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_Place_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.Place", -1);
    return 1;
}

void squirrel_cocos2dx_Place_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::Place", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionInstant", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_Place(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("Place"), -1);


    sq_pushstring(vm, _SC("ActionInstant"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_Place_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_Place_typeof_meta);



    squirrel_cocos2dx_Place_push_c_class(vm);

    std::string typeName = typeid(cocos2d::Place).name();
    g_sqType[typeName] = "cc.Place";

    return 1;
}
SQInteger squirrel_cocos2dx_EventListenerAcceleration_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        std::function<void (cocos2d::Acceleration *, cocos2d::Event *)> arg0;
        HSQOBJECT callback2;
        sq_getstackobj(vm, 2, &callback2);
        do {
			    // Lambda binding for squirrel
			    arg0 = [vm, callback2](cocos2d::Acceleration* larg0, cocos2d::Event* larg1) -> void {
			        if (sq_getrefcount(vm, (HSQOBJECT *)&callback2) > 0) {
			            sq_pushobject(vm, callback2);
			            sq_push(vm, 1);
			            acceleration_to_sqval(vm, larg0);
			            object_to_sqval<cocos2d::Event>(vm, "cc.Event", (cocos2d::Event*)larg1);
			            sq_call(vm, 3, SQFalse, SQTrue);
			            sq_poptop(vm);
			        }
			    };
			} while(0);
        if(!ok)
            return 0;
        cocos2d::EventListenerAcceleration* ret = cocos2d::EventListenerAcceleration::create(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.EventListenerAcceleration");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        _SquirrelObject *sqobj = (_SquirrelObject *)ret->_scriptObject;
        sqobj->addClosure("callback2", callback2);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_EventListenerAcceleration_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.EventListenerAcceleration", -1);
    return 1;
}

void squirrel_cocos2dx_EventListenerAcceleration_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::EventListenerAcceleration", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::EventListener", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_EventListenerAcceleration(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("EventListenerAcceleration"), -1);


    sq_pushstring(vm, _SC("EventListener"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_EventListenerAcceleration_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_EventListenerAcceleration_typeof_meta);

    to_squirrel_variable_string(vm, "LISTENER_ID", cocos2d::EventListenerAcceleration::LISTENER_ID, SQTrue);


    squirrel_cocos2dx_EventListenerAcceleration_push_c_class(vm);

    std::string typeName = typeid(cocos2d::EventListenerAcceleration).name();
    g_sqType[typeName] = "cc.EventListenerAcceleration";

    return 1;
}
SQInteger squirrel_cocos2dx_TiledGrid3D_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 1)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Size")) {
                break;
            }

            cocos2d::Size arg0;
            cocos2d::Size* ptr2 = nullptr; ok &= sqval_to_size(vm, 2, ptr2); arg0 = *ptr2;
            if (!ok) { break; }
            cocos2d::TiledGrid3D* ret = cocos2d::TiledGrid3D::create(arg0);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.TiledGrid3D");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 3)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Size")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Texture2D")) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_BOOL) {
                break;
            }

            cocos2d::Size arg0;
            cocos2d::Size* ptr2 = nullptr; ok &= sqval_to_size(vm, 2, ptr2); arg0 = *ptr2;
            if (!ok) { break; }
            cocos2d::Texture2D* arg1;
            ok &= sqval_to_object<cocos2d::Texture2D>(vm, 3, &arg1);
            if (!ok) { break; }
            bool arg2;
            ok &= sqval_to_boolean(vm, 4, &arg2);
            if (!ok) { break; }
            cocos2d::TiledGrid3D* ret = cocos2d::TiledGrid3D::create(arg0, arg1, arg2);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.TiledGrid3D");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d", "create", (int)argc, 3);
    return 0;
}
SQInteger squirrel_cocos2dx_TiledGrid3D_constructor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TiledGrid3D* cobj = nullptr;
    bool ok  = true;

    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj = new cocos2d::TiledGrid3D();
        sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
        cobj->retain();
        sq_setreleasehook(vm, 1, squirrel_releasehook_Ref);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "TiledGrid3D", (int)argc, 0);
    return 0;
}


SQInteger squirrel_cocos2dx_TiledGrid3D_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.TiledGrid3D", -1);
    return 1;
}

void squirrel_cocos2dx_TiledGrid3D_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::TiledGrid3D", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::GridBase", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_TiledGrid3D(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("TiledGrid3D"), -1);


    sq_pushstring(vm, _SC("GridBase"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "constructor", squirrel_cocos2dx_TiledGrid3D_constructor);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_TiledGrid3D_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_TiledGrid3D_typeof_meta);



    squirrel_cocos2dx_TiledGrid3D_push_c_class(vm);

    std::string typeName = typeid(cocos2d::TiledGrid3D).name();
    g_sqType[typeName] = "cc.TiledGrid3D";

    return 1;
}
SQInteger squirrel_cocos2dx_EaseBounceOut_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        cocos2d::ActionInterval* arg0;
        ok &= sqval_to_object<cocos2d::ActionInterval>(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::EaseBounceOut* ret = cocos2d::EaseBounceOut::create(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.EaseBounceOut");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_EaseBounceOut_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.EaseBounceOut", -1);
    return 1;
}

void squirrel_cocos2dx_EaseBounceOut_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::EaseBounceOut", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::EaseBounce", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionEase", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_EaseBounceOut(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("EaseBounceOut"), -1);


    sq_pushstring(vm, _SC("EaseBounce"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_EaseBounceOut_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_EaseBounceOut_typeof_meta);



    squirrel_cocos2dx_EaseBounceOut_push_c_class(vm);

    std::string typeName = typeid(cocos2d::EaseBounceOut).name();
    g_sqType[typeName] = "cc.EaseBounceOut";

    return 1;
}
SQInteger squirrel_cocos2dx_Color3B_equals(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Color3B* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Color3B_equals'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Color3B arg0;

        cocos2d::Color3B *ptr2 = nullptr; ok &= sqval_to_color3b(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        bool ret = cobj->equals(arg0);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "equals", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Color3B_constructor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Color3B* cobj = nullptr;
    bool ok  = true;

    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 3) {
            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }

            uint16_t arg0;
            ok &= sqval_to_uint16(vm, 2, (uint16_t *)&arg0);

            if (!ok) { break; }
            uint16_t arg1;
            ok &= sqval_to_uint16(vm, 3, (uint16_t *)&arg1);

            if (!ok) { break; }
            uint16_t arg2;
            ok &= sqval_to_uint16(vm, 4, (uint16_t *)&arg2);

            if (!ok) { break; }
            cobj = new cocos2d::Color3B(arg0, arg1, arg2);
            sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
            sq_setreleasehook(vm, 1, squirrel_releasehook_Color3B);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 0) {

            cobj = new cocos2d::Color3B();
            sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
            sq_setreleasehook(vm, 1, squirrel_releasehook_Color3B);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Color4B")) {
                break;
            }

            cocos2d::Color4B arg0;
            cocos2d::Color4B *ptr2 = nullptr; ok &=sqval_to_color4b(vm, 2, ptr2); arg0 = *ptr2;

            if (!ok) { break; }
            cobj = new cocos2d::Color3B(arg0);
            sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
            sq_setreleasehook(vm, 1, squirrel_releasehook_Color3B);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Color4F")) {
                break;
            }

            cocos2d::Color4F arg0;
            cocos2d::Color4F *ptr2 = nullptr; ok &=sqval_to_color4f(vm, 2, ptr2); arg0 = *ptr2;

            if (!ok) { break; }
            cobj = new cocos2d::Color3B(arg0);
            sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
            sq_setreleasehook(vm, 1, squirrel_releasehook_Color3B);
            return 1;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "Color3B", (int)argc, 1);
    return 0;
}


SQInteger squirrel_cocos2dx_Color3B_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.Color3B", -1);
    return 1;
}

SQInteger squirrel_cocos2dx_Color3B_get_meta(HSQUIRRELVM vm)
{
    cocos2d::Color3B *cobj = nullptr;
    if (SQ_FAILED(sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0))) {
        CCLOG("cocos2d::Color3B sq_getinstanceup failed.");
        sq_pushnull(vm);
        return 1;
    }

    const char *varName = nullptr;
    sq_getstring(vm, 2, &varName);
    
    do {
        if (strcmp(varName, "r") == 0) {
            sq_pushinteger(vm, (SQInteger)cobj->r);
            break;
        }
        if (strcmp(varName, "g") == 0) {
            sq_pushinteger(vm, (SQInteger)cobj->g);
            break;
        }
        if (strcmp(varName, "b") == 0) {
            sq_pushinteger(vm, (SQInteger)cobj->b);
            break;
        }

        return 0;
        
    } while(0);

    return 1;
}

SQInteger squirrel_cocos2dx_Color3B_set_meta(HSQUIRRELVM vm)
{
    cocos2d::Color3B *cobj = nullptr;
    if (SQ_FAILED(sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0))) {
        CCLOG("cocos2d::Color3B sq_getinstanceup failed.");
        return 0;
    }

    bool ok  = true;
    const char *varName = nullptr;
    sq_getstring(vm, 2, &varName);
    
    do {
        if (strcmp(varName, "r") == 0) {
            ok &= sqval_to_uint16(vm, 3, (uint16_t *)&cobj->r);
            if (! ok) {
                return 0;
            }
            break;
        }
        if (strcmp(varName, "g") == 0) {
            ok &= sqval_to_uint16(vm, 3, (uint16_t *)&cobj->g);
            if (! ok) {
                return 0;
            }
            break;
        }
        if (strcmp(varName, "b") == 0) {
            ok &= sqval_to_uint16(vm, 3, (uint16_t *)&cobj->b);
            if (! ok) {
                return 0;
            }
            break;
        }

        CCLOG("specified variable is not found in cocos2d::Color3B");
    } while(0);

    return 0;
}

void squirrel_cocos2dx_Color3B_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::Color3B", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_Color3B(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("Color3B"), -1);

    sq_newclass(vm, SQFalse);

    to_squirrel_function(vm, "constructor", squirrel_cocos2dx_Color3B_constructor);
    to_squirrel_function(vm, "equals", squirrel_cocos2dx_Color3B_equals);

    to_squirrel_function(vm, "_get", squirrel_cocos2dx_Color3B_get_meta);
    to_squirrel_function(vm, "_set", squirrel_cocos2dx_Color3B_set_meta);
    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_Color3B_typeof_meta);

    to_squirrel_variable_object(vm, "WHITE", (SQUserPointer)&cocos2d::Color3B::WHITE, SQTrue);
    to_squirrel_variable_object(vm, "YELLOW", (SQUserPointer)&cocos2d::Color3B::YELLOW, SQTrue);
    to_squirrel_variable_object(vm, "BLUE", (SQUserPointer)&cocos2d::Color3B::BLUE, SQTrue);
    to_squirrel_variable_object(vm, "GREEN", (SQUserPointer)&cocos2d::Color3B::GREEN, SQTrue);
    to_squirrel_variable_object(vm, "RED", (SQUserPointer)&cocos2d::Color3B::RED, SQTrue);
    to_squirrel_variable_object(vm, "MAGENTA", (SQUserPointer)&cocos2d::Color3B::MAGENTA, SQTrue);
    to_squirrel_variable_object(vm, "BLACK", (SQUserPointer)&cocos2d::Color3B::BLACK, SQTrue);
    to_squirrel_variable_object(vm, "ORANGE", (SQUserPointer)&cocos2d::Color3B::ORANGE, SQTrue);
    to_squirrel_variable_object(vm, "GRAY", (SQUserPointer)&cocos2d::Color3B::GRAY, SQTrue);


    squirrel_cocos2dx_Color3B_push_c_class(vm);

    std::string typeName = typeid(cocos2d::Color3B).name();
    g_sqType[typeName] = "cc.Color3B";

    return 1;
}
SQInteger squirrel_cocos2dx_TintBy_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 4)
    {
        float arg0;
        int32_t arg1;
        int32_t arg2;
        int32_t arg3;
        ok &= sqval_to_float(vm, 2, &arg0);
        ok &= sqval_to_int32(vm, 3, &arg1);
        ok &= sqval_to_int32(vm, 4, &arg2);
        ok &= sqval_to_int32(vm, 5, &arg3);
        if(!ok)
            return 0;
        cocos2d::TintBy* ret = cocos2d::TintBy::create(arg0, arg1, arg2, arg3);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.TintBy");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 4);
    return 0;
}

SQInteger squirrel_cocos2dx_TintBy_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.TintBy", -1);
    return 1;
}

void squirrel_cocos2dx_TintBy_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::TintBy", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_TintBy(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("TintBy"), -1);


    sq_pushstring(vm, _SC("ActionInterval"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_TintBy_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_TintBy_typeof_meta);



    squirrel_cocos2dx_TintBy_push_c_class(vm);

    std::string typeName = typeid(cocos2d::TintBy).name();
    g_sqType[typeName] = "cc.TintBy";

    return 1;
}
SQInteger squirrel_cocos2dx_TransitionShrinkGrow_easeActionWithAction(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TransitionShrinkGrow* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TransitionShrinkGrow_easeActionWithAction'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::ActionInterval* arg0;

        ok &= sqval_to_object<cocos2d::ActionInterval>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cocos2d::ActionInterval* ret = cobj->easeActionWithAction(arg0);
        object_to_sqval<cocos2d::ActionInterval>(vm, "cc.ActionInterval", (cocos2d::ActionInterval*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "easeActionWithAction", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TransitionShrinkGrow_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        float arg0;
        cocos2d::Scene* arg1;
        ok &= sqval_to_float(vm, 2, &arg0);
        ok &= sqval_to_object<cocos2d::Scene>(vm, 3, &arg1);
        if(!ok)
            return 0;
        cocos2d::TransitionShrinkGrow* ret = cocos2d::TransitionShrinkGrow::create(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.TransitionShrinkGrow");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_TransitionShrinkGrow_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.TransitionShrinkGrow", -1);
    return 1;
}

void squirrel_cocos2dx_TransitionShrinkGrow_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::TransitionShrinkGrow", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::TransitionScene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Scene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TransitionEaseScene", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_TransitionShrinkGrow(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("TransitionShrinkGrow"), -1);


    sq_pushstring(vm, _SC("TransitionScene"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "easeActionWithAction", squirrel_cocos2dx_TransitionShrinkGrow_easeActionWithAction);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_TransitionShrinkGrow_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_TransitionShrinkGrow_typeof_meta);



    squirrel_cocos2dx_TransitionShrinkGrow_push_c_class(vm);

    std::string typeName = typeid(cocos2d::TransitionShrinkGrow).name();
    g_sqType[typeName] = "cc.TransitionShrinkGrow";

    return 1;
}
SQInteger squirrel_cocos2dx_LabelTTF_enableShadow(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::LabelTTF* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_LabelTTF_enableShadow'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 3) 
    {
        cocos2d::Size arg0;
        float arg1;
        float arg2;

        cocos2d::Size* ptr2 = nullptr; ok &= sqval_to_size(vm, 2, ptr2); arg0 = *ptr2;

        ok &= sqval_to_float(vm, 3, &arg1);

        ok &= sqval_to_float(vm, 4, &arg2);
        if (!ok)
            return 0;
        cobj->enableShadow(arg0, arg1, arg2);
        return 0;
    }
    if (argc == 4) 
    {
        cocos2d::Size arg0;
        float arg1;
        float arg2;
        bool arg3;

        cocos2d::Size* ptr2 = nullptr; ok &= sqval_to_size(vm, 2, ptr2); arg0 = *ptr2;

        ok &= sqval_to_float(vm, 3, &arg1);

        ok &= sqval_to_float(vm, 4, &arg2);

        ok &= sqval_to_boolean(vm, 5, &arg3);
        if (!ok)
            return 0;
        cobj->enableShadow(arg0, arg1, arg2, arg3);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "enableShadow", (int)argc, 3);
    return 0;
}
SQInteger squirrel_cocos2dx_LabelTTF_setDimensions(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::LabelTTF* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_LabelTTF_setDimensions'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Size arg0;

        cocos2d::Size* ptr2 = nullptr; ok &= sqval_to_size(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->setDimensions(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setDimensions", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_LabelTTF_getFontSize(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::LabelTTF* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_LabelTTF_getFontSize'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getFontSize();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getFontSize", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_LabelTTF_getString(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::LabelTTF* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_LabelTTF_getString'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const std::string& ret = cobj->getString();
        sq_pushstring(vm, (const SQChar *)ret.c_str(), -1);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getString", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_LabelTTF_setFlippedY(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::LabelTTF* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_LabelTTF_setFlippedY'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setFlippedY(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setFlippedY", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_LabelTTF_setFlippedX(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::LabelTTF* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_LabelTTF_setFlippedX'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setFlippedX(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setFlippedX", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_LabelTTF_setTextDefinition(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::LabelTTF* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_LabelTTF_setTextDefinition'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::FontDefinition arg0;

        cocos2d::FontDefinition *ptr2 = nullptr; ok &= sqval_to_fontdefinition(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->setTextDefinition(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setTextDefinition", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_LabelTTF_setFontName(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::LabelTTF* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_LabelTTF_setFontName'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setFontName(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setFontName", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_LabelTTF_getHorizontalAlignment(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::LabelTTF* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_LabelTTF_getHorizontalAlignment'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        int ret = (int)cobj->getHorizontalAlignment();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getHorizontalAlignment", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_LabelTTF_initWithStringAndTextDefinition(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::LabelTTF* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_LabelTTF_initWithStringAndTextDefinition'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        std::string arg0;
        cocos2d::FontDefinition arg1;

        ok &= sqval_to_std_string(vm, 2, &arg0);

        cocos2d::FontDefinition *ptr3 = nullptr; ok &= sqval_to_fontdefinition(vm, 3, ptr3); arg1 = *ptr3;
        if (!ok)
            return 0;
        bool ret = cobj->initWithStringAndTextDefinition(arg0, arg1);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "initWithStringAndTextDefinition", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_LabelTTF_setString(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::LabelTTF* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_LabelTTF_setString'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setString(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setString", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_LabelTTF_initWithString(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::LabelTTF* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_LabelTTF_initWithString'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 3) 
    {
        std::string arg0;
        std::string arg1;
        float arg2;

        ok &= sqval_to_std_string(vm, 2, &arg0);

        ok &= sqval_to_std_string(vm, 3, &arg1);

        ok &= sqval_to_float(vm, 4, &arg2);
        if (!ok)
            return 0;
        bool ret = cobj->initWithString(arg0, arg1, arg2);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    if (argc == 4) 
    {
        std::string arg0;
        std::string arg1;
        float arg2;
        cocos2d::Size arg3;

        ok &= sqval_to_std_string(vm, 2, &arg0);

        ok &= sqval_to_std_string(vm, 3, &arg1);

        ok &= sqval_to_float(vm, 4, &arg2);

        cocos2d::Size* ptr5 = nullptr; ok &= sqval_to_size(vm, 5, ptr5); arg3 = *ptr5;
        if (!ok)
            return 0;
        bool ret = cobj->initWithString(arg0, arg1, arg2, arg3);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    if (argc == 5) 
    {
        std::string arg0;
        std::string arg1;
        float arg2;
        cocos2d::Size arg3;
        cocos2d::TextHAlignment arg4;

        ok &= sqval_to_std_string(vm, 2, &arg0);

        ok &= sqval_to_std_string(vm, 3, &arg1);

        ok &= sqval_to_float(vm, 4, &arg2);

        cocos2d::Size* ptr5 = nullptr; ok &= sqval_to_size(vm, 5, ptr5); arg3 = *ptr5;

        ok &= sqval_to_int32(vm, 6, (int *)&arg4);
        if (!ok)
            return 0;
        bool ret = cobj->initWithString(arg0, arg1, arg2, arg3, arg4);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    if (argc == 6) 
    {
        std::string arg0;
        std::string arg1;
        float arg2;
        cocos2d::Size arg3;
        cocos2d::TextHAlignment arg4;
        cocos2d::TextVAlignment arg5;

        ok &= sqval_to_std_string(vm, 2, &arg0);

        ok &= sqval_to_std_string(vm, 3, &arg1);

        ok &= sqval_to_float(vm, 4, &arg2);

        cocos2d::Size* ptr5 = nullptr; ok &= sqval_to_size(vm, 5, ptr5); arg3 = *ptr5;

        ok &= sqval_to_int32(vm, 6, (int *)&arg4);

        ok &= sqval_to_int32(vm, 7, (int *)&arg5);
        if (!ok)
            return 0;
        bool ret = cobj->initWithString(arg0, arg1, arg2, arg3, arg4, arg5);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "initWithString", (int)argc, 3);
    return 0;
}
SQInteger squirrel_cocos2dx_LabelTTF_setFontFillColor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::LabelTTF* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_LabelTTF_setFontFillColor'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Color3B arg0;

        cocos2d::Color3B *ptr2 = nullptr; ok &= sqval_to_color3b(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->setFontFillColor(arg0);
        return 0;
    }
    if (argc == 2) 
    {
        cocos2d::Color3B arg0;
        bool arg1;

        cocos2d::Color3B *ptr2 = nullptr; ok &= sqval_to_color3b(vm, 2, ptr2); arg0 = *ptr2;

        ok &= sqval_to_boolean(vm, 3, &arg1);
        if (!ok)
            return 0;
        cobj->setFontFillColor(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setFontFillColor", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_LabelTTF_getBlendFunc(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::LabelTTF* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_LabelTTF_getBlendFunc'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::BlendFunc& ret = cobj->getBlendFunc();
        blendfunc_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getBlendFunc", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_LabelTTF_enableStroke(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::LabelTTF* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_LabelTTF_enableStroke'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        cocos2d::Color3B arg0;
        float arg1;

        cocos2d::Color3B *ptr2 = nullptr; ok &= sqval_to_color3b(vm, 2, ptr2); arg0 = *ptr2;

        ok &= sqval_to_float(vm, 3, &arg1);
        if (!ok)
            return 0;
        cobj->enableStroke(arg0, arg1);
        return 0;
    }
    if (argc == 3) 
    {
        cocos2d::Color3B arg0;
        float arg1;
        bool arg2;

        cocos2d::Color3B *ptr2 = nullptr; ok &= sqval_to_color3b(vm, 2, ptr2); arg0 = *ptr2;

        ok &= sqval_to_float(vm, 3, &arg1);

        ok &= sqval_to_boolean(vm, 4, &arg2);
        if (!ok)
            return 0;
        cobj->enableStroke(arg0, arg1, arg2);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "enableStroke", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_LabelTTF_getDimensions(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::LabelTTF* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_LabelTTF_getDimensions'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::Size& ret = cobj->getDimensions();
        size_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getDimensions", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_LabelTTF_setVerticalAlignment(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::LabelTTF* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_LabelTTF_setVerticalAlignment'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::TextVAlignment arg0;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if (!ok)
            return 0;
        cobj->setVerticalAlignment(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setVerticalAlignment", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_LabelTTF_setFontSize(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::LabelTTF* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_LabelTTF_setFontSize'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setFontSize(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setFontSize", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_LabelTTF_getVerticalAlignment(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::LabelTTF* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_LabelTTF_getVerticalAlignment'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        int ret = (int)cobj->getVerticalAlignment();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getVerticalAlignment", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_LabelTTF_getTextDefinition(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::LabelTTF* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_LabelTTF_getTextDefinition'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::FontDefinition& ret = cobj->getTextDefinition();
        fontdefinition_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getTextDefinition", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_LabelTTF_setBlendFunc(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::LabelTTF* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_LabelTTF_setBlendFunc'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::BlendFunc arg0;

        cocos2d::BlendFunc *ptr2 = nullptr; ok &= sqval_to_blendfunc(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->setBlendFunc(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setBlendFunc", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_LabelTTF_getFontName(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::LabelTTF* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_LabelTTF_getFontName'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const std::string& ret = cobj->getFontName();
        sq_pushstring(vm, (const SQChar *)ret.c_str(), -1);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getFontName", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_LabelTTF_setHorizontalAlignment(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::LabelTTF* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_LabelTTF_setHorizontalAlignment'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::TextHAlignment arg0;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if (!ok)
            return 0;
        cobj->setHorizontalAlignment(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setHorizontalAlignment", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_LabelTTF_disableShadow(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::LabelTTF* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_LabelTTF_disableShadow'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->disableShadow();
        return 0;
    }
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->disableShadow(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "disableShadow", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_LabelTTF_disableStroke(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::LabelTTF* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_LabelTTF_disableStroke'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->disableStroke();
        return 0;
    }
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->disableStroke(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "disableStroke", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_LabelTTF_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 0)
        {


            cocos2d::LabelTTF* ret = cocos2d::LabelTTF::create();
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.LabelTTF");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 3)
        {

            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);
            if (!ok) { break; }
            std::string arg1;
            ok &= sqval_to_std_string(vm, 3, &arg1);
            if (!ok) { break; }
            float arg2;
            ok &= sqval_to_float(vm, 4, &arg2);
            if (!ok) { break; }
            cocos2d::LabelTTF* ret = cocos2d::LabelTTF::create(arg0, arg1, arg2);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.LabelTTF");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 4)
        {

            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INSTANCE || ! instanceof_cclass(vm, 5, "cocos2d::Size")) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);
            if (!ok) { break; }
            std::string arg1;
            ok &= sqval_to_std_string(vm, 3, &arg1);
            if (!ok) { break; }
            float arg2;
            ok &= sqval_to_float(vm, 4, &arg2);
            if (!ok) { break; }
            cocos2d::Size arg3;
            cocos2d::Size* ptr5 = nullptr; ok &= sqval_to_size(vm, 5, ptr5); arg3 = *ptr5;
            if (!ok) { break; }
            cocos2d::LabelTTF* ret = cocos2d::LabelTTF::create(arg0, arg1, arg2, arg3);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.LabelTTF");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 5)
        {

            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INSTANCE || ! instanceof_cclass(vm, 5, "cocos2d::Size")) {
                break;
            }
            if (sq_gettype(vm, 6) != OT_INSTANCE || ! instanceof_cclass(vm, 6, "cocos2d::TextHAlignment")) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);
            if (!ok) { break; }
            std::string arg1;
            ok &= sqval_to_std_string(vm, 3, &arg1);
            if (!ok) { break; }
            float arg2;
            ok &= sqval_to_float(vm, 4, &arg2);
            if (!ok) { break; }
            cocos2d::Size arg3;
            cocos2d::Size* ptr5 = nullptr; ok &= sqval_to_size(vm, 5, ptr5); arg3 = *ptr5;
            if (!ok) { break; }
            cocos2d::TextHAlignment arg4;
            ok &= sqval_to_int32(vm, 6, (int *)&arg4);
            if (!ok) { break; }
            cocos2d::LabelTTF* ret = cocos2d::LabelTTF::create(arg0, arg1, arg2, arg3, arg4);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.LabelTTF");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 6)
        {

            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INSTANCE || ! instanceof_cclass(vm, 5, "cocos2d::Size")) {
                break;
            }
            if (sq_gettype(vm, 6) != OT_INSTANCE || ! instanceof_cclass(vm, 6, "cocos2d::TextHAlignment")) {
                break;
            }
            if (sq_gettype(vm, 7) != OT_INSTANCE || ! instanceof_cclass(vm, 7, "cocos2d::TextVAlignment")) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);
            if (!ok) { break; }
            std::string arg1;
            ok &= sqval_to_std_string(vm, 3, &arg1);
            if (!ok) { break; }
            float arg2;
            ok &= sqval_to_float(vm, 4, &arg2);
            if (!ok) { break; }
            cocos2d::Size arg3;
            cocos2d::Size* ptr5 = nullptr; ok &= sqval_to_size(vm, 5, ptr5); arg3 = *ptr5;
            if (!ok) { break; }
            cocos2d::TextHAlignment arg4;
            ok &= sqval_to_int32(vm, 6, (int *)&arg4);
            if (!ok) { break; }
            cocos2d::TextVAlignment arg5;
            ok &= sqval_to_int32(vm, 7, (int *)&arg5);
            if (!ok) { break; }
            cocos2d::LabelTTF* ret = cocos2d::LabelTTF::create(arg0, arg1, arg2, arg3, arg4, arg5);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.LabelTTF");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d", "create", (int)argc, 3);
    return 0;
}
SQInteger squirrel_cocos2dx_LabelTTF_createWithFontDefinition_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        std::string arg0;
        cocos2d::FontDefinition arg1;
        ok &= sqval_to_std_string(vm, 2, &arg0);
        cocos2d::FontDefinition *ptr3 = nullptr; ok &= sqval_to_fontdefinition(vm, 3, ptr3); arg1 = *ptr3;
        if(!ok)
            return 0;
        cocos2d::LabelTTF* ret = cocos2d::LabelTTF::createWithFontDefinition(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.LabelTTF");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "createWithFontDefinition", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_LabelTTF_constructor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::LabelTTF* cobj = nullptr;
    bool ok  = true;

    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj = new cocos2d::LabelTTF();
        sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
        cobj->retain();
        sq_setreleasehook(vm, 1, squirrel_releasehook_Ref);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "LabelTTF", (int)argc, 0);
    return 0;
}


SQInteger squirrel_cocos2dx_LabelTTF_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.LabelTTF", -1);
    return 1;
}

void squirrel_cocos2dx_LabelTTF_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::LabelTTF", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::LabelProtocol", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::BlendProtocol", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_LabelTTF(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("LabelTTF"), -1);


    sq_pushstring(vm, _SC("Node"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "constructor", squirrel_cocos2dx_LabelTTF_constructor);
    to_squirrel_function(vm, "enableShadow", squirrel_cocos2dx_LabelTTF_enableShadow);
    to_squirrel_function(vm, "setDimensions", squirrel_cocos2dx_LabelTTF_setDimensions);
    to_squirrel_function(vm, "getFontSize", squirrel_cocos2dx_LabelTTF_getFontSize);
    to_squirrel_function(vm, "getString", squirrel_cocos2dx_LabelTTF_getString);
    to_squirrel_function(vm, "setFlippedY", squirrel_cocos2dx_LabelTTF_setFlippedY);
    to_squirrel_function(vm, "setFlippedX", squirrel_cocos2dx_LabelTTF_setFlippedX);
    to_squirrel_function(vm, "setTextDefinition", squirrel_cocos2dx_LabelTTF_setTextDefinition);
    to_squirrel_function(vm, "setFontName", squirrel_cocos2dx_LabelTTF_setFontName);
    to_squirrel_function(vm, "getHorizontalAlignment", squirrel_cocos2dx_LabelTTF_getHorizontalAlignment);
    to_squirrel_function(vm, "initWithStringAndTextDefinition", squirrel_cocos2dx_LabelTTF_initWithStringAndTextDefinition);
    to_squirrel_function(vm, "setString", squirrel_cocos2dx_LabelTTF_setString);
    to_squirrel_function(vm, "initWithString", squirrel_cocos2dx_LabelTTF_initWithString);
    to_squirrel_function(vm, "setFontFillColor", squirrel_cocos2dx_LabelTTF_setFontFillColor);
    to_squirrel_function(vm, "getBlendFunc", squirrel_cocos2dx_LabelTTF_getBlendFunc);
    to_squirrel_function(vm, "enableStroke", squirrel_cocos2dx_LabelTTF_enableStroke);
    to_squirrel_function(vm, "getDimensions", squirrel_cocos2dx_LabelTTF_getDimensions);
    to_squirrel_function(vm, "setVerticalAlignment", squirrel_cocos2dx_LabelTTF_setVerticalAlignment);
    to_squirrel_function(vm, "setFontSize", squirrel_cocos2dx_LabelTTF_setFontSize);
    to_squirrel_function(vm, "getVerticalAlignment", squirrel_cocos2dx_LabelTTF_getVerticalAlignment);
    to_squirrel_function(vm, "getTextDefinition", squirrel_cocos2dx_LabelTTF_getTextDefinition);
    to_squirrel_function(vm, "setBlendFunc", squirrel_cocos2dx_LabelTTF_setBlendFunc);
    to_squirrel_function(vm, "getFontName", squirrel_cocos2dx_LabelTTF_getFontName);
    to_squirrel_function(vm, "setHorizontalAlignment", squirrel_cocos2dx_LabelTTF_setHorizontalAlignment);
    to_squirrel_function(vm, "disableShadow", squirrel_cocos2dx_LabelTTF_disableShadow);
    to_squirrel_function(vm, "disableStroke", squirrel_cocos2dx_LabelTTF_disableStroke);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_LabelTTF_create_static, SQTrue);
    to_squirrel_function(vm, "createWithFontDefinition", squirrel_cocos2dx_LabelTTF_createWithFontDefinition_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_LabelTTF_typeof_meta);



    squirrel_cocos2dx_LabelTTF_push_c_class(vm);

    std::string typeName = typeid(cocos2d::LabelTTF).name();
    g_sqType[typeName] = "cc.LabelTTF";

    return 1;
}
SQInteger squirrel_cocos2dx_ClippingNode_hasContent(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ClippingNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ClippingNode_hasContent'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->hasContent();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "hasContent", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ClippingNode_setInverted(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ClippingNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ClippingNode_setInverted'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setInverted(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setInverted", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ClippingNode_setStencil(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ClippingNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ClippingNode_setStencil'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Node* arg0;

        ok &= sqval_to_object<cocos2d::Node>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setStencil(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setStencil", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ClippingNode_getAlphaThreshold(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ClippingNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ClippingNode_getAlphaThreshold'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getAlphaThreshold();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getAlphaThreshold", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ClippingNode_getStencil(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ClippingNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ClippingNode_getStencil'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Node* ret = cobj->getStencil();
        object_to_sqval<cocos2d::Node>(vm, "cc.Node", (cocos2d::Node*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getStencil", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ClippingNode_setAlphaThreshold(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ClippingNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ClippingNode_setAlphaThreshold'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setAlphaThreshold(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setAlphaThreshold", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ClippingNode_isInverted(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ClippingNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ClippingNode_isInverted'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isInverted();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isInverted", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ClippingNode_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 1)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Node")) {
                break;
            }

            cocos2d::Node* arg0;
            ok &= sqval_to_object<cocos2d::Node>(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::ClippingNode* ret = cocos2d::ClippingNode::create(arg0);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.ClippingNode");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 0)
        {


            cocos2d::ClippingNode* ret = cocos2d::ClippingNode::create();
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.ClippingNode");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d", "create", (int)argc, 0);
    return 0;
}

SQInteger squirrel_cocos2dx_ClippingNode_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.ClippingNode", -1);
    return 1;
}

void squirrel_cocos2dx_ClippingNode_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::ClippingNode", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_ClippingNode(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("ClippingNode"), -1);


    sq_pushstring(vm, _SC("Node"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "hasContent", squirrel_cocos2dx_ClippingNode_hasContent);
    to_squirrel_function(vm, "setInverted", squirrel_cocos2dx_ClippingNode_setInverted);
    to_squirrel_function(vm, "setStencil", squirrel_cocos2dx_ClippingNode_setStencil);
    to_squirrel_function(vm, "getAlphaThreshold", squirrel_cocos2dx_ClippingNode_getAlphaThreshold);
    to_squirrel_function(vm, "getStencil", squirrel_cocos2dx_ClippingNode_getStencil);
    to_squirrel_function(vm, "setAlphaThreshold", squirrel_cocos2dx_ClippingNode_setAlphaThreshold);
    to_squirrel_function(vm, "isInverted", squirrel_cocos2dx_ClippingNode_isInverted);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_ClippingNode_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_ClippingNode_typeof_meta);



    squirrel_cocos2dx_ClippingNode_push_c_class(vm);

    std::string typeName = typeid(cocos2d::ClippingNode).name();
    g_sqType[typeName] = "cc.ClippingNode";

    return 1;
}
SQInteger squirrel_cocos2dx_ParticleFlower_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        cocos2d::ParticleFlower* ret = cocos2d::ParticleFlower::create();
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.ParticleFlower");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleFlower_createWithTotalParticles_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if(!ok)
            return 0;
        cocos2d::ParticleFlower* ret = cocos2d::ParticleFlower::createWithTotalParticles(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.ParticleFlower");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "createWithTotalParticles", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_ParticleFlower_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.ParticleFlower", -1);
    return 1;
}

void squirrel_cocos2dx_ParticleFlower_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::ParticleFlower", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ParticleSystemQuad", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ParticleSystem", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TextureProtocol", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::BlendProtocol", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_ParticleFlower(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("ParticleFlower"), -1);


    sq_pushstring(vm, _SC("ParticleSystemQuad"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_ParticleFlower_create_static, SQTrue);
    to_squirrel_function(vm, "createWithTotalParticles", squirrel_cocos2dx_ParticleFlower_createWithTotalParticles_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_ParticleFlower_typeof_meta);



    squirrel_cocos2dx_ParticleFlower_push_c_class(vm);

    std::string typeName = typeid(cocos2d::ParticleFlower).name();
    g_sqType[typeName] = "cc.ParticleFlower";

    return 1;
}
SQInteger squirrel_cocos2dx_EaseCircleActionIn_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        cocos2d::ActionInterval* arg0;
        ok &= sqval_to_object<cocos2d::ActionInterval>(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::EaseCircleActionIn* ret = cocos2d::EaseCircleActionIn::create(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.EaseCircleActionIn");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_EaseCircleActionIn_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.EaseCircleActionIn", -1);
    return 1;
}

void squirrel_cocos2dx_EaseCircleActionIn_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::EaseCircleActionIn", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionEase", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_EaseCircleActionIn(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("EaseCircleActionIn"), -1);


    sq_pushstring(vm, _SC("ActionEase"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_EaseCircleActionIn_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_EaseCircleActionIn_typeof_meta);



    squirrel_cocos2dx_EaseCircleActionIn_push_c_class(vm);

    std::string typeName = typeid(cocos2d::EaseCircleActionIn).name();
    g_sqType[typeName] = "cc.EaseCircleActionIn";

    return 1;
}
SQInteger squirrel_cocos2dx_TransitionSceneOriented_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 3)
    {
        float arg0;
        cocos2d::Scene* arg1;
        cocos2d::TransitionScene::Orientation arg2;
        ok &= sqval_to_float(vm, 2, &arg0);
        ok &= sqval_to_object<cocos2d::Scene>(vm, 3, &arg1);
        ok &= sqval_to_int32(vm, 4, (int *)&arg2);
        if(!ok)
            return 0;
        cocos2d::TransitionSceneOriented* ret = cocos2d::TransitionSceneOriented::create(arg0, arg1, arg2);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.TransitionSceneOriented");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 3);
    return 0;
}

SQInteger squirrel_cocos2dx_TransitionSceneOriented_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.TransitionSceneOriented", -1);
    return 1;
}

void squirrel_cocos2dx_TransitionSceneOriented_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::TransitionSceneOriented", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::TransitionScene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Scene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_TransitionSceneOriented(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("TransitionSceneOriented"), -1);


    sq_pushstring(vm, _SC("TransitionScene"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_TransitionSceneOriented_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_TransitionSceneOriented_typeof_meta);



    squirrel_cocos2dx_TransitionSceneOriented_push_c_class(vm);

    std::string typeName = typeid(cocos2d::TransitionSceneOriented).name();
    g_sqType[typeName] = "cc.TransitionSceneOriented";

    return 1;
}
SQInteger squirrel_cocos2dx_Image_hasPremultipliedAlpha(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Image* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Image_hasPremultipliedAlpha'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->hasPremultipliedAlpha();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "hasPremultipliedAlpha", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Image_saveToFile(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Image* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Image_saveToFile'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        bool ret = cobj->saveToFile(arg0);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    if (argc == 2) 
    {
        std::string arg0;
        bool arg1;

        ok &= sqval_to_std_string(vm, 2, &arg0);

        ok &= sqval_to_boolean(vm, 3, &arg1);
        if (!ok)
            return 0;
        bool ret = cobj->saveToFile(arg0, arg1);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "saveToFile", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Image_hasAlpha(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Image* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Image_hasAlpha'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->hasAlpha();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "hasAlpha", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Image_isCompressed(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Image* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Image_isCompressed'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isCompressed();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isCompressed", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Image_getHeight(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Image* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Image_getHeight'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        int ret = cobj->getHeight();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getHeight", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Image_initWithImageFile(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Image* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Image_initWithImageFile'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        bool ret = cobj->initWithImageFile(arg0);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "initWithImageFile", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Image_getWidth(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Image* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Image_getWidth'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        int ret = cobj->getWidth();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getWidth", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Image_getBitPerPixel(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Image* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Image_getBitPerPixel'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        int ret = cobj->getBitPerPixel();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getBitPerPixel", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Image_getFileType(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Image* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Image_getFileType'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        int ret = (int)cobj->getFileType();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getFileType", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Image_getNumberOfMipmaps(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Image* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Image_getNumberOfMipmaps'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        int ret = cobj->getNumberOfMipmaps();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getNumberOfMipmaps", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Image_getRenderFormat(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Image* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Image_getRenderFormat'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        int ret = (int)cobj->getRenderFormat();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getRenderFormat", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Image_setPVRImagesHavePremultipliedAlpha_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        bool arg0;
        ok &= sqval_to_boolean(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::Image::setPVRImagesHavePremultipliedAlpha(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "setPVRImagesHavePremultipliedAlpha", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Image_constructor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Image* cobj = nullptr;
    bool ok  = true;

    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj = new cocos2d::Image();
        sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
        cobj->retain();
        sq_setreleasehook(vm, 1, squirrel_releasehook_Ref);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "Image", (int)argc, 0);
    return 0;
}


SQInteger squirrel_cocos2dx_Image_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.Image", -1);
    return 1;
}

void squirrel_cocos2dx_Image_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::Image", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_Image(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("Image"), -1);


    sq_pushstring(vm, _SC("Ref"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "constructor", squirrel_cocos2dx_Image_constructor);
    to_squirrel_function(vm, "hasPremultipliedAlpha", squirrel_cocos2dx_Image_hasPremultipliedAlpha);
    to_squirrel_function(vm, "saveToFile", squirrel_cocos2dx_Image_saveToFile);
    to_squirrel_function(vm, "hasAlpha", squirrel_cocos2dx_Image_hasAlpha);
    to_squirrel_function(vm, "isCompressed", squirrel_cocos2dx_Image_isCompressed);
    to_squirrel_function(vm, "getHeight", squirrel_cocos2dx_Image_getHeight);
    to_squirrel_function(vm, "initWithImageFile", squirrel_cocos2dx_Image_initWithImageFile);
    to_squirrel_function(vm, "getWidth", squirrel_cocos2dx_Image_getWidth);
    to_squirrel_function(vm, "getBitPerPixel", squirrel_cocos2dx_Image_getBitPerPixel);
    to_squirrel_function(vm, "getFileType", squirrel_cocos2dx_Image_getFileType);
    to_squirrel_function(vm, "getNumberOfMipmaps", squirrel_cocos2dx_Image_getNumberOfMipmaps);
    to_squirrel_function(vm, "getRenderFormat", squirrel_cocos2dx_Image_getRenderFormat);
    to_squirrel_function(vm, "setPVRImagesHavePremultipliedAlpha", squirrel_cocos2dx_Image_setPVRImagesHavePremultipliedAlpha_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_Image_typeof_meta);


    sq_pushstring(vm, _SC("Format"), -1);
    sq_newtable(vm);
    to_squirrel_variable_integer(vm, "JPG", (SQInteger)cocos2d::Image::Format::JPG, SQTrue);
    to_squirrel_variable_integer(vm, "PNG", (SQInteger)cocos2d::Image::Format::PNG, SQTrue);
    to_squirrel_variable_integer(vm, "TIFF", (SQInteger)cocos2d::Image::Format::TIFF, SQTrue);
    to_squirrel_variable_integer(vm, "WEBP", (SQInteger)cocos2d::Image::Format::WEBP, SQTrue);
    to_squirrel_variable_integer(vm, "PVR", (SQInteger)cocos2d::Image::Format::PVR, SQTrue);
    to_squirrel_variable_integer(vm, "ETC", (SQInteger)cocos2d::Image::Format::ETC, SQTrue);
    to_squirrel_variable_integer(vm, "S3TC", (SQInteger)cocos2d::Image::Format::S3TC, SQTrue);
    to_squirrel_variable_integer(vm, "ATITC", (SQInteger)cocos2d::Image::Format::ATITC, SQTrue);
    to_squirrel_variable_integer(vm, "TGA", (SQInteger)cocos2d::Image::Format::TGA, SQTrue);
    to_squirrel_variable_integer(vm, "RAW_DATA", (SQInteger)cocos2d::Image::Format::RAW_DATA, SQTrue);
    to_squirrel_variable_integer(vm, "UNKOWN", (SQInteger)cocos2d::Image::Format::UNKOWN, SQTrue);
    sq_newslot(vm, -3, SQTrue);

    squirrel_cocos2dx_Image_push_c_class(vm);

    std::string typeName = typeid(cocos2d::Image).name();
    g_sqType[typeName] = "cc.Image";

    return 1;
}
SQInteger squirrel_cocos2dx_LayerMultiplex_switchToAndReleaseMe(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::LayerMultiplex* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_LayerMultiplex_switchToAndReleaseMe'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        int arg0;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if (!ok)
            return 0;
        cobj->switchToAndReleaseMe(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "switchToAndReleaseMe", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_LayerMultiplex_addLayer(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::LayerMultiplex* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_LayerMultiplex_addLayer'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Layer* arg0;

        ok &= sqval_to_object<cocos2d::Layer>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->addLayer(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "addLayer", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_LayerMultiplex_switchTo(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::LayerMultiplex* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_LayerMultiplex_switchTo'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        int arg0;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if (!ok)
            return 0;
        cobj->switchTo(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "switchTo", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_LayerMultiplex_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.LayerMultiplex", -1);
    return 1;
}

void squirrel_cocos2dx_LayerMultiplex_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::LayerMultiplex", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Layer", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_LayerMultiplex(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("LayerMultiplex"), -1);


    sq_pushstring(vm, _SC("Layer"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "switchToAndReleaseMe", squirrel_cocos2dx_LayerMultiplex_switchToAndReleaseMe);
    to_squirrel_function(vm, "addLayer", squirrel_cocos2dx_LayerMultiplex_addLayer);
    to_squirrel_function(vm, "switchTo", squirrel_cocos2dx_LayerMultiplex_switchTo);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_LayerMultiplex_typeof_meta);



    squirrel_cocos2dx_LayerMultiplex_push_c_class(vm);

    std::string typeName = typeid(cocos2d::LayerMultiplex).name();
    g_sqType[typeName] = "cc.LayerMultiplex";

    return 1;
}
SQInteger squirrel_cocos2dx_Blink_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        float arg0;
        int arg1;
        ok &= sqval_to_float(vm, 2, &arg0);
        ok &= sqval_to_int32(vm, 3, (int *)&arg1);
        if(!ok)
            return 0;
        cocos2d::Blink* ret = cocos2d::Blink::create(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.Blink");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_Blink_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.Blink", -1);
    return 1;
}

void squirrel_cocos2dx_Blink_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::Blink", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_Blink(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("Blink"), -1);


    sq_pushstring(vm, _SC("ActionInterval"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_Blink_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_Blink_typeof_meta);



    squirrel_cocos2dx_Blink_push_c_class(vm);

    std::string typeName = typeid(cocos2d::Blink).name();
    g_sqType[typeName] = "cc.Blink";

    return 1;
}
SQInteger squirrel_cocos2dx_JumpTo_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 4)
    {
        float arg0;
        cocos2d::Vec2 arg1;
        float arg2;
        int arg3;
        ok &= sqval_to_float(vm, 2, &arg0);
        cocos2d::Vec2* ptr3 = nullptr; ok &= sqval_to_vec2(vm, 3, ptr3); arg1 = *ptr3;
        ok &= sqval_to_float(vm, 4, &arg2);
        ok &= sqval_to_int32(vm, 5, (int *)&arg3);
        if(!ok)
            return 0;
        cocos2d::JumpTo* ret = cocos2d::JumpTo::create(arg0, arg1, arg2, arg3);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.JumpTo");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 4);
    return 0;
}

SQInteger squirrel_cocos2dx_JumpTo_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.JumpTo", -1);
    return 1;
}

void squirrel_cocos2dx_JumpTo_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::JumpTo", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::JumpBy", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_JumpTo(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("JumpTo"), -1);


    sq_pushstring(vm, _SC("JumpBy"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_JumpTo_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_JumpTo_typeof_meta);



    squirrel_cocos2dx_JumpTo_push_c_class(vm);

    std::string typeName = typeid(cocos2d::JumpTo).name();
    g_sqType[typeName] = "cc.JumpTo";

    return 1;
}
SQInteger squirrel_cocos2dx_Vec4_clamp(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec4* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec4_clamp'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        cocos2d::Vec4 arg0;
        cocos2d::Vec4 arg1;

        cocos2d::Vec4* ptr2 = nullptr; ok &= sqval_to_vec4(vm, 2, ptr2); arg0 = *ptr2;

        cocos2d::Vec4* ptr3 = nullptr; ok &= sqval_to_vec4(vm, 3, ptr3); arg1 = *ptr3;
        if (!ok)
            return 0;
        cobj->clamp(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "clamp", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec4_set(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec4* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec4_set'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_ARRAY) {
                break;
            }

            const float* arg0;
            ok &= sqval_to_float_array(vm, 2, (const float **)&arg0);

            if (!ok) { break; }
            cobj->set(arg0);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 4) {
            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INTEGER && sq_gettype(vm, 5) != OT_FLOAT) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);

            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);

            if (!ok) { break; }
            float arg2;
            ok &= sqval_to_float(vm, 4, &arg2);

            if (!ok) { break; }
            float arg3;
            ok &= sqval_to_float(vm, 5, &arg3);

            if (!ok) { break; }
            cobj->set(arg0, arg1, arg2, arg3);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Vec4")) {
                break;
            }

            cocos2d::Vec4 arg0;
            cocos2d::Vec4* ptr2 = nullptr; ok &= sqval_to_vec4(vm, 2, ptr2); arg0 = *ptr2;

            if (!ok) { break; }
            cobj->set(arg0);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Vec4")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Vec4")) {
                break;
            }

            cocos2d::Vec4 arg0;
            cocos2d::Vec4* ptr2 = nullptr; ok &= sqval_to_vec4(vm, 2, ptr2); arg0 = *ptr2;

            if (!ok) { break; }
            cocos2d::Vec4 arg1;
            cocos2d::Vec4* ptr3 = nullptr; ok &= sqval_to_vec4(vm, 3, ptr3); arg1 = *ptr3;

            if (!ok) { break; }
            cobj->set(arg0, arg1);
            return 0;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "set", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec4_negate(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec4* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec4_negate'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->negate();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "negate", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec4_distanceSquared(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec4* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec4_distanceSquared'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec4 arg0;

        cocos2d::Vec4* ptr2 = nullptr; ok &= sqval_to_vec4(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        float ret = cobj->distanceSquared(arg0);
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "distanceSquared", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec4_isOne(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec4* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec4_isOne'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isOne();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isOne", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec4_scale(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec4* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec4_scale'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->scale(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "scale", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec4_add(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec4* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec4_add'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec4 arg0;

        cocos2d::Vec4* ptr2 = nullptr; ok &= sqval_to_vec4(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->add(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "add", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec4_isZero(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec4* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec4_isZero'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isZero();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isZero", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec4_getNormalized(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec4* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec4_getNormalized'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Vec4 ret = cobj->getNormalized();
        vec4_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getNormalized", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec4_normalize(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec4* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec4_normalize'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->normalize();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "normalize", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec4_lengthSquared(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec4* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec4_lengthSquared'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->lengthSquared();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "lengthSquared", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec4_subtract(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec4* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec4_subtract'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec4 arg0;

        cocos2d::Vec4* ptr2 = nullptr; ok &= sqval_to_vec4(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->subtract(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "subtract", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec4_distance(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec4* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec4_distance'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec4 arg0;

        cocos2d::Vec4* ptr2 = nullptr; ok &= sqval_to_vec4(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        float ret = cobj->distance(arg0);
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "distance", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec4_length(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec4* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec4_length'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->length();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "length", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec4_dot(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec4* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec4_dot'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec4 arg0;

        cocos2d::Vec4* ptr2 = nullptr; ok &= sqval_to_vec4(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        float ret = cobj->dot(arg0);
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "dot", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec4_clamp_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;

    if (sq_gettype(vm, 1) == OT_INSTANCE) {
        return squirrel_cocos2dx_Vec4_clamp(vm);
    }

    argc = sq_gettop(vm) - 1;

    if (argc == 4)
    {
        cocos2d::Vec4 arg0;
        cocos2d::Vec4 arg1;
        cocos2d::Vec4 arg2;
        cocos2d::Vec4* arg3;
        cocos2d::Vec4* ptr2 = nullptr; ok &= sqval_to_vec4(vm, 2, ptr2); arg0 = *ptr2;
        cocos2d::Vec4* ptr3 = nullptr; ok &= sqval_to_vec4(vm, 3, ptr3); arg1 = *ptr3;
        cocos2d::Vec4* ptr4 = nullptr; ok &= sqval_to_vec4(vm, 4, ptr4); arg2 = *ptr4;
        ok &= sqval_to_object<cocos2d::Vec4>(vm, 5, &arg3);
        if(!ok)
            return 0;
        cocos2d::Vec4::clamp(arg0, arg1, arg2, arg3);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "clamp", (int)argc, 4);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec4_angle_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        cocos2d::Vec4 arg0;
        cocos2d::Vec4 arg1;
        cocos2d::Vec4* ptr2 = nullptr; ok &= sqval_to_vec4(vm, 2, ptr2); arg0 = *ptr2;
        cocos2d::Vec4* ptr3 = nullptr; ok &= sqval_to_vec4(vm, 3, ptr3); arg1 = *ptr3;
        if(!ok)
            return 0;
        float ret = cocos2d::Vec4::angle(arg0, arg1);
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "angle", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec4_add_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;

    if (sq_gettype(vm, 1) == OT_INSTANCE) {
        return squirrel_cocos2dx_Vec4_add(vm);
    }

    argc = sq_gettop(vm) - 1;

    if (argc == 3)
    {
        cocos2d::Vec4 arg0;
        cocos2d::Vec4 arg1;
        cocos2d::Vec4* arg2;
        cocos2d::Vec4* ptr2 = nullptr; ok &= sqval_to_vec4(vm, 2, ptr2); arg0 = *ptr2;
        cocos2d::Vec4* ptr3 = nullptr; ok &= sqval_to_vec4(vm, 3, ptr3); arg1 = *ptr3;
        ok &= sqval_to_object<cocos2d::Vec4>(vm, 4, &arg2);
        if(!ok)
            return 0;
        cocos2d::Vec4::add(arg0, arg1, arg2);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "add", (int)argc, 3);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec4_fromColor_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        unsigned int arg0;
        ok &= sqval_to_uint32(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::Vec4 ret = cocos2d::Vec4::fromColor(arg0);
        vec4_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "fromColor", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec4_subtract_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;

    if (sq_gettype(vm, 1) == OT_INSTANCE) {
        return squirrel_cocos2dx_Vec4_subtract(vm);
    }

    argc = sq_gettop(vm) - 1;

    if (argc == 3)
    {
        cocos2d::Vec4 arg0;
        cocos2d::Vec4 arg1;
        cocos2d::Vec4* arg2;
        cocos2d::Vec4* ptr2 = nullptr; ok &= sqval_to_vec4(vm, 2, ptr2); arg0 = *ptr2;
        cocos2d::Vec4* ptr3 = nullptr; ok &= sqval_to_vec4(vm, 3, ptr3); arg1 = *ptr3;
        ok &= sqval_to_object<cocos2d::Vec4>(vm, 4, &arg2);
        if(!ok)
            return 0;
        cocos2d::Vec4::subtract(arg0, arg1, arg2);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "subtract", (int)argc, 3);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec4_dot_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;

    if (sq_gettype(vm, 1) == OT_INSTANCE) {
        return squirrel_cocos2dx_Vec4_dot(vm);
    }

    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        cocos2d::Vec4 arg0;
        cocos2d::Vec4 arg1;
        cocos2d::Vec4* ptr2 = nullptr; ok &= sqval_to_vec4(vm, 2, ptr2); arg0 = *ptr2;
        cocos2d::Vec4* ptr3 = nullptr; ok &= sqval_to_vec4(vm, 3, ptr3); arg1 = *ptr3;
        if(!ok)
            return 0;
        float ret = cocos2d::Vec4::dot(arg0, arg1);
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "dot", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec4_constructor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec4* cobj = nullptr;
    bool ok  = true;

    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 4) {
            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INTEGER && sq_gettype(vm, 5) != OT_FLOAT) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);

            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);

            if (!ok) { break; }
            float arg2;
            ok &= sqval_to_float(vm, 4, &arg2);

            if (!ok) { break; }
            float arg3;
            ok &= sqval_to_float(vm, 5, &arg3);

            if (!ok) { break; }
            cobj = new cocos2d::Vec4(arg0, arg1, arg2, arg3);
            sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
            sq_setreleasehook(vm, 1, squirrel_releasehook_Vec4);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 0) {

            cobj = new cocos2d::Vec4();
            sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
            sq_setreleasehook(vm, 1, squirrel_releasehook_Vec4);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_ARRAY) {
                break;
            }

            const float* arg0;
            ok &= sqval_to_float_array(vm, 2, (const float **)&arg0);

            if (!ok) { break; }
            cobj = new cocos2d::Vec4(arg0);
            sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
            sq_setreleasehook(vm, 1, squirrel_releasehook_Vec4);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Vec4")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Vec4")) {
                break;
            }

            cocos2d::Vec4 arg0;
            cocos2d::Vec4* ptr2 = nullptr; ok &= sqval_to_vec4(vm, 2, ptr2); arg0 = *ptr2;

            if (!ok) { break; }
            cocos2d::Vec4 arg1;
            cocos2d::Vec4* ptr3 = nullptr; ok &= sqval_to_vec4(vm, 3, ptr3); arg1 = *ptr3;

            if (!ok) { break; }
            cobj = new cocos2d::Vec4(arg0, arg1);
            sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
            sq_setreleasehook(vm, 1, squirrel_releasehook_Vec4);
            return 1;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "Vec4", (int)argc, 2);
    return 0;
}


SQInteger squirrel_cocos2dx_Vec4_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.Vec4", -1);
    return 1;
}

void squirrel_cocos2dx_Vec4_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::Vec4", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_Vec4(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("Vec4"), -1);

    sq_newclass(vm, SQFalse);

    to_squirrel_function(vm, "constructor", squirrel_cocos2dx_Vec4_constructor);
    to_squirrel_function(vm, "set", squirrel_cocos2dx_Vec4_set);
    to_squirrel_function(vm, "negate", squirrel_cocos2dx_Vec4_negate);
    to_squirrel_function(vm, "distanceSquared", squirrel_cocos2dx_Vec4_distanceSquared);
    to_squirrel_function(vm, "isOne", squirrel_cocos2dx_Vec4_isOne);
    to_squirrel_function(vm, "scale", squirrel_cocos2dx_Vec4_scale);
    to_squirrel_function(vm, "isZero", squirrel_cocos2dx_Vec4_isZero);
    to_squirrel_function(vm, "getNormalized", squirrel_cocos2dx_Vec4_getNormalized);
    to_squirrel_function(vm, "normalize", squirrel_cocos2dx_Vec4_normalize);
    to_squirrel_function(vm, "lengthSquared", squirrel_cocos2dx_Vec4_lengthSquared);
    to_squirrel_function(vm, "distance", squirrel_cocos2dx_Vec4_distance);
    to_squirrel_function(vm, "length", squirrel_cocos2dx_Vec4_length);
    to_squirrel_function(vm, "clamp", squirrel_cocos2dx_Vec4_clamp_static, SQTrue);
    to_squirrel_function(vm, "angle", squirrel_cocos2dx_Vec4_angle_static, SQTrue);
    to_squirrel_function(vm, "add", squirrel_cocos2dx_Vec4_add_static, SQTrue);
    to_squirrel_function(vm, "fromColor", squirrel_cocos2dx_Vec4_fromColor_static, SQTrue);
    to_squirrel_function(vm, "subtract", squirrel_cocos2dx_Vec4_subtract_static, SQTrue);
    to_squirrel_function(vm, "dot", squirrel_cocos2dx_Vec4_dot_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_Vec4_typeof_meta);

    to_squirrel_variable_object(vm, "ZERO", (SQUserPointer)&cocos2d::Vec4::ZERO, SQTrue);
    to_squirrel_variable_object(vm, "ONE", (SQUserPointer)&cocos2d::Vec4::ONE, SQTrue);
    to_squirrel_variable_object(vm, "UNIT_X", (SQUserPointer)&cocos2d::Vec4::UNIT_X, SQTrue);
    to_squirrel_variable_object(vm, "UNIT_Y", (SQUserPointer)&cocos2d::Vec4::UNIT_Y, SQTrue);
    to_squirrel_variable_object(vm, "UNIT_Z", (SQUserPointer)&cocos2d::Vec4::UNIT_Z, SQTrue);
    to_squirrel_variable_object(vm, "UNIT_W", (SQUserPointer)&cocos2d::Vec4::UNIT_W, SQTrue);


    squirrel_cocos2dx_Vec4_push_c_class(vm);

    std::string typeName = typeid(cocos2d::Vec4).name();
    g_sqType[typeName] = "cc.Vec4";

    return 1;
}
SQInteger squirrel_cocos2dx_ParticleExplosion_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        cocos2d::ParticleExplosion* ret = cocos2d::ParticleExplosion::create();
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.ParticleExplosion");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleExplosion_createWithTotalParticles_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if(!ok)
            return 0;
        cocos2d::ParticleExplosion* ret = cocos2d::ParticleExplosion::createWithTotalParticles(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.ParticleExplosion");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "createWithTotalParticles", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_ParticleExplosion_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.ParticleExplosion", -1);
    return 1;
}

void squirrel_cocos2dx_ParticleExplosion_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::ParticleExplosion", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ParticleSystemQuad", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ParticleSystem", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TextureProtocol", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::BlendProtocol", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_ParticleExplosion(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("ParticleExplosion"), -1);


    sq_pushstring(vm, _SC("ParticleSystemQuad"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_ParticleExplosion_create_static, SQTrue);
    to_squirrel_function(vm, "createWithTotalParticles", squirrel_cocos2dx_ParticleExplosion_createWithTotalParticles_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_ParticleExplosion_typeof_meta);



    squirrel_cocos2dx_ParticleExplosion_push_c_class(vm);

    std::string typeName = typeid(cocos2d::ParticleExplosion).name();
    g_sqType[typeName] = "cc.ParticleExplosion";

    return 1;
}
SQInteger squirrel_cocos2dx_Vec2_clamp(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec2* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec2_clamp'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        cocos2d::Vec2 arg0;
        cocos2d::Vec2 arg1;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;

        cocos2d::Vec2* ptr3 = nullptr; ok &= sqval_to_vec2(vm, 3, ptr3); arg1 = *ptr3;
        if (!ok)
            return 0;
        cobj->clamp(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "clamp", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec2_set(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec2* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec2_set'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_ARRAY) {
                break;
            }

            const float* arg0;
            ok &= sqval_to_float_array(vm, 2, (const float **)&arg0);

            if (!ok) { break; }
            cobj->set(arg0);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);

            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);

            if (!ok) { break; }
            cobj->set(arg0, arg1);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Vec2")) {
                break;
            }

            cocos2d::Vec2 arg0;
            cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;

            if (!ok) { break; }
            cobj->set(arg0);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Vec2")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Vec2")) {
                break;
            }

            cocos2d::Vec2 arg0;
            cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;

            if (!ok) { break; }
            cocos2d::Vec2 arg1;
            cocos2d::Vec2* ptr3 = nullptr; ok &= sqval_to_vec2(vm, 3, ptr3); arg1 = *ptr3;

            if (!ok) { break; }
            cobj->set(arg0, arg1);
            return 0;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "set", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec2_getDistanceSq(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec2* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec2_getDistanceSq'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec2 arg0;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        float ret = cobj->getDistanceSq(arg0);
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getDistanceSq", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec2_negate(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec2* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec2_negate'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->negate();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "negate", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec2_distanceSquared(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec2* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec2_distanceSquared'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec2 arg0;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        float ret = cobj->distanceSquared(arg0);
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "distanceSquared", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec2_isOne(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec2* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec2_isOne'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isOne();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isOne", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec2_scale(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec2* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec2_scale'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Vec2")) {
                break;
            }

            cocos2d::Vec2 arg0;
            cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;

            if (!ok) { break; }
            cobj->scale(arg0);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);

            if (!ok) { break; }
            cobj->scale(arg0);
            return 0;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "scale", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec2_getLength(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec2* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec2_getLength'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getLength();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getLength", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec2_cross(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec2* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec2_cross'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec2 arg0;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        float ret = cobj->cross(arg0);
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "cross", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec2_rotateByAngle(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec2* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec2_rotateByAngle'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        cocos2d::Vec2 arg0;
        float arg1;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;

        ok &= sqval_to_float(vm, 3, &arg1);
        if (!ok)
            return 0;
        cocos2d::Vec2 ret = cobj->rotateByAngle(arg0, arg1);
        vec2_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "rotateByAngle", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec2_add(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec2* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec2_add'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec2 arg0;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->add(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "add", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec2_fuzzyEquals(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec2* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec2_fuzzyEquals'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        cocos2d::Vec2 arg0;
        float arg1;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;

        ok &= sqval_to_float(vm, 3, &arg1);
        if (!ok)
            return 0;
        bool ret = cobj->fuzzyEquals(arg0, arg1);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "fuzzyEquals", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec2_getDistance(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec2* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec2_getDistance'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec2 arg0;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        float ret = cobj->getDistance(arg0);
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getDistance", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec2_isZero(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec2* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec2_isZero'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isZero();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isZero", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec2_getMidpoint(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec2* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec2_getMidpoint'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec2 arg0;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cocos2d::Vec2 ret = cobj->getMidpoint(arg0);
        vec2_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getMidpoint", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec2_getNormalized(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec2* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec2_getNormalized'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Vec2 ret = cobj->getNormalized();
        vec2_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getNormalized", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec2_normalize(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec2* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec2_normalize'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->normalize();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "normalize", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec2_lengthSquared(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec2* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec2_lengthSquared'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->lengthSquared();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "lengthSquared", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec2_lerp(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec2* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec2_lerp'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        cocos2d::Vec2 arg0;
        float arg1;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;

        ok &= sqval_to_float(vm, 3, &arg1);
        if (!ok)
            return 0;
        cocos2d::Vec2 ret = cobj->lerp(arg0, arg1);
        vec2_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "lerp", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec2_equals(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec2* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec2_equals'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec2 arg0;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        bool ret = cobj->equals(arg0);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "equals", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec2_compOp(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec2* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec2_compOp'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::function<float (float)> arg0;
        HSQOBJECT callback2;
        sq_getstackobj(vm, 2, &callback2);

        do {
			    // Lambda binding for squirrel
			    arg0 = [vm, callback2](float larg0) -> float {
			        if (sq_getrefcount(vm, (HSQOBJECT *)&callback2) > 0) {
			            sq_pushobject(vm, callback2);
			            sq_push(vm, 1);
			            sq_pushfloat(vm, (SQFloat)larg0);
			            sq_call(vm, 2, SQTrue, SQTrue);
			            sq_remove(vm, -2);
			            bool ok = true;
			            float ret;
			            ok &= sqval_to_float(vm, -1, &ret);
			            return ret;
			        }
			    };
			} while(0);
        if (!ok)
            return 0;
        cocos2d::Vec2 ret = cobj->compOp(arg0);
        vec2_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "compOp", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec2_unrotate(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec2* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec2_unrotate'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec2 arg0;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cocos2d::Vec2 ret = cobj->unrotate(arg0);
        vec2_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "unrotate", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec2_getLengthSq(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec2* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec2_getLengthSq'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getLengthSq();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getLengthSq", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec2_getPerp(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec2* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec2_getPerp'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Vec2 ret = cobj->getPerp();
        vec2_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getPerp", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec2_subtract(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec2* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec2_subtract'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec2 arg0;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->subtract(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "subtract", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec2_distance(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec2* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec2_distance'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec2 arg0;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        float ret = cobj->distance(arg0);
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "distance", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec2_rotate(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec2* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec2_rotate'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Vec2")) {
                break;
            }

            cocos2d::Vec2 arg0;
            cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;

            if (!ok) { break; }
            cocos2d::Vec2 ret = cobj->rotate(arg0);
            vec2_to_sqval(vm, ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Vec2")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }

            cocos2d::Vec2 arg0;
            cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;

            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);

            if (!ok) { break; }
            cobj->rotate(arg0, arg1);
            return 0;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "rotate", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec2_getClampPoint(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec2* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec2_getClampPoint'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        cocos2d::Vec2 arg0;
        cocos2d::Vec2 arg1;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;

        cocos2d::Vec2* ptr3 = nullptr; ok &= sqval_to_vec2(vm, 3, ptr3); arg1 = *ptr3;
        if (!ok)
            return 0;
        cocos2d::Vec2 ret = cobj->getClampPoint(arg0, arg1);
        vec2_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getClampPoint", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec2_getAngle(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec2* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec2_getAngle'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Vec2")) {
                break;
            }

            cocos2d::Vec2 arg0;
            cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;

            if (!ok) { break; }
            float ret = cobj->getAngle(arg0);
            sq_pushfloat(vm, (SQFloat)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 0) {

            float ret = cobj->getAngle();
            sq_pushfloat(vm, (SQFloat)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getAngle", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec2_setPoint(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec2* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec2_setPoint'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        float arg0;
        float arg1;

        ok &= sqval_to_float(vm, 2, &arg0);

        ok &= sqval_to_float(vm, 3, &arg1);
        if (!ok)
            return 0;
        cobj->setPoint(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setPoint", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec2_smooth(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec2* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec2_smooth'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 3) 
    {
        cocos2d::Vec2 arg0;
        float arg1;
        float arg2;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;

        ok &= sqval_to_float(vm, 3, &arg1);

        ok &= sqval_to_float(vm, 4, &arg2);
        if (!ok)
            return 0;
        cobj->smooth(arg0, arg1, arg2);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "smooth", (int)argc, 3);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec2_project(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec2* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec2_project'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec2 arg0;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cocos2d::Vec2 ret = cobj->project(arg0);
        vec2_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "project", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec2_getRPerp(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec2* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec2_getRPerp'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Vec2 ret = cobj->getRPerp();
        vec2_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getRPerp", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec2_length(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec2* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec2_length'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->length();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "length", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec2_dot(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec2* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec2_dot'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec2 arg0;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        float ret = cobj->dot(arg0);
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "dot", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec2_clamp_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;

    if (sq_gettype(vm, 1) == OT_INSTANCE) {
        return squirrel_cocos2dx_Vec2_clamp(vm);
    }

    argc = sq_gettop(vm) - 1;

    if (argc == 4)
    {
        cocos2d::Vec2 arg0;
        cocos2d::Vec2 arg1;
        cocos2d::Vec2 arg2;
        cocos2d::Vec2* arg3;
        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        cocos2d::Vec2* ptr3 = nullptr; ok &= sqval_to_vec2(vm, 3, ptr3); arg1 = *ptr3;
        cocos2d::Vec2* ptr4 = nullptr; ok &= sqval_to_vec2(vm, 4, ptr4); arg2 = *ptr4;
        ok &= sqval_to_object<cocos2d::Vec2>(vm, 5, &arg3);
        if(!ok)
            return 0;
        cocos2d::Vec2::clamp(arg0, arg1, arg2, arg3);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "clamp", (int)argc, 4);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec2_isLineParallel_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 4)
    {
        cocos2d::Vec2 arg0;
        cocos2d::Vec2 arg1;
        cocos2d::Vec2 arg2;
        cocos2d::Vec2 arg3;
        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        cocos2d::Vec2* ptr3 = nullptr; ok &= sqval_to_vec2(vm, 3, ptr3); arg1 = *ptr3;
        cocos2d::Vec2* ptr4 = nullptr; ok &= sqval_to_vec2(vm, 4, ptr4); arg2 = *ptr4;
        cocos2d::Vec2* ptr5 = nullptr; ok &= sqval_to_vec2(vm, 5, ptr5); arg3 = *ptr5;
        if(!ok)
            return 0;
        bool ret = cocos2d::Vec2::isLineParallel(arg0, arg1, arg2, arg3);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "isLineParallel", (int)argc, 4);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec2_isLineOverlap_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 4)
    {
        cocos2d::Vec2 arg0;
        cocos2d::Vec2 arg1;
        cocos2d::Vec2 arg2;
        cocos2d::Vec2 arg3;
        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        cocos2d::Vec2* ptr3 = nullptr; ok &= sqval_to_vec2(vm, 3, ptr3); arg1 = *ptr3;
        cocos2d::Vec2* ptr4 = nullptr; ok &= sqval_to_vec2(vm, 4, ptr4); arg2 = *ptr4;
        cocos2d::Vec2* ptr5 = nullptr; ok &= sqval_to_vec2(vm, 5, ptr5); arg3 = *ptr5;
        if(!ok)
            return 0;
        bool ret = cocos2d::Vec2::isLineOverlap(arg0, arg1, arg2, arg3);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "isLineOverlap", (int)argc, 4);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec2_angle_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        cocos2d::Vec2 arg0;
        cocos2d::Vec2 arg1;
        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        cocos2d::Vec2* ptr3 = nullptr; ok &= sqval_to_vec2(vm, 3, ptr3); arg1 = *ptr3;
        if(!ok)
            return 0;
        float ret = cocos2d::Vec2::angle(arg0, arg1);
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "angle", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec2_getIntersectPoint_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 4)
    {
        cocos2d::Vec2 arg0;
        cocos2d::Vec2 arg1;
        cocos2d::Vec2 arg2;
        cocos2d::Vec2 arg3;
        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        cocos2d::Vec2* ptr3 = nullptr; ok &= sqval_to_vec2(vm, 3, ptr3); arg1 = *ptr3;
        cocos2d::Vec2* ptr4 = nullptr; ok &= sqval_to_vec2(vm, 4, ptr4); arg2 = *ptr4;
        cocos2d::Vec2* ptr5 = nullptr; ok &= sqval_to_vec2(vm, 5, ptr5); arg3 = *ptr5;
        if(!ok)
            return 0;
        cocos2d::Vec2 ret = cocos2d::Vec2::getIntersectPoint(arg0, arg1, arg2, arg3);
        vec2_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "getIntersectPoint", (int)argc, 4);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec2_isLineIntersect_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 4)
    {
        cocos2d::Vec2 arg0;
        cocos2d::Vec2 arg1;
        cocos2d::Vec2 arg2;
        cocos2d::Vec2 arg3;
        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        cocos2d::Vec2* ptr3 = nullptr; ok &= sqval_to_vec2(vm, 3, ptr3); arg1 = *ptr3;
        cocos2d::Vec2* ptr4 = nullptr; ok &= sqval_to_vec2(vm, 4, ptr4); arg2 = *ptr4;
        cocos2d::Vec2* ptr5 = nullptr; ok &= sqval_to_vec2(vm, 5, ptr5); arg3 = *ptr5;
        if(!ok)
            return 0;
        bool ret = cocos2d::Vec2::isLineIntersect(arg0, arg1, arg2, arg3);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    if (argc == 5)
    {
        cocos2d::Vec2 arg0;
        cocos2d::Vec2 arg1;
        cocos2d::Vec2 arg2;
        cocos2d::Vec2 arg3;
        float* arg4;
        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        cocos2d::Vec2* ptr3 = nullptr; ok &= sqval_to_vec2(vm, 3, ptr3); arg1 = *ptr3;
        cocos2d::Vec2* ptr4 = nullptr; ok &= sqval_to_vec2(vm, 4, ptr4); arg2 = *ptr4;
        cocos2d::Vec2* ptr5 = nullptr; ok &= sqval_to_vec2(vm, 5, ptr5); arg3 = *ptr5;
        ok &= sqval_to_float_array(vm, 6, (const float **)&arg4);
        if(!ok)
            return 0;
        bool ret = cocos2d::Vec2::isLineIntersect(arg0, arg1, arg2, arg3, arg4);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    if (argc == 6)
    {
        cocos2d::Vec2 arg0;
        cocos2d::Vec2 arg1;
        cocos2d::Vec2 arg2;
        cocos2d::Vec2 arg3;
        float* arg4;
        float* arg5;
        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        cocos2d::Vec2* ptr3 = nullptr; ok &= sqval_to_vec2(vm, 3, ptr3); arg1 = *ptr3;
        cocos2d::Vec2* ptr4 = nullptr; ok &= sqval_to_vec2(vm, 4, ptr4); arg2 = *ptr4;
        cocos2d::Vec2* ptr5 = nullptr; ok &= sqval_to_vec2(vm, 5, ptr5); arg3 = *ptr5;
        ok &= sqval_to_float_array(vm, 6, (const float **)&arg4);
        ok &= sqval_to_float_array(vm, 7, (const float **)&arg5);
        if(!ok)
            return 0;
        bool ret = cocos2d::Vec2::isLineIntersect(arg0, arg1, arg2, arg3, arg4, arg5);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "isLineIntersect", (int)argc, 4);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec2_isSegmentOverlap_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 4)
    {
        cocos2d::Vec2 arg0;
        cocos2d::Vec2 arg1;
        cocos2d::Vec2 arg2;
        cocos2d::Vec2 arg3;
        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        cocos2d::Vec2* ptr3 = nullptr; ok &= sqval_to_vec2(vm, 3, ptr3); arg1 = *ptr3;
        cocos2d::Vec2* ptr4 = nullptr; ok &= sqval_to_vec2(vm, 4, ptr4); arg2 = *ptr4;
        cocos2d::Vec2* ptr5 = nullptr; ok &= sqval_to_vec2(vm, 5, ptr5); arg3 = *ptr5;
        if(!ok)
            return 0;
        bool ret = cocos2d::Vec2::isSegmentOverlap(arg0, arg1, arg2, arg3);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    if (argc == 5)
    {
        cocos2d::Vec2 arg0;
        cocos2d::Vec2 arg1;
        cocos2d::Vec2 arg2;
        cocos2d::Vec2 arg3;
        cocos2d::Vec2* arg4;
        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        cocos2d::Vec2* ptr3 = nullptr; ok &= sqval_to_vec2(vm, 3, ptr3); arg1 = *ptr3;
        cocos2d::Vec2* ptr4 = nullptr; ok &= sqval_to_vec2(vm, 4, ptr4); arg2 = *ptr4;
        cocos2d::Vec2* ptr5 = nullptr; ok &= sqval_to_vec2(vm, 5, ptr5); arg3 = *ptr5;
        ok &= sqval_to_object<cocos2d::Vec2>(vm, 6, &arg4);
        if(!ok)
            return 0;
        bool ret = cocos2d::Vec2::isSegmentOverlap(arg0, arg1, arg2, arg3, arg4);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    if (argc == 6)
    {
        cocos2d::Vec2 arg0;
        cocos2d::Vec2 arg1;
        cocos2d::Vec2 arg2;
        cocos2d::Vec2 arg3;
        cocos2d::Vec2* arg4;
        cocos2d::Vec2* arg5;
        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        cocos2d::Vec2* ptr3 = nullptr; ok &= sqval_to_vec2(vm, 3, ptr3); arg1 = *ptr3;
        cocos2d::Vec2* ptr4 = nullptr; ok &= sqval_to_vec2(vm, 4, ptr4); arg2 = *ptr4;
        cocos2d::Vec2* ptr5 = nullptr; ok &= sqval_to_vec2(vm, 5, ptr5); arg3 = *ptr5;
        ok &= sqval_to_object<cocos2d::Vec2>(vm, 6, &arg4);
        ok &= sqval_to_object<cocos2d::Vec2>(vm, 7, &arg5);
        if(!ok)
            return 0;
        bool ret = cocos2d::Vec2::isSegmentOverlap(arg0, arg1, arg2, arg3, arg4, arg5);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "isSegmentOverlap", (int)argc, 4);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec2_forAngle_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        float arg0;
        ok &= sqval_to_float(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::Vec2 ret = cocos2d::Vec2::forAngle(arg0);
        vec2_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "forAngle", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec2_isSegmentIntersect_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 4)
    {
        cocos2d::Vec2 arg0;
        cocos2d::Vec2 arg1;
        cocos2d::Vec2 arg2;
        cocos2d::Vec2 arg3;
        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        cocos2d::Vec2* ptr3 = nullptr; ok &= sqval_to_vec2(vm, 3, ptr3); arg1 = *ptr3;
        cocos2d::Vec2* ptr4 = nullptr; ok &= sqval_to_vec2(vm, 4, ptr4); arg2 = *ptr4;
        cocos2d::Vec2* ptr5 = nullptr; ok &= sqval_to_vec2(vm, 5, ptr5); arg3 = *ptr5;
        if(!ok)
            return 0;
        bool ret = cocos2d::Vec2::isSegmentIntersect(arg0, arg1, arg2, arg3);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "isSegmentIntersect", (int)argc, 4);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec2_add_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;

    if (sq_gettype(vm, 1) == OT_INSTANCE) {
        return squirrel_cocos2dx_Vec2_add(vm);
    }

    argc = sq_gettop(vm) - 1;

    if (argc == 3)
    {
        cocos2d::Vec2 arg0;
        cocos2d::Vec2 arg1;
        cocos2d::Vec2* arg2;
        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        cocos2d::Vec2* ptr3 = nullptr; ok &= sqval_to_vec2(vm, 3, ptr3); arg1 = *ptr3;
        ok &= sqval_to_object<cocos2d::Vec2>(vm, 4, &arg2);
        if(!ok)
            return 0;
        cocos2d::Vec2::add(arg0, arg1, arg2);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "add", (int)argc, 3);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec2_subtract_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;

    if (sq_gettype(vm, 1) == OT_INSTANCE) {
        return squirrel_cocos2dx_Vec2_subtract(vm);
    }

    argc = sq_gettop(vm) - 1;

    if (argc == 3)
    {
        cocos2d::Vec2 arg0;
        cocos2d::Vec2 arg1;
        cocos2d::Vec2* arg2;
        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        cocos2d::Vec2* ptr3 = nullptr; ok &= sqval_to_vec2(vm, 3, ptr3); arg1 = *ptr3;
        ok &= sqval_to_object<cocos2d::Vec2>(vm, 4, &arg2);
        if(!ok)
            return 0;
        cocos2d::Vec2::subtract(arg0, arg1, arg2);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "subtract", (int)argc, 3);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec2_dot_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;

    if (sq_gettype(vm, 1) == OT_INSTANCE) {
        return squirrel_cocos2dx_Vec2_dot(vm);
    }

    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        cocos2d::Vec2 arg0;
        cocos2d::Vec2 arg1;
        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        cocos2d::Vec2* ptr3 = nullptr; ok &= sqval_to_vec2(vm, 3, ptr3); arg1 = *ptr3;
        if(!ok)
            return 0;
        float ret = cocos2d::Vec2::dot(arg0, arg1);
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "dot", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec2_constructor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec2* cobj = nullptr;
    bool ok  = true;

    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);

            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);

            if (!ok) { break; }
            cobj = new cocos2d::Vec2(arg0, arg1);
            sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
            sq_setreleasehook(vm, 1, squirrel_releasehook_Vec2);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 0) {

            cobj = new cocos2d::Vec2();
            sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
            sq_setreleasehook(vm, 1, squirrel_releasehook_Vec2);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_ARRAY) {
                break;
            }

            const float* arg0;
            ok &= sqval_to_float_array(vm, 2, (const float **)&arg0);

            if (!ok) { break; }
            cobj = new cocos2d::Vec2(arg0);
            sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
            sq_setreleasehook(vm, 1, squirrel_releasehook_Vec2);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Vec2")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Vec2")) {
                break;
            }

            cocos2d::Vec2 arg0;
            cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;

            if (!ok) { break; }
            cocos2d::Vec2 arg1;
            cocos2d::Vec2* ptr3 = nullptr; ok &= sqval_to_vec2(vm, 3, ptr3); arg1 = *ptr3;

            if (!ok) { break; }
            cobj = new cocos2d::Vec2(arg0, arg1);
            sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
            sq_setreleasehook(vm, 1, squirrel_releasehook_Vec2);
            return 1;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "Vec2", (int)argc, 2);
    return 0;
}


SQInteger squirrel_cocos2dx_Vec2_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.Vec2", -1);
    return 1;
}

SQInteger squirrel_cocos2dx_Vec2_get_meta(HSQUIRRELVM vm)
{
    cocos2d::Vec2 *cobj = nullptr;
    if (SQ_FAILED(sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0))) {
        CCLOG("cocos2d::Vec2 sq_getinstanceup failed.");
        sq_pushnull(vm);
        return 1;
    }

    const char *varName = nullptr;
    sq_getstring(vm, 2, &varName);
    
    do {
        if (strcmp(varName, "x") == 0) {
            sq_pushfloat(vm, (SQFloat)cobj->x);
            break;
        }
        if (strcmp(varName, "y") == 0) {
            sq_pushfloat(vm, (SQFloat)cobj->y);
            break;
        }

        return 0;
        
    } while(0);

    return 1;
}

SQInteger squirrel_cocos2dx_Vec2_set_meta(HSQUIRRELVM vm)
{
    cocos2d::Vec2 *cobj = nullptr;
    if (SQ_FAILED(sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0))) {
        CCLOG("cocos2d::Vec2 sq_getinstanceup failed.");
        return 0;
    }

    bool ok  = true;
    const char *varName = nullptr;
    sq_getstring(vm, 2, &varName);
    
    do {
        if (strcmp(varName, "x") == 0) {
            ok &= sqval_to_float(vm, 3, &cobj->x);
            if (! ok) {
                return 0;
            }
            break;
        }
        if (strcmp(varName, "y") == 0) {
            ok &= sqval_to_float(vm, 3, &cobj->y);
            if (! ok) {
                return 0;
            }
            break;
        }

        CCLOG("specified variable is not found in cocos2d::Vec2");
    } while(0);

    return 0;
}

void squirrel_cocos2dx_Vec2_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::Vec2", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_Vec2(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("Vec2"), -1);

    sq_newclass(vm, SQFalse);

    to_squirrel_function(vm, "constructor", squirrel_cocos2dx_Vec2_constructor);
    to_squirrel_function(vm, "set", squirrel_cocos2dx_Vec2_set);
    to_squirrel_function(vm, "getDistanceSq", squirrel_cocos2dx_Vec2_getDistanceSq);
    to_squirrel_function(vm, "negate", squirrel_cocos2dx_Vec2_negate);
    to_squirrel_function(vm, "distanceSquared", squirrel_cocos2dx_Vec2_distanceSquared);
    to_squirrel_function(vm, "isOne", squirrel_cocos2dx_Vec2_isOne);
    to_squirrel_function(vm, "scale", squirrel_cocos2dx_Vec2_scale);
    to_squirrel_function(vm, "getLength", squirrel_cocos2dx_Vec2_getLength);
    to_squirrel_function(vm, "cross", squirrel_cocos2dx_Vec2_cross);
    to_squirrel_function(vm, "rotateByAngle", squirrel_cocos2dx_Vec2_rotateByAngle);
    to_squirrel_function(vm, "fuzzyEquals", squirrel_cocos2dx_Vec2_fuzzyEquals);
    to_squirrel_function(vm, "getDistance", squirrel_cocos2dx_Vec2_getDistance);
    to_squirrel_function(vm, "isZero", squirrel_cocos2dx_Vec2_isZero);
    to_squirrel_function(vm, "getMidpoint", squirrel_cocos2dx_Vec2_getMidpoint);
    to_squirrel_function(vm, "getNormalized", squirrel_cocos2dx_Vec2_getNormalized);
    to_squirrel_function(vm, "normalize", squirrel_cocos2dx_Vec2_normalize);
    to_squirrel_function(vm, "lengthSquared", squirrel_cocos2dx_Vec2_lengthSquared);
    to_squirrel_function(vm, "lerp", squirrel_cocos2dx_Vec2_lerp);
    to_squirrel_function(vm, "equals", squirrel_cocos2dx_Vec2_equals);
    to_squirrel_function(vm, "compOp", squirrel_cocos2dx_Vec2_compOp);
    to_squirrel_function(vm, "unrotate", squirrel_cocos2dx_Vec2_unrotate);
    to_squirrel_function(vm, "getLengthSq", squirrel_cocos2dx_Vec2_getLengthSq);
    to_squirrel_function(vm, "getPerp", squirrel_cocos2dx_Vec2_getPerp);
    to_squirrel_function(vm, "distance", squirrel_cocos2dx_Vec2_distance);
    to_squirrel_function(vm, "rotate", squirrel_cocos2dx_Vec2_rotate);
    to_squirrel_function(vm, "getClampPoint", squirrel_cocos2dx_Vec2_getClampPoint);
    to_squirrel_function(vm, "getAngle", squirrel_cocos2dx_Vec2_getAngle);
    to_squirrel_function(vm, "setPoint", squirrel_cocos2dx_Vec2_setPoint);
    to_squirrel_function(vm, "smooth", squirrel_cocos2dx_Vec2_smooth);
    to_squirrel_function(vm, "project", squirrel_cocos2dx_Vec2_project);
    to_squirrel_function(vm, "getRPerp", squirrel_cocos2dx_Vec2_getRPerp);
    to_squirrel_function(vm, "length", squirrel_cocos2dx_Vec2_length);
    to_squirrel_function(vm, "clamp", squirrel_cocos2dx_Vec2_clamp_static, SQTrue);
    to_squirrel_function(vm, "isLineParallel", squirrel_cocos2dx_Vec2_isLineParallel_static, SQTrue);
    to_squirrel_function(vm, "isLineOverlap", squirrel_cocos2dx_Vec2_isLineOverlap_static, SQTrue);
    to_squirrel_function(vm, "angle", squirrel_cocos2dx_Vec2_angle_static, SQTrue);
    to_squirrel_function(vm, "getIntersectPoint", squirrel_cocos2dx_Vec2_getIntersectPoint_static, SQTrue);
    to_squirrel_function(vm, "isLineIntersect", squirrel_cocos2dx_Vec2_isLineIntersect_static, SQTrue);
    to_squirrel_function(vm, "isSegmentOverlap", squirrel_cocos2dx_Vec2_isSegmentOverlap_static, SQTrue);
    to_squirrel_function(vm, "forAngle", squirrel_cocos2dx_Vec2_forAngle_static, SQTrue);
    to_squirrel_function(vm, "isSegmentIntersect", squirrel_cocos2dx_Vec2_isSegmentIntersect_static, SQTrue);
    to_squirrel_function(vm, "add", squirrel_cocos2dx_Vec2_add_static, SQTrue);
    to_squirrel_function(vm, "subtract", squirrel_cocos2dx_Vec2_subtract_static, SQTrue);
    to_squirrel_function(vm, "dot", squirrel_cocos2dx_Vec2_dot_static, SQTrue);

    to_squirrel_function(vm, "_get", squirrel_cocos2dx_Vec2_get_meta);
    to_squirrel_function(vm, "_set", squirrel_cocos2dx_Vec2_set_meta);
    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_Vec2_typeof_meta);

    to_squirrel_variable_object(vm, "ZERO", (SQUserPointer)&cocos2d::Vec2::ZERO, SQTrue);
    to_squirrel_variable_object(vm, "ONE", (SQUserPointer)&cocos2d::Vec2::ONE, SQTrue);
    to_squirrel_variable_object(vm, "UNIT_X", (SQUserPointer)&cocos2d::Vec2::UNIT_X, SQTrue);
    to_squirrel_variable_object(vm, "UNIT_Y", (SQUserPointer)&cocos2d::Vec2::UNIT_Y, SQTrue);
    to_squirrel_variable_object(vm, "ANCHOR_MIDDLE", (SQUserPointer)&cocos2d::Vec2::ANCHOR_MIDDLE, SQTrue);
    to_squirrel_variable_object(vm, "ANCHOR_BOTTOM_LEFT", (SQUserPointer)&cocos2d::Vec2::ANCHOR_BOTTOM_LEFT, SQTrue);
    to_squirrel_variable_object(vm, "ANCHOR_TOP_LEFT", (SQUserPointer)&cocos2d::Vec2::ANCHOR_TOP_LEFT, SQTrue);
    to_squirrel_variable_object(vm, "ANCHOR_BOTTOM_RIGHT", (SQUserPointer)&cocos2d::Vec2::ANCHOR_BOTTOM_RIGHT, SQTrue);
    to_squirrel_variable_object(vm, "ANCHOR_TOP_RIGHT", (SQUserPointer)&cocos2d::Vec2::ANCHOR_TOP_RIGHT, SQTrue);
    to_squirrel_variable_object(vm, "ANCHOR_MIDDLE_RIGHT", (SQUserPointer)&cocos2d::Vec2::ANCHOR_MIDDLE_RIGHT, SQTrue);
    to_squirrel_variable_object(vm, "ANCHOR_MIDDLE_LEFT", (SQUserPointer)&cocos2d::Vec2::ANCHOR_MIDDLE_LEFT, SQTrue);
    to_squirrel_variable_object(vm, "ANCHOR_MIDDLE_TOP", (SQUserPointer)&cocos2d::Vec2::ANCHOR_MIDDLE_TOP, SQTrue);
    to_squirrel_variable_object(vm, "ANCHOR_MIDDLE_BOTTOM", (SQUserPointer)&cocos2d::Vec2::ANCHOR_MIDDLE_BOTTOM, SQTrue);


    squirrel_cocos2dx_Vec2_push_c_class(vm);

    std::string typeName = typeid(cocos2d::Vec2).name();
    g_sqType[typeName] = "cc.Vec2";

    return 1;
}
SQInteger squirrel_cocos2dx_Vec3_clamp(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec3* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec3_clamp'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        cocos2d::Vec3 arg0;
        cocos2d::Vec3 arg1;

        cocos2d::Vec3* ptr2 = nullptr; ok &= sqval_to_vec3(vm, 2, ptr2); arg0 = *ptr2;

        cocos2d::Vec3* ptr3 = nullptr; ok &= sqval_to_vec3(vm, 3, ptr3); arg1 = *ptr3;
        if (!ok)
            return 0;
        cobj->clamp(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "clamp", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec3_set(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec3* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec3_set'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_ARRAY) {
                break;
            }

            const float* arg0;
            ok &= sqval_to_float_array(vm, 2, (const float **)&arg0);

            if (!ok) { break; }
            cobj->set(arg0);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 3) {
            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);

            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);

            if (!ok) { break; }
            float arg2;
            ok &= sqval_to_float(vm, 4, &arg2);

            if (!ok) { break; }
            cobj->set(arg0, arg1, arg2);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Vec3")) {
                break;
            }

            cocos2d::Vec3 arg0;
            cocos2d::Vec3* ptr2 = nullptr; ok &= sqval_to_vec3(vm, 2, ptr2); arg0 = *ptr2;

            if (!ok) { break; }
            cobj->set(arg0);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Vec3")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Vec3")) {
                break;
            }

            cocos2d::Vec3 arg0;
            cocos2d::Vec3* ptr2 = nullptr; ok &= sqval_to_vec3(vm, 2, ptr2); arg0 = *ptr2;

            if (!ok) { break; }
            cocos2d::Vec3 arg1;
            cocos2d::Vec3* ptr3 = nullptr; ok &= sqval_to_vec3(vm, 3, ptr3); arg1 = *ptr3;

            if (!ok) { break; }
            cobj->set(arg0, arg1);
            return 0;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "set", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec3_negate(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec3* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec3_negate'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->negate();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "negate", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec3_distanceSquared(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec3* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec3_distanceSquared'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec3 arg0;

        cocos2d::Vec3* ptr2 = nullptr; ok &= sqval_to_vec3(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        float ret = cobj->distanceSquared(arg0);
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "distanceSquared", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec3_isOne(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec3* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec3_isOne'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isOne();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isOne", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec3_scale(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec3* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec3_scale'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->scale(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "scale", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec3_cross(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec3* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec3_cross'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec3 arg0;

        cocos2d::Vec3* ptr2 = nullptr; ok &= sqval_to_vec3(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->cross(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "cross", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec3_add(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec3* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec3_add'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec3 arg0;

        cocos2d::Vec3* ptr2 = nullptr; ok &= sqval_to_vec3(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->add(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "add", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec3_isZero(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec3* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec3_isZero'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isZero();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isZero", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec3_getNormalized(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec3* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec3_getNormalized'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Vec3 ret = cobj->getNormalized();
        vec3_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getNormalized", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec3_normalize(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec3* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec3_normalize'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->normalize();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "normalize", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec3_lengthSquared(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec3* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec3_lengthSquared'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->lengthSquared();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "lengthSquared", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec3_subtract(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec3* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec3_subtract'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec3 arg0;

        cocos2d::Vec3* ptr2 = nullptr; ok &= sqval_to_vec3(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->subtract(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "subtract", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec3_distance(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec3* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec3_distance'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec3 arg0;

        cocos2d::Vec3* ptr2 = nullptr; ok &= sqval_to_vec3(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        float ret = cobj->distance(arg0);
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "distance", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec3_smooth(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec3* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec3_smooth'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 3) 
    {
        cocos2d::Vec3 arg0;
        float arg1;
        float arg2;

        cocos2d::Vec3* ptr2 = nullptr; ok &= sqval_to_vec3(vm, 2, ptr2); arg0 = *ptr2;

        ok &= sqval_to_float(vm, 3, &arg1);

        ok &= sqval_to_float(vm, 4, &arg2);
        if (!ok)
            return 0;
        cobj->smooth(arg0, arg1, arg2);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "smooth", (int)argc, 3);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec3_length(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec3* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec3_length'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->length();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "length", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec3_dot(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec3* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Vec3_dot'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec3 arg0;

        cocos2d::Vec3* ptr2 = nullptr; ok &= sqval_to_vec3(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        float ret = cobj->dot(arg0);
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "dot", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec3_clamp_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;

    if (sq_gettype(vm, 1) == OT_INSTANCE) {
        return squirrel_cocos2dx_Vec3_clamp(vm);
    }

    argc = sq_gettop(vm) - 1;

    if (argc == 4)
    {
        cocos2d::Vec3 arg0;
        cocos2d::Vec3 arg1;
        cocos2d::Vec3 arg2;
        cocos2d::Vec3* arg3;
        cocos2d::Vec3* ptr2 = nullptr; ok &= sqval_to_vec3(vm, 2, ptr2); arg0 = *ptr2;
        cocos2d::Vec3* ptr3 = nullptr; ok &= sqval_to_vec3(vm, 3, ptr3); arg1 = *ptr3;
        cocos2d::Vec3* ptr4 = nullptr; ok &= sqval_to_vec3(vm, 4, ptr4); arg2 = *ptr4;
        ok &= sqval_to_object<cocos2d::Vec3>(vm, 5, &arg3);
        if(!ok)
            return 0;
        cocos2d::Vec3::clamp(arg0, arg1, arg2, arg3);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "clamp", (int)argc, 4);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec3_angle_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        cocos2d::Vec3 arg0;
        cocos2d::Vec3 arg1;
        cocos2d::Vec3* ptr2 = nullptr; ok &= sqval_to_vec3(vm, 2, ptr2); arg0 = *ptr2;
        cocos2d::Vec3* ptr3 = nullptr; ok &= sqval_to_vec3(vm, 3, ptr3); arg1 = *ptr3;
        if(!ok)
            return 0;
        float ret = cocos2d::Vec3::angle(arg0, arg1);
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "angle", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec3_cross_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;

    if (sq_gettype(vm, 1) == OT_INSTANCE) {
        return squirrel_cocos2dx_Vec3_cross(vm);
    }

    argc = sq_gettop(vm) - 1;

    if (argc == 3)
    {
        cocos2d::Vec3 arg0;
        cocos2d::Vec3 arg1;
        cocos2d::Vec3* arg2;
        cocos2d::Vec3* ptr2 = nullptr; ok &= sqval_to_vec3(vm, 2, ptr2); arg0 = *ptr2;
        cocos2d::Vec3* ptr3 = nullptr; ok &= sqval_to_vec3(vm, 3, ptr3); arg1 = *ptr3;
        ok &= sqval_to_object<cocos2d::Vec3>(vm, 4, &arg2);
        if(!ok)
            return 0;
        cocos2d::Vec3::cross(arg0, arg1, arg2);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "cross", (int)argc, 3);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec3_add_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;

    if (sq_gettype(vm, 1) == OT_INSTANCE) {
        return squirrel_cocos2dx_Vec3_add(vm);
    }

    argc = sq_gettop(vm) - 1;

    if (argc == 3)
    {
        cocos2d::Vec3 arg0;
        cocos2d::Vec3 arg1;
        cocos2d::Vec3* arg2;
        cocos2d::Vec3* ptr2 = nullptr; ok &= sqval_to_vec3(vm, 2, ptr2); arg0 = *ptr2;
        cocos2d::Vec3* ptr3 = nullptr; ok &= sqval_to_vec3(vm, 3, ptr3); arg1 = *ptr3;
        ok &= sqval_to_object<cocos2d::Vec3>(vm, 4, &arg2);
        if(!ok)
            return 0;
        cocos2d::Vec3::add(arg0, arg1, arg2);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "add", (int)argc, 3);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec3_fromColor_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        unsigned int arg0;
        ok &= sqval_to_uint32(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::Vec3 ret = cocos2d::Vec3::fromColor(arg0);
        vec3_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "fromColor", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec3_subtract_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;

    if (sq_gettype(vm, 1) == OT_INSTANCE) {
        return squirrel_cocos2dx_Vec3_subtract(vm);
    }

    argc = sq_gettop(vm) - 1;

    if (argc == 3)
    {
        cocos2d::Vec3 arg0;
        cocos2d::Vec3 arg1;
        cocos2d::Vec3* arg2;
        cocos2d::Vec3* ptr2 = nullptr; ok &= sqval_to_vec3(vm, 2, ptr2); arg0 = *ptr2;
        cocos2d::Vec3* ptr3 = nullptr; ok &= sqval_to_vec3(vm, 3, ptr3); arg1 = *ptr3;
        ok &= sqval_to_object<cocos2d::Vec3>(vm, 4, &arg2);
        if(!ok)
            return 0;
        cocos2d::Vec3::subtract(arg0, arg1, arg2);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "subtract", (int)argc, 3);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec3_dot_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;

    if (sq_gettype(vm, 1) == OT_INSTANCE) {
        return squirrel_cocos2dx_Vec3_dot(vm);
    }

    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        cocos2d::Vec3 arg0;
        cocos2d::Vec3 arg1;
        cocos2d::Vec3* ptr2 = nullptr; ok &= sqval_to_vec3(vm, 2, ptr2); arg0 = *ptr2;
        cocos2d::Vec3* ptr3 = nullptr; ok &= sqval_to_vec3(vm, 3, ptr3); arg1 = *ptr3;
        if(!ok)
            return 0;
        float ret = cocos2d::Vec3::dot(arg0, arg1);
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "dot", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_Vec3_constructor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Vec3* cobj = nullptr;
    bool ok  = true;

    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 3) {
            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);

            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);

            if (!ok) { break; }
            float arg2;
            ok &= sqval_to_float(vm, 4, &arg2);

            if (!ok) { break; }
            cobj = new cocos2d::Vec3(arg0, arg1, arg2);
            sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
            sq_setreleasehook(vm, 1, squirrel_releasehook_Vec3);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 0) {

            cobj = new cocos2d::Vec3();
            sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
            sq_setreleasehook(vm, 1, squirrel_releasehook_Vec3);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_ARRAY) {
                break;
            }

            const float* arg0;
            ok &= sqval_to_float_array(vm, 2, (const float **)&arg0);

            if (!ok) { break; }
            cobj = new cocos2d::Vec3(arg0);
            sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
            sq_setreleasehook(vm, 1, squirrel_releasehook_Vec3);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Vec3")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Vec3")) {
                break;
            }

            cocos2d::Vec3 arg0;
            cocos2d::Vec3* ptr2 = nullptr; ok &= sqval_to_vec3(vm, 2, ptr2); arg0 = *ptr2;

            if (!ok) { break; }
            cocos2d::Vec3 arg1;
            cocos2d::Vec3* ptr3 = nullptr; ok &= sqval_to_vec3(vm, 3, ptr3); arg1 = *ptr3;

            if (!ok) { break; }
            cobj = new cocos2d::Vec3(arg0, arg1);
            sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
            sq_setreleasehook(vm, 1, squirrel_releasehook_Vec3);
            return 1;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "Vec3", (int)argc, 2);
    return 0;
}


SQInteger squirrel_cocos2dx_Vec3_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.Vec3", -1);
    return 1;
}

SQInteger squirrel_cocos2dx_Vec3_get_meta(HSQUIRRELVM vm)
{
    cocos2d::Vec3 *cobj = nullptr;
    if (SQ_FAILED(sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0))) {
        CCLOG("cocos2d::Vec3 sq_getinstanceup failed.");
        sq_pushnull(vm);
        return 1;
    }

    const char *varName = nullptr;
    sq_getstring(vm, 2, &varName);
    
    do {
        if (strcmp(varName, "x") == 0) {
            sq_pushfloat(vm, (SQFloat)cobj->x);
            break;
        }
        if (strcmp(varName, "y") == 0) {
            sq_pushfloat(vm, (SQFloat)cobj->y);
            break;
        }
        if (strcmp(varName, "z") == 0) {
            sq_pushfloat(vm, (SQFloat)cobj->z);
            break;
        }

        return 0;
        
    } while(0);

    return 1;
}

SQInteger squirrel_cocos2dx_Vec3_set_meta(HSQUIRRELVM vm)
{
    cocos2d::Vec3 *cobj = nullptr;
    if (SQ_FAILED(sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0))) {
        CCLOG("cocos2d::Vec3 sq_getinstanceup failed.");
        return 0;
    }

    bool ok  = true;
    const char *varName = nullptr;
    sq_getstring(vm, 2, &varName);
    
    do {
        if (strcmp(varName, "x") == 0) {
            ok &= sqval_to_float(vm, 3, &cobj->x);
            if (! ok) {
                return 0;
            }
            break;
        }
        if (strcmp(varName, "y") == 0) {
            ok &= sqval_to_float(vm, 3, &cobj->y);
            if (! ok) {
                return 0;
            }
            break;
        }
        if (strcmp(varName, "z") == 0) {
            ok &= sqval_to_float(vm, 3, &cobj->z);
            if (! ok) {
                return 0;
            }
            break;
        }

        CCLOG("specified variable is not found in cocos2d::Vec3");
    } while(0);

    return 0;
}

void squirrel_cocos2dx_Vec3_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::Vec3", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_Vec3(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("Vec3"), -1);

    sq_newclass(vm, SQFalse);

    to_squirrel_function(vm, "constructor", squirrel_cocos2dx_Vec3_constructor);
    to_squirrel_function(vm, "set", squirrel_cocos2dx_Vec3_set);
    to_squirrel_function(vm, "negate", squirrel_cocos2dx_Vec3_negate);
    to_squirrel_function(vm, "distanceSquared", squirrel_cocos2dx_Vec3_distanceSquared);
    to_squirrel_function(vm, "isOne", squirrel_cocos2dx_Vec3_isOne);
    to_squirrel_function(vm, "scale", squirrel_cocos2dx_Vec3_scale);
    to_squirrel_function(vm, "isZero", squirrel_cocos2dx_Vec3_isZero);
    to_squirrel_function(vm, "getNormalized", squirrel_cocos2dx_Vec3_getNormalized);
    to_squirrel_function(vm, "normalize", squirrel_cocos2dx_Vec3_normalize);
    to_squirrel_function(vm, "lengthSquared", squirrel_cocos2dx_Vec3_lengthSquared);
    to_squirrel_function(vm, "distance", squirrel_cocos2dx_Vec3_distance);
    to_squirrel_function(vm, "smooth", squirrel_cocos2dx_Vec3_smooth);
    to_squirrel_function(vm, "length", squirrel_cocos2dx_Vec3_length);
    to_squirrel_function(vm, "clamp", squirrel_cocos2dx_Vec3_clamp_static, SQTrue);
    to_squirrel_function(vm, "angle", squirrel_cocos2dx_Vec3_angle_static, SQTrue);
    to_squirrel_function(vm, "cross", squirrel_cocos2dx_Vec3_cross_static, SQTrue);
    to_squirrel_function(vm, "add", squirrel_cocos2dx_Vec3_add_static, SQTrue);
    to_squirrel_function(vm, "fromColor", squirrel_cocos2dx_Vec3_fromColor_static, SQTrue);
    to_squirrel_function(vm, "subtract", squirrel_cocos2dx_Vec3_subtract_static, SQTrue);
    to_squirrel_function(vm, "dot", squirrel_cocos2dx_Vec3_dot_static, SQTrue);

    to_squirrel_function(vm, "_get", squirrel_cocos2dx_Vec3_get_meta);
    to_squirrel_function(vm, "_set", squirrel_cocos2dx_Vec3_set_meta);
    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_Vec3_typeof_meta);

    to_squirrel_variable_object(vm, "ZERO", (SQUserPointer)&cocos2d::Vec3::ZERO, SQTrue);
    to_squirrel_variable_object(vm, "ONE", (SQUserPointer)&cocos2d::Vec3::ONE, SQTrue);
    to_squirrel_variable_object(vm, "UNIT_X", (SQUserPointer)&cocos2d::Vec3::UNIT_X, SQTrue);
    to_squirrel_variable_object(vm, "UNIT_Y", (SQUserPointer)&cocos2d::Vec3::UNIT_Y, SQTrue);
    to_squirrel_variable_object(vm, "UNIT_Z", (SQUserPointer)&cocos2d::Vec3::UNIT_Z, SQTrue);


    squirrel_cocos2dx_Vec3_push_c_class(vm);

    std::string typeName = typeid(cocos2d::Vec3).name();
    g_sqType[typeName] = "cc.Vec3";

    return 1;
}
SQInteger squirrel_cocos2dx_Touch_getPreviousLocationInView(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Touch* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Touch_getPreviousLocationInView'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Vec2 ret = cobj->getPreviousLocationInView();
        vec2_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getPreviousLocationInView", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Touch_getLocation(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Touch* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Touch_getLocation'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Vec2 ret = cobj->getLocation();
        vec2_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getLocation", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Touch_getDelta(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Touch* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Touch_getDelta'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Vec2 ret = cobj->getDelta();
        vec2_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getDelta", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Touch_getStartLocationInView(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Touch* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Touch_getStartLocationInView'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Vec2 ret = cobj->getStartLocationInView();
        vec2_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getStartLocationInView", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Touch_getStartLocation(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Touch* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Touch_getStartLocation'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Vec2 ret = cobj->getStartLocation();
        vec2_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getStartLocation", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Touch_getID(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Touch* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Touch_getID'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        int ret = cobj->getID();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getID", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Touch_setTouchInfo(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Touch* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Touch_setTouchInfo'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 3) 
    {
        int arg0;
        float arg1;
        float arg2;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);

        ok &= sqval_to_float(vm, 3, &arg1);

        ok &= sqval_to_float(vm, 4, &arg2);
        if (!ok)
            return 0;
        cobj->setTouchInfo(arg0, arg1, arg2);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setTouchInfo", (int)argc, 3);
    return 0;
}
SQInteger squirrel_cocos2dx_Touch_getLocationInView(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Touch* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Touch_getLocationInView'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Vec2 ret = cobj->getLocationInView();
        vec2_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getLocationInView", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Touch_getPreviousLocation(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Touch* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Touch_getPreviousLocation'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Vec2 ret = cobj->getPreviousLocation();
        vec2_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getPreviousLocation", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Touch_constructor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Touch* cobj = nullptr;
    bool ok  = true;

    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj = new cocos2d::Touch();
        sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
        cobj->retain();
        sq_setreleasehook(vm, 1, squirrel_releasehook_Ref);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "Touch", (int)argc, 0);
    return 0;
}


SQInteger squirrel_cocos2dx_Touch_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.Touch", -1);
    return 1;
}

void squirrel_cocos2dx_Touch_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::Touch", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_Touch(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("Touch"), -1);


    sq_pushstring(vm, _SC("Ref"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "constructor", squirrel_cocos2dx_Touch_constructor);
    to_squirrel_function(vm, "getPreviousLocationInView", squirrel_cocos2dx_Touch_getPreviousLocationInView);
    to_squirrel_function(vm, "getLocation", squirrel_cocos2dx_Touch_getLocation);
    to_squirrel_function(vm, "getDelta", squirrel_cocos2dx_Touch_getDelta);
    to_squirrel_function(vm, "getStartLocationInView", squirrel_cocos2dx_Touch_getStartLocationInView);
    to_squirrel_function(vm, "getStartLocation", squirrel_cocos2dx_Touch_getStartLocation);
    to_squirrel_function(vm, "getID", squirrel_cocos2dx_Touch_getID);
    to_squirrel_function(vm, "setTouchInfo", squirrel_cocos2dx_Touch_setTouchInfo);
    to_squirrel_function(vm, "getLocationInView", squirrel_cocos2dx_Touch_getLocationInView);
    to_squirrel_function(vm, "getPreviousLocation", squirrel_cocos2dx_Touch_getPreviousLocation);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_Touch_typeof_meta);


    sq_pushstring(vm, _SC("DispatchMode"), -1);
    sq_newtable(vm);
    to_squirrel_variable_integer(vm, "ALL_AT_ONCE", (SQInteger)cocos2d::Touch::DispatchMode::ALL_AT_ONCE, SQTrue);
    to_squirrel_variable_integer(vm, "ONE_BY_ONE", (SQInteger)cocos2d::Touch::DispatchMode::ONE_BY_ONE, SQTrue);
    sq_newslot(vm, -3, SQTrue);

    squirrel_cocos2dx_Touch_push_c_class(vm);

    std::string typeName = typeid(cocos2d::Touch).name();
    g_sqType[typeName] = "cc.Touch";

    return 1;
}
SQInteger squirrel_cocos2dx_NodeData_resetData(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::NodeData* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_NodeData_resetData'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->resetData();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "resetData", (int)argc, 0);
    return 0;
}

SQInteger squirrel_cocos2dx_NodeData_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.NodeData", -1);
    return 1;
}

SQInteger squirrel_cocos2dx_NodeData_get_meta(HSQUIRRELVM vm)
{
    cocos2d::NodeData *cobj = nullptr;
    if (SQ_FAILED(sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0))) {
        CCLOG("cocos2d::NodeData sq_getinstanceup failed.");
        sq_pushnull(vm);
        return 1;
    }

    const char *varName = nullptr;
    sq_getstring(vm, 2, &varName);
    
    do {
        if (strcmp(varName, "id") == 0) {
            sq_pushstring(vm, (const SQChar *)cobj->id.c_str(), -1);
            break;
        }
        if (strcmp(varName, "transform") == 0) {
            mat4_to_sqval(vm, cobj->transform);
            break;
        }
        if (strcmp(varName, "modelNodeDatas") == 0) {
            ccvector_object_to_sqval<cocos2d::ModelData >(vm, "td::vector<cc.ModelData", cobj->modelNodeDatas);
            break;
        }
        if (strcmp(varName, "children") == 0) {
            ccvector_object_to_sqval<cocos2d::NodeData >(vm, "td::vector<cc.NodeData", cobj->children);
            break;
        }

        return 0;
        
    } while(0);

    return 1;
}

SQInteger squirrel_cocos2dx_NodeData_set_meta(HSQUIRRELVM vm)
{
    cocos2d::NodeData *cobj = nullptr;
    if (SQ_FAILED(sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0))) {
        CCLOG("cocos2d::NodeData sq_getinstanceup failed.");
        return 0;
    }

    bool ok  = true;
    const char *varName = nullptr;
    sq_getstring(vm, 2, &varName);
    
    do {
        if (strcmp(varName, "id") == 0) {
            ok &= sqval_to_std_string(vm, 3, &cobj->id);
            if (! ok) {
                return 0;
            }
            break;
        }
        if (strcmp(varName, "transform") == 0) {
            cocos2d::Mat4 *ptr3 = nullptr; ok &= sqval_to_mat4(vm, 3, ptr3); cobj->transform = *ptr3;
            if (! ok) {
                return 0;
            }
            break;
        }
        if (strcmp(varName, "modelNodeDatas") == 0) {
            ok &= sqval_to_ccvector_object<cocos2d::ModelData >(vm, 3, cobj->modelNodeDatas);
            if (! ok) {
                return 0;
            }
            break;
        }
        if (strcmp(varName, "children") == 0) {
            ok &= sqval_to_ccvector_object<cocos2d::NodeData >(vm, 3, cobj->children);
            if (! ok) {
                return 0;
            }
            break;
        }

        CCLOG("specified variable is not found in cocos2d::NodeData");
    } while(0);

    return 0;
}

void squirrel_cocos2dx_NodeData_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::NodeData", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_NodeData(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("NodeData"), -1);

    sq_newclass(vm, SQFalse);

    to_squirrel_function(vm, "resetData", squirrel_cocos2dx_NodeData_resetData);

    to_squirrel_function(vm, "_get", squirrel_cocos2dx_NodeData_get_meta);
    to_squirrel_function(vm, "_set", squirrel_cocos2dx_NodeData_set_meta);
    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_NodeData_typeof_meta);



    squirrel_cocos2dx_NodeData_push_c_class(vm);

    std::string typeName = typeid(cocos2d::NodeData).name();
    g_sqType[typeName] = "cc.NodeData";

    return 1;
}
SQInteger squirrel_cocos2dx_ParticleBatchNode_setTexture(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleBatchNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleBatchNode_setTexture'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Texture2D* arg0;

        ok &= sqval_to_object<cocos2d::Texture2D>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setTexture(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setTexture", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleBatchNode_disableParticle(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleBatchNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleBatchNode_disableParticle'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        int arg0;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if (!ok)
            return 0;
        cobj->disableParticle(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "disableParticle", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleBatchNode_getTexture(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleBatchNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleBatchNode_getTexture'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Texture2D* ret = cobj->getTexture();
        object_to_sqval<cocos2d::Texture2D>(vm, "cc.Texture2D", (cocos2d::Texture2D*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getTexture", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleBatchNode_setTextureAtlas(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleBatchNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleBatchNode_setTextureAtlas'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::TextureAtlas* arg0;

        ok &= sqval_to_object<cocos2d::TextureAtlas>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setTextureAtlas(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setTextureAtlas", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleBatchNode_removeAllChildrenWithCleanup(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleBatchNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleBatchNode_removeAllChildrenWithCleanup'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->removeAllChildrenWithCleanup(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "removeAllChildrenWithCleanup", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleBatchNode_getTextureAtlas(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleBatchNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleBatchNode_getTextureAtlas'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::TextureAtlas* ret = cobj->getTextureAtlas();
        object_to_sqval<cocos2d::TextureAtlas>(vm, "cc.TextureAtlas", (cocos2d::TextureAtlas*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getTextureAtlas", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleBatchNode_insertChild(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleBatchNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleBatchNode_insertChild'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        cocos2d::ParticleSystem* arg0;
        int arg1;

        ok &= sqval_to_object<cocos2d::ParticleSystem>(vm, 2, &arg0);

        ok &= sqval_to_int32(vm, 3, (int *)&arg1);
        if (!ok)
            return 0;
        cobj->insertChild(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "insertChild", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleBatchNode_removeChildAtIndex(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleBatchNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleBatchNode_removeChildAtIndex'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        int arg0;
        bool arg1;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);

        ok &= sqval_to_boolean(vm, 3, &arg1);
        if (!ok)
            return 0;
        cobj->removeChildAtIndex(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "removeChildAtIndex", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleBatchNode_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        std::string arg0;
        ok &= sqval_to_std_string(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::ParticleBatchNode* ret = cocos2d::ParticleBatchNode::create(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.ParticleBatchNode");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    if (argc == 2)
    {
        std::string arg0;
        int arg1;
        ok &= sqval_to_std_string(vm, 2, &arg0);
        ok &= sqval_to_int32(vm, 3, (int *)&arg1);
        if(!ok)
            return 0;
        cocos2d::ParticleBatchNode* ret = cocos2d::ParticleBatchNode::create(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.ParticleBatchNode");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleBatchNode_createWithTexture_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        cocos2d::Texture2D* arg0;
        ok &= sqval_to_object<cocos2d::Texture2D>(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::ParticleBatchNode* ret = cocos2d::ParticleBatchNode::createWithTexture(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.ParticleBatchNode");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    if (argc == 2)
    {
        cocos2d::Texture2D* arg0;
        int arg1;
        ok &= sqval_to_object<cocos2d::Texture2D>(vm, 2, &arg0);
        ok &= sqval_to_int32(vm, 3, (int *)&arg1);
        if(!ok)
            return 0;
        cocos2d::ParticleBatchNode* ret = cocos2d::ParticleBatchNode::createWithTexture(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.ParticleBatchNode");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "createWithTexture", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_ParticleBatchNode_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.ParticleBatchNode", -1);
    return 1;
}

void squirrel_cocos2dx_ParticleBatchNode_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::ParticleBatchNode", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TextureProtocol", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::BlendProtocol", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_ParticleBatchNode(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("ParticleBatchNode"), -1);


    sq_pushstring(vm, _SC("Node"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "setTexture", squirrel_cocos2dx_ParticleBatchNode_setTexture);
    to_squirrel_function(vm, "disableParticle", squirrel_cocos2dx_ParticleBatchNode_disableParticle);
    to_squirrel_function(vm, "getTexture", squirrel_cocos2dx_ParticleBatchNode_getTexture);
    to_squirrel_function(vm, "setTextureAtlas", squirrel_cocos2dx_ParticleBatchNode_setTextureAtlas);
    to_squirrel_function(vm, "removeAllChildrenWithCleanup", squirrel_cocos2dx_ParticleBatchNode_removeAllChildrenWithCleanup);
    to_squirrel_function(vm, "getTextureAtlas", squirrel_cocos2dx_ParticleBatchNode_getTextureAtlas);
    to_squirrel_function(vm, "insertChild", squirrel_cocos2dx_ParticleBatchNode_insertChild);
    to_squirrel_function(vm, "removeChildAtIndex", squirrel_cocos2dx_ParticleBatchNode_removeChildAtIndex);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_ParticleBatchNode_create_static, SQTrue);
    to_squirrel_function(vm, "createWithTexture", squirrel_cocos2dx_ParticleBatchNode_createWithTexture_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_ParticleBatchNode_typeof_meta);



    squirrel_cocos2dx_ParticleBatchNode_push_c_class(vm);

    std::string typeName = typeid(cocos2d::ParticleBatchNode).name();
    g_sqType[typeName] = "cc.ParticleBatchNode";

    return 1;
}
SQInteger squirrel_cocos2dx_AnimationFrame_setSpriteFrame(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::AnimationFrame* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_AnimationFrame_setSpriteFrame'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::SpriteFrame* arg0;

        ok &= sqval_to_object<cocos2d::SpriteFrame>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setSpriteFrame(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setSpriteFrame", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_AnimationFrame_getUserInfo(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::AnimationFrame* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_AnimationFrame_getUserInfo'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 0) {

            cocos2d::ValueMap& ret = cobj->getUserInfo();
            ccvaluemap_to_sqval(vm, ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 0) {

            const cocos2d::ValueMap& ret = cobj->getUserInfo();
            ccvaluemap_to_sqval(vm, ret);
            return 1;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getUserInfo", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_AnimationFrame_setDelayUnits(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::AnimationFrame* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_AnimationFrame_setDelayUnits'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setDelayUnits(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setDelayUnits", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_AnimationFrame_clone(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::AnimationFrame* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_AnimationFrame_clone'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::AnimationFrame* ret = cobj->clone();
        object_to_sqval<cocos2d::AnimationFrame>(vm, "cc.AnimationFrame", (cocos2d::AnimationFrame*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "clone", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_AnimationFrame_getSpriteFrame(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::AnimationFrame* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_AnimationFrame_getSpriteFrame'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::SpriteFrame* ret = cobj->getSpriteFrame();
        object_to_sqval<cocos2d::SpriteFrame>(vm, "cc.SpriteFrame", (cocos2d::SpriteFrame*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getSpriteFrame", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_AnimationFrame_getDelayUnits(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::AnimationFrame* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_AnimationFrame_getDelayUnits'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getDelayUnits();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getDelayUnits", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_AnimationFrame_setUserInfo(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::AnimationFrame* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_AnimationFrame_setUserInfo'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::ValueMap arg0;

        ok &= sqval_to_ccvaluemap(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setUserInfo(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setUserInfo", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_AnimationFrame_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 3)
    {
        cocos2d::SpriteFrame* arg0;
        float arg1;
        cocos2d::ValueMap arg2;
        ok &= sqval_to_object<cocos2d::SpriteFrame>(vm, 2, &arg0);
        ok &= sqval_to_float(vm, 3, &arg1);
        ok &= sqval_to_ccvaluemap(vm, 4, &arg2);
        if(!ok)
            return 0;
        cocos2d::AnimationFrame* ret = cocos2d::AnimationFrame::create(arg0, arg1, arg2);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.AnimationFrame");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 3);
    return 0;
}

SQInteger squirrel_cocos2dx_AnimationFrame_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.AnimationFrame", -1);
    return 1;
}

void squirrel_cocos2dx_AnimationFrame_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::AnimationFrame", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_AnimationFrame(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("AnimationFrame"), -1);


    sq_pushstring(vm, _SC("Ref"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "setSpriteFrame", squirrel_cocos2dx_AnimationFrame_setSpriteFrame);
    to_squirrel_function(vm, "getUserInfo", squirrel_cocos2dx_AnimationFrame_getUserInfo);
    to_squirrel_function(vm, "setDelayUnits", squirrel_cocos2dx_AnimationFrame_setDelayUnits);
    to_squirrel_function(vm, "clone", squirrel_cocos2dx_AnimationFrame_clone);
    to_squirrel_function(vm, "getSpriteFrame", squirrel_cocos2dx_AnimationFrame_getSpriteFrame);
    to_squirrel_function(vm, "getDelayUnits", squirrel_cocos2dx_AnimationFrame_getDelayUnits);
    to_squirrel_function(vm, "setUserInfo", squirrel_cocos2dx_AnimationFrame_setUserInfo);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_AnimationFrame_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_AnimationFrame_typeof_meta);



    squirrel_cocos2dx_AnimationFrame_push_c_class(vm);

    std::string typeName = typeid(cocos2d::AnimationFrame).name();
    g_sqType[typeName] = "cc.AnimationFrame";

    return 1;
}
SQInteger squirrel_cocos2dx_NodeGrid_setTarget(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::NodeGrid* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_NodeGrid_setTarget'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Node* arg0;

        ok &= sqval_to_object<cocos2d::Node>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setTarget(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setTarget", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_NodeGrid_getGrid(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::NodeGrid* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_NodeGrid_getGrid'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 0) {

            const cocos2d::GridBase* ret = cobj->getGrid();
            object_to_sqval<cocos2d::GridBase>(vm, "cc.GridBase", (cocos2d::GridBase*)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 0) {

            cocos2d::GridBase* ret = cobj->getGrid();
            object_to_sqval<cocos2d::GridBase>(vm, "cc.GridBase", (cocos2d::GridBase*)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getGrid", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_NodeGrid_setGrid(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::NodeGrid* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_NodeGrid_setGrid'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::GridBase* arg0;

        ok &= sqval_to_object<cocos2d::GridBase>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setGrid(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setGrid", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_NodeGrid_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        cocos2d::NodeGrid* ret = cocos2d::NodeGrid::create();
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.NodeGrid");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 0);
    return 0;
}

SQInteger squirrel_cocos2dx_NodeGrid_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.NodeGrid", -1);
    return 1;
}

void squirrel_cocos2dx_NodeGrid_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::NodeGrid", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_NodeGrid(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("NodeGrid"), -1);


    sq_pushstring(vm, _SC("Node"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "setTarget", squirrel_cocos2dx_NodeGrid_setTarget);
    to_squirrel_function(vm, "getGrid", squirrel_cocos2dx_NodeGrid_getGrid);
    to_squirrel_function(vm, "setGrid", squirrel_cocos2dx_NodeGrid_setGrid);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_NodeGrid_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_NodeGrid_typeof_meta);



    squirrel_cocos2dx_NodeGrid_push_c_class(vm);

    std::string typeName = typeid(cocos2d::NodeGrid).name();
    g_sqType[typeName] = "cc.NodeGrid";

    return 1;
}
SQInteger squirrel_cocos2dx_TMXLayerInfo_setProperties(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TMXLayerInfo* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXLayerInfo_setProperties'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::ValueMap arg0;

        ok &= sqval_to_ccvaluemap(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setProperties(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setProperties", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXLayerInfo_getProperties(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TMXLayerInfo* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXLayerInfo_getProperties'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::ValueMap& ret = cobj->getProperties();
        ccvaluemap_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getProperties", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXLayerInfo_constructor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TMXLayerInfo* cobj = nullptr;
    bool ok  = true;

    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj = new cocos2d::TMXLayerInfo();
        sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
        cobj->retain();
        sq_setreleasehook(vm, 1, squirrel_releasehook_Ref);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "TMXLayerInfo", (int)argc, 0);
    return 0;
}


SQInteger squirrel_cocos2dx_TMXLayerInfo_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.TMXLayerInfo", -1);
    return 1;
}

void squirrel_cocos2dx_TMXLayerInfo_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::TMXLayerInfo", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_TMXLayerInfo(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("TMXLayerInfo"), -1);


    sq_pushstring(vm, _SC("Ref"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "constructor", squirrel_cocos2dx_TMXLayerInfo_constructor);
    to_squirrel_function(vm, "setProperties", squirrel_cocos2dx_TMXLayerInfo_setProperties);
    to_squirrel_function(vm, "getProperties", squirrel_cocos2dx_TMXLayerInfo_getProperties);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_TMXLayerInfo_typeof_meta);



    squirrel_cocos2dx_TMXLayerInfo_push_c_class(vm);

    std::string typeName = typeid(cocos2d::TMXLayerInfo).name();
    g_sqType[typeName] = "cc.TMXLayerInfo";

    return 1;
}
SQInteger squirrel_cocos2dx_EaseSineIn_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        cocos2d::ActionInterval* arg0;
        ok &= sqval_to_object<cocos2d::ActionInterval>(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::EaseSineIn* ret = cocos2d::EaseSineIn::create(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.EaseSineIn");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_EaseSineIn_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.EaseSineIn", -1);
    return 1;
}

void squirrel_cocos2dx_EaseSineIn_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::EaseSineIn", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionEase", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_EaseSineIn(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("EaseSineIn"), -1);


    sq_pushstring(vm, _SC("ActionEase"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_EaseSineIn_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_EaseSineIn_typeof_meta);



    squirrel_cocos2dx_EaseSineIn_push_c_class(vm);

    std::string typeName = typeid(cocos2d::EaseSineIn).name();
    g_sqType[typeName] = "cc.EaseSineIn";

    return 1;
}
SQInteger squirrel_cocos2dx_Sprite3D_setCullFaceEnabled(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Sprite3D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Sprite3D_setCullFaceEnabled'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setCullFaceEnabled(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setCullFaceEnabled", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Sprite3D_setTexture(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Sprite3D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Sprite3D_setTexture'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Texture2D")) {
                break;
            }

            cocos2d::Texture2D* arg0;
            ok &= sqval_to_object<cocos2d::Texture2D>(vm, 2, &arg0);

            if (!ok) { break; }
            cobj->setTexture(arg0);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);

            if (!ok) { break; }
            cobj->setTexture(arg0);
            return 0;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setTexture", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Sprite3D_getLightMask(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Sprite3D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Sprite3D_getLightMask'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        unsigned int ret = cobj->getLightMask();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getLightMask", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Sprite3D_removeAllAttachNode(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Sprite3D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Sprite3D_removeAllAttachNode'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->removeAllAttachNode();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "removeAllAttachNode", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Sprite3D_setBlendFunc(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Sprite3D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Sprite3D_setBlendFunc'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::BlendFunc arg0;

        cocos2d::BlendFunc *ptr2 = nullptr; ok &= sqval_to_blendfunc(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->setBlendFunc(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setBlendFunc", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Sprite3D_getMesh(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Sprite3D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Sprite3D_getMesh'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Mesh* ret = cobj->getMesh();
        object_to_sqval<cocos2d::Mesh>(vm, "cc.Mesh", (cocos2d::Mesh*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getMesh", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Sprite3D_setCullFace(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Sprite3D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Sprite3D_setCullFace'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        unsigned int arg0;

        ok &= sqval_to_uint32(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setCullFace(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setCullFace", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Sprite3D_setLightMask(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Sprite3D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Sprite3D_setLightMask'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        unsigned int arg0;

        ok &= sqval_to_uint32(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setLightMask(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setLightMask", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Sprite3D_getBlendFunc(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Sprite3D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Sprite3D_getBlendFunc'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::BlendFunc& ret = cobj->getBlendFunc();
        blendfunc_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getBlendFunc", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Sprite3D_getMeshCount(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Sprite3D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Sprite3D_getMeshCount'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        ssize_t ret = cobj->getMeshCount();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getMeshCount", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Sprite3D_getAABB(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Sprite3D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Sprite3D_getAABB'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::AABB& ret = cobj->getAABB();
        aabb_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getAABB", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Sprite3D_removeAttachNode(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Sprite3D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Sprite3D_removeAttachNode'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->removeAttachNode(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "removeAttachNode", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Sprite3D_getSkeleton(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Sprite3D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Sprite3D_getSkeleton'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Skeleton3D* ret = cobj->getSkeleton();
        object_to_sqval<cocos2d::Skeleton3D>(vm, "cc.Skeleton3D", (cocos2d::Skeleton3D*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getSkeleton", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Sprite3D_getMeshByIndex(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Sprite3D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Sprite3D_getMeshByIndex'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        int arg0;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if (!ok)
            return 0;
        cocos2d::Mesh* ret = cobj->getMeshByIndex(arg0);
        object_to_sqval<cocos2d::Mesh>(vm, "cc.Mesh", (cocos2d::Mesh*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getMeshByIndex", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Sprite3D_getMeshByName(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Sprite3D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Sprite3D_getMeshByName'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        cocos2d::Mesh* ret = cobj->getMeshByName(arg0);
        object_to_sqval<cocos2d::Mesh>(vm, "cc.Mesh", (cocos2d::Mesh*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getMeshByName", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Sprite3D_getMeshArrayByName(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Sprite3D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Sprite3D_getMeshArrayByName'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        std::vector<cocos2d::Mesh *> ret = cobj->getMeshArrayByName(arg0);
        ccvector_object_to_sqval<cocos2d::Mesh >(vm, "td::vector<cc.Mesh", ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getMeshArrayByName", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Sprite3D_getAttachNode(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Sprite3D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Sprite3D_getAttachNode'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        cocos2d::AttachNode* ret = cobj->getAttachNode(arg0);
        object_to_sqval<cocos2d::AttachNode>(vm, "cc.AttachNode", (cocos2d::AttachNode*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getAttachNode", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Sprite3D_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 2)
        {

            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_STRING) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);
            if (!ok) { break; }
            std::string arg1;
            ok &= sqval_to_std_string(vm, 3, &arg1);
            if (!ok) { break; }
            cocos2d::Sprite3D* ret = cocos2d::Sprite3D::create(arg0, arg1);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.Sprite3D");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 1)
        {

            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::Sprite3D* ret = cocos2d::Sprite3D::create(arg0);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.Sprite3D");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d", "create", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_Sprite3D_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.Sprite3D", -1);
    return 1;
}

void squirrel_cocos2dx_Sprite3D_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::Sprite3D", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::BlendProtocol", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_Sprite3D(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("Sprite3D"), -1);


    sq_pushstring(vm, _SC("Node"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "setCullFaceEnabled", squirrel_cocos2dx_Sprite3D_setCullFaceEnabled);
    to_squirrel_function(vm, "setTexture", squirrel_cocos2dx_Sprite3D_setTexture);
    to_squirrel_function(vm, "getLightMask", squirrel_cocos2dx_Sprite3D_getLightMask);
    to_squirrel_function(vm, "removeAllAttachNode", squirrel_cocos2dx_Sprite3D_removeAllAttachNode);
    to_squirrel_function(vm, "setBlendFunc", squirrel_cocos2dx_Sprite3D_setBlendFunc);
    to_squirrel_function(vm, "getMesh", squirrel_cocos2dx_Sprite3D_getMesh);
    to_squirrel_function(vm, "setCullFace", squirrel_cocos2dx_Sprite3D_setCullFace);
    to_squirrel_function(vm, "setLightMask", squirrel_cocos2dx_Sprite3D_setLightMask);
    to_squirrel_function(vm, "getBlendFunc", squirrel_cocos2dx_Sprite3D_getBlendFunc);
    to_squirrel_function(vm, "getMeshCount", squirrel_cocos2dx_Sprite3D_getMeshCount);
    to_squirrel_function(vm, "getAABB", squirrel_cocos2dx_Sprite3D_getAABB);
    to_squirrel_function(vm, "removeAttachNode", squirrel_cocos2dx_Sprite3D_removeAttachNode);
    to_squirrel_function(vm, "getSkeleton", squirrel_cocos2dx_Sprite3D_getSkeleton);
    to_squirrel_function(vm, "getMeshByIndex", squirrel_cocos2dx_Sprite3D_getMeshByIndex);
    to_squirrel_function(vm, "getMeshByName", squirrel_cocos2dx_Sprite3D_getMeshByName);
    to_squirrel_function(vm, "getMeshArrayByName", squirrel_cocos2dx_Sprite3D_getMeshArrayByName);
    to_squirrel_function(vm, "getAttachNode", squirrel_cocos2dx_Sprite3D_getAttachNode);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_Sprite3D_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_Sprite3D_typeof_meta);



    squirrel_cocos2dx_Sprite3D_push_c_class(vm);

    std::string typeName = typeid(cocos2d::Sprite3D).name();
    g_sqType[typeName] = "cc.Sprite3D";

    return 1;
}
SQInteger squirrel_cocos2dx_EaseBounceIn_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        cocos2d::ActionInterval* arg0;
        ok &= sqval_to_object<cocos2d::ActionInterval>(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::EaseBounceIn* ret = cocos2d::EaseBounceIn::create(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.EaseBounceIn");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_EaseBounceIn_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.EaseBounceIn", -1);
    return 1;
}

void squirrel_cocos2dx_EaseBounceIn_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::EaseBounceIn", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::EaseBounce", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionEase", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_EaseBounceIn(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("EaseBounceIn"), -1);


    sq_pushstring(vm, _SC("EaseBounce"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_EaseBounceIn_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_EaseBounceIn_typeof_meta);



    squirrel_cocos2dx_EaseBounceIn_push_c_class(vm);

    std::string typeName = typeid(cocos2d::EaseBounceIn).name();
    g_sqType[typeName] = "cc.EaseBounceIn";

    return 1;
}
SQInteger squirrel_cocos2dx_Camera_getProjectionMatrix(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Camera* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Camera_getProjectionMatrix'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::Mat4& ret = cobj->getProjectionMatrix();
        mat4_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getProjectionMatrix", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Camera_getViewProjectionMatrix(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Camera* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Camera_getViewProjectionMatrix'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::Mat4& ret = cobj->getViewProjectionMatrix();
        mat4_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getViewProjectionMatrix", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Camera_getViewMatrix(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Camera* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Camera_getViewMatrix'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::Mat4& ret = cobj->getViewMatrix();
        mat4_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getViewMatrix", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Camera_getCameraFlag(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Camera* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Camera_getCameraFlag'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        int ret = (int)cobj->getCameraFlag();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getCameraFlag", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Camera_getType(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Camera* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Camera_getType'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        int ret = (int)cobj->getType();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getType", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Camera_lookAt(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Camera* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Camera_lookAt'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        cocos2d::Vec3 arg0;
        cocos2d::Vec3 arg1;

        cocos2d::Vec3* ptr2 = nullptr; ok &= sqval_to_vec3(vm, 2, ptr2); arg0 = *ptr2;

        cocos2d::Vec3* ptr3 = nullptr; ok &= sqval_to_vec3(vm, 3, ptr3); arg1 = *ptr3;
        if (!ok)
            return 0;
        cobj->lookAt(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "lookAt", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_Camera_setCameraFlag(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Camera* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Camera_setCameraFlag'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::CameraFlag arg0;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if (!ok)
            return 0;
        cobj->setCameraFlag(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setCameraFlag", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Camera_unproject(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Camera* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Camera_unproject'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 3) 
    {
        cocos2d::Size arg0;
        cocos2d::Vec3* arg1;
        cocos2d::Vec3* arg2;

        cocos2d::Size* ptr2 = nullptr; ok &= sqval_to_size(vm, 2, ptr2); arg0 = *ptr2;

        ok &= sqval_to_object<cocos2d::Vec3>(vm, 3, &arg1);

        ok &= sqval_to_object<cocos2d::Vec3>(vm, 4, &arg2);
        if (!ok)
            return 0;
        cobj->unproject(arg0, arg1, arg2);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "unproject", (int)argc, 3);
    return 0;
}
SQInteger squirrel_cocos2dx_Camera_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        cocos2d::Camera* ret = cocos2d::Camera::create();
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.Camera");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Camera_createPerspective_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 4)
    {
        float arg0;
        float arg1;
        float arg2;
        float arg3;
        ok &= sqval_to_float(vm, 2, &arg0);
        ok &= sqval_to_float(vm, 3, &arg1);
        ok &= sqval_to_float(vm, 4, &arg2);
        ok &= sqval_to_float(vm, 5, &arg3);
        if(!ok)
            return 0;
        cocos2d::Camera* ret = cocos2d::Camera::createPerspective(arg0, arg1, arg2, arg3);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.Camera");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "createPerspective", (int)argc, 4);
    return 0;
}
SQInteger squirrel_cocos2dx_Camera_createOrthographic_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 4)
    {
        float arg0;
        float arg1;
        float arg2;
        float arg3;
        ok &= sqval_to_float(vm, 2, &arg0);
        ok &= sqval_to_float(vm, 3, &arg1);
        ok &= sqval_to_float(vm, 4, &arg2);
        ok &= sqval_to_float(vm, 5, &arg3);
        if(!ok)
            return 0;
        cocos2d::Camera* ret = cocos2d::Camera::createOrthographic(arg0, arg1, arg2, arg3);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.Camera");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "createOrthographic", (int)argc, 4);
    return 0;
}
SQInteger squirrel_cocos2dx_Camera_getVisitingCamera_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        const cocos2d::Camera* ret = cocos2d::Camera::getVisitingCamera();
        object_to_sqval<cocos2d::Camera>(vm, "cc.Camera", (cocos2d::Camera*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "getVisitingCamera", (int)argc, 0);
    return 0;
}

SQInteger squirrel_cocos2dx_Camera_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.Camera", -1);
    return 1;
}

void squirrel_cocos2dx_Camera_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::Camera", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_Camera(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("Camera"), -1);


    sq_pushstring(vm, _SC("Node"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "getProjectionMatrix", squirrel_cocos2dx_Camera_getProjectionMatrix);
    to_squirrel_function(vm, "getViewProjectionMatrix", squirrel_cocos2dx_Camera_getViewProjectionMatrix);
    to_squirrel_function(vm, "getViewMatrix", squirrel_cocos2dx_Camera_getViewMatrix);
    to_squirrel_function(vm, "getCameraFlag", squirrel_cocos2dx_Camera_getCameraFlag);
    to_squirrel_function(vm, "getType", squirrel_cocos2dx_Camera_getType);
    to_squirrel_function(vm, "lookAt", squirrel_cocos2dx_Camera_lookAt);
    to_squirrel_function(vm, "setCameraFlag", squirrel_cocos2dx_Camera_setCameraFlag);
    to_squirrel_function(vm, "unproject", squirrel_cocos2dx_Camera_unproject);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_Camera_create_static, SQTrue);
    to_squirrel_function(vm, "createPerspective", squirrel_cocos2dx_Camera_createPerspective_static, SQTrue);
    to_squirrel_function(vm, "createOrthographic", squirrel_cocos2dx_Camera_createOrthographic_static, SQTrue);
    to_squirrel_function(vm, "getVisitingCamera", squirrel_cocos2dx_Camera_getVisitingCamera_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_Camera_typeof_meta);


    sq_pushstring(vm, _SC("Type"), -1);
    sq_newtable(vm);
    to_squirrel_variable_integer(vm, "PERSPECTIVE", (SQInteger)cocos2d::Camera::Type::PERSPECTIVE, SQTrue);
    to_squirrel_variable_integer(vm, "ORTHOGRAPHIC", (SQInteger)cocos2d::Camera::Type::ORTHOGRAPHIC, SQTrue);
    sq_newslot(vm, -3, SQTrue);

    squirrel_cocos2dx_Camera_push_c_class(vm);

    std::string typeName = typeid(cocos2d::Camera).name();
    g_sqType[typeName] = "cc.Camera";

    return 1;
}
SQInteger squirrel_cocos2dx_GLProgram_getFragmentShaderLog(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLProgram* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLProgram_getFragmentShaderLog'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        std::string ret = cobj->getFragmentShaderLog();
        sq_pushstring(vm, (const SQChar *)ret.c_str(), -1);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getFragmentShaderLog", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_GLProgram_initWithByteArrays(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLProgram* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLProgram_initWithByteArrays'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        const char* arg0;
        const char* arg1;

        std::string arg0_tmp; ok &= sqval_to_std_string(vm, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();

        std::string arg1_tmp; ok &= sqval_to_std_string(vm, 3, &arg1_tmp); arg1 = arg1_tmp.c_str();
        if (!ok)
            return 0;
        bool ret = cobj->initWithByteArrays(arg0, arg1);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "initWithByteArrays", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_GLProgram_initWithFilenames(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLProgram* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLProgram_initWithFilenames'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        std::string arg0;
        std::string arg1;

        ok &= sqval_to_std_string(vm, 2, &arg0);

        ok &= sqval_to_std_string(vm, 3, &arg1);
        if (!ok)
            return 0;
        bool ret = cobj->initWithFilenames(arg0, arg1);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "initWithFilenames", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_GLProgram_getVertexShaderLog(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLProgram* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLProgram_getVertexShaderLog'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        std::string ret = cobj->getVertexShaderLog();
        sq_pushstring(vm, (const SQChar *)ret.c_str(), -1);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getVertexShaderLog", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_GLProgram_use(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLProgram* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLProgram_use'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->use();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "use", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_GLProgram_setUniformLocationWith1i(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLProgram* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLProgram_setUniformLocationWith1i'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        int arg0;
        int arg1;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);

        ok &= sqval_to_int32(vm, 3, (int *)&arg1);
        if (!ok)
            return 0;
        cobj->setUniformLocationWith1i(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setUniformLocationWith1i", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_GLProgram_setUniformsForBuiltins(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLProgram* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLProgram_setUniformsForBuiltins'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Mat4")) {
                break;
            }

            cocos2d::Mat4 arg0;
            cocos2d::Mat4 *ptr2 = nullptr; ok &= sqval_to_mat4(vm, 2, ptr2); arg0 = *ptr2;

            if (!ok) { break; }
            cobj->setUniformsForBuiltins(arg0);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 0) {

            cobj->setUniformsForBuiltins();
            return 0;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setUniformsForBuiltins", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_GLProgram_updateUniforms(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLProgram* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLProgram_updateUniforms'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->updateUniforms();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "updateUniforms", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_GLProgram_link(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLProgram* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLProgram_link'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->link();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "link", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_GLProgram_reset(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLProgram* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLProgram_reset'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->reset();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "reset", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_GLProgram_bindAttribLocation(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLProgram* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLProgram_bindAttribLocation'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        std::string arg0;
        unsigned int arg1;

        ok &= sqval_to_std_string(vm, 2, &arg0);

        ok &= sqval_to_uint32(vm, 3, &arg1);
        if (!ok)
            return 0;
        cobj->bindAttribLocation(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "bindAttribLocation", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_GLProgram_getAttribLocation(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLProgram* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLProgram_getAttribLocation'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        int ret = cobj->getAttribLocation(arg0);
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getAttribLocation", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_GLProgram_createWithByteArrays_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        const char* arg0;
        const char* arg1;
        std::string arg0_tmp; ok &= sqval_to_std_string(vm, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();
        std::string arg1_tmp; ok &= sqval_to_std_string(vm, 3, &arg1_tmp); arg1 = arg1_tmp.c_str();
        if(!ok)
            return 0;
        cocos2d::GLProgram* ret = cocos2d::GLProgram::createWithByteArrays(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.GLProgram");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "createWithByteArrays", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_GLProgram_createWithFilenames_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        std::string arg0;
        std::string arg1;
        ok &= sqval_to_std_string(vm, 2, &arg0);
        ok &= sqval_to_std_string(vm, 3, &arg1);
        if(!ok)
            return 0;
        cocos2d::GLProgram* ret = cocos2d::GLProgram::createWithFilenames(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.GLProgram");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "createWithFilenames", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_GLProgram_constructor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLProgram* cobj = nullptr;
    bool ok  = true;

    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj = new cocos2d::GLProgram();
        sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
        cobj->retain();
        sq_setreleasehook(vm, 1, squirrel_releasehook_Ref);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "GLProgram", (int)argc, 0);
    return 0;
}


SQInteger squirrel_cocos2dx_GLProgram_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.GLProgram", -1);
    return 1;
}

void squirrel_cocos2dx_GLProgram_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::GLProgram", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_GLProgram(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("GLProgram"), -1);


    sq_pushstring(vm, _SC("Ref"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "constructor", squirrel_cocos2dx_GLProgram_constructor);
    to_squirrel_function(vm, "getFragmentShaderLog", squirrel_cocos2dx_GLProgram_getFragmentShaderLog);
    to_squirrel_function(vm, "initWithByteArrays", squirrel_cocos2dx_GLProgram_initWithByteArrays);
    to_squirrel_function(vm, "initWithFilenames", squirrel_cocos2dx_GLProgram_initWithFilenames);
    to_squirrel_function(vm, "getVertexShaderLog", squirrel_cocos2dx_GLProgram_getVertexShaderLog);
    to_squirrel_function(vm, "use", squirrel_cocos2dx_GLProgram_use);
    to_squirrel_function(vm, "setUniformLocationWith1i", squirrel_cocos2dx_GLProgram_setUniformLocationWith1i);
    to_squirrel_function(vm, "setUniformsForBuiltins", squirrel_cocos2dx_GLProgram_setUniformsForBuiltins);
    to_squirrel_function(vm, "updateUniforms", squirrel_cocos2dx_GLProgram_updateUniforms);
    to_squirrel_function(vm, "link", squirrel_cocos2dx_GLProgram_link);
    to_squirrel_function(vm, "reset", squirrel_cocos2dx_GLProgram_reset);
    to_squirrel_function(vm, "bindAttribLocation", squirrel_cocos2dx_GLProgram_bindAttribLocation);
    to_squirrel_function(vm, "getAttribLocation", squirrel_cocos2dx_GLProgram_getAttribLocation);
    to_squirrel_function(vm, "createWithByteArrays", squirrel_cocos2dx_GLProgram_createWithByteArrays_static, SQTrue);
    to_squirrel_function(vm, "createWithFilenames", squirrel_cocos2dx_GLProgram_createWithFilenames_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_GLProgram_typeof_meta);

    to_squirrel_variable_integer(vm, "VERTEX_ATTRIB_POSITION", (SQInteger)cocos2d::GLProgram::VERTEX_ATTRIB_POSITION, SQTrue);
    to_squirrel_variable_integer(vm, "VERTEX_ATTRIB_COLOR", (SQInteger)cocos2d::GLProgram::VERTEX_ATTRIB_COLOR, SQTrue);
    to_squirrel_variable_integer(vm, "VERTEX_ATTRIB_TEX_COORD", (SQInteger)cocos2d::GLProgram::VERTEX_ATTRIB_TEX_COORD, SQTrue);
    to_squirrel_variable_integer(vm, "VERTEX_ATTRIB_TEX_COORD1", (SQInteger)cocos2d::GLProgram::VERTEX_ATTRIB_TEX_COORD1, SQTrue);
    to_squirrel_variable_integer(vm, "VERTEX_ATTRIB_TEX_COORD2", (SQInteger)cocos2d::GLProgram::VERTEX_ATTRIB_TEX_COORD2, SQTrue);
    to_squirrel_variable_integer(vm, "VERTEX_ATTRIB_TEX_COORD3", (SQInteger)cocos2d::GLProgram::VERTEX_ATTRIB_TEX_COORD3, SQTrue);
    to_squirrel_variable_integer(vm, "VERTEX_ATTRIB_NORMAL", (SQInteger)cocos2d::GLProgram::VERTEX_ATTRIB_NORMAL, SQTrue);
    to_squirrel_variable_integer(vm, "VERTEX_ATTRIB_BLEND_WEIGHT", (SQInteger)cocos2d::GLProgram::VERTEX_ATTRIB_BLEND_WEIGHT, SQTrue);
    to_squirrel_variable_integer(vm, "VERTEX_ATTRIB_BLEND_INDEX", (SQInteger)cocos2d::GLProgram::VERTEX_ATTRIB_BLEND_INDEX, SQTrue);
    to_squirrel_variable_integer(vm, "VERTEX_ATTRIB_MAX", (SQInteger)cocos2d::GLProgram::VERTEX_ATTRIB_MAX, SQTrue);
    to_squirrel_variable_integer(vm, "VERTEX_ATTRIB_TEX_COORDS", (SQInteger)cocos2d::GLProgram::VERTEX_ATTRIB_TEX_COORDS, SQTrue);
    to_squirrel_variable_integer(vm, "UNIFORM_AMBIENT_COLOR", (SQInteger)cocos2d::GLProgram::UNIFORM_AMBIENT_COLOR, SQTrue);
    to_squirrel_variable_integer(vm, "UNIFORM_P_MATRIX", (SQInteger)cocos2d::GLProgram::UNIFORM_P_MATRIX, SQTrue);
    to_squirrel_variable_integer(vm, "UNIFORM_MV_MATRIX", (SQInteger)cocos2d::GLProgram::UNIFORM_MV_MATRIX, SQTrue);
    to_squirrel_variable_integer(vm, "UNIFORM_MVP_MATRIX", (SQInteger)cocos2d::GLProgram::UNIFORM_MVP_MATRIX, SQTrue);
    to_squirrel_variable_integer(vm, "UNIFORM_NORMAL_MATRIX", (SQInteger)cocos2d::GLProgram::UNIFORM_NORMAL_MATRIX, SQTrue);
    to_squirrel_variable_integer(vm, "UNIFORM_TIME", (SQInteger)cocos2d::GLProgram::UNIFORM_TIME, SQTrue);
    to_squirrel_variable_integer(vm, "UNIFORM_SIN_TIME", (SQInteger)cocos2d::GLProgram::UNIFORM_SIN_TIME, SQTrue);
    to_squirrel_variable_integer(vm, "UNIFORM_COS_TIME", (SQInteger)cocos2d::GLProgram::UNIFORM_COS_TIME, SQTrue);
    to_squirrel_variable_integer(vm, "UNIFORM_RANDOM01", (SQInteger)cocos2d::GLProgram::UNIFORM_RANDOM01, SQTrue);
    to_squirrel_variable_integer(vm, "UNIFORM_SAMPLER0", (SQInteger)cocos2d::GLProgram::UNIFORM_SAMPLER0, SQTrue);
    to_squirrel_variable_integer(vm, "UNIFORM_SAMPLER1", (SQInteger)cocos2d::GLProgram::UNIFORM_SAMPLER1, SQTrue);
    to_squirrel_variable_integer(vm, "UNIFORM_SAMPLER2", (SQInteger)cocos2d::GLProgram::UNIFORM_SAMPLER2, SQTrue);
    to_squirrel_variable_integer(vm, "UNIFORM_SAMPLER3", (SQInteger)cocos2d::GLProgram::UNIFORM_SAMPLER3, SQTrue);
    to_squirrel_variable_integer(vm, "UNIFORM_MAX", (SQInteger)cocos2d::GLProgram::UNIFORM_MAX, SQTrue);
    to_squirrel_variable_char(vm, "SHADER_NAME_POSITION_TEXTURE_COLOR", cocos2d::GLProgram::SHADER_NAME_POSITION_TEXTURE_COLOR, SQTrue);
    to_squirrel_variable_char(vm, "SHADER_NAME_POSITION_TEXTURE_COLOR_NO_MVP", cocos2d::GLProgram::SHADER_NAME_POSITION_TEXTURE_COLOR_NO_MVP, SQTrue);
    to_squirrel_variable_char(vm, "SHADER_NAME_POSITION_TEXTURE_ALPHA_TEST", cocos2d::GLProgram::SHADER_NAME_POSITION_TEXTURE_ALPHA_TEST, SQTrue);
    to_squirrel_variable_char(vm, "SHADER_NAME_POSITION_TEXTURE_ALPHA_TEST_NO_MV", cocos2d::GLProgram::SHADER_NAME_POSITION_TEXTURE_ALPHA_TEST_NO_MV, SQTrue);
    to_squirrel_variable_char(vm, "SHADER_NAME_POSITION_COLOR", cocos2d::GLProgram::SHADER_NAME_POSITION_COLOR, SQTrue);
    to_squirrel_variable_char(vm, "SHADER_NAME_POSITION_COLOR_NO_MVP", cocos2d::GLProgram::SHADER_NAME_POSITION_COLOR_NO_MVP, SQTrue);
    to_squirrel_variable_char(vm, "SHADER_NAME_POSITION_TEXTURE", cocos2d::GLProgram::SHADER_NAME_POSITION_TEXTURE, SQTrue);
    to_squirrel_variable_char(vm, "SHADER_NAME_POSITION_TEXTURE_U_COLOR", cocos2d::GLProgram::SHADER_NAME_POSITION_TEXTURE_U_COLOR, SQTrue);
    to_squirrel_variable_char(vm, "SHADER_NAME_POSITION_TEXTURE_A8_COLOR", cocos2d::GLProgram::SHADER_NAME_POSITION_TEXTURE_A8_COLOR, SQTrue);
    to_squirrel_variable_char(vm, "SHADER_NAME_POSITION_U_COLOR", cocos2d::GLProgram::SHADER_NAME_POSITION_U_COLOR, SQTrue);
    to_squirrel_variable_char(vm, "SHADER_NAME_POSITION_LENGTH_TEXTURE_COLOR", cocos2d::GLProgram::SHADER_NAME_POSITION_LENGTH_TEXTURE_COLOR, SQTrue);
    to_squirrel_variable_char(vm, "SHADER_NAME_LABEL_NORMAL", cocos2d::GLProgram::SHADER_NAME_LABEL_NORMAL, SQTrue);
    to_squirrel_variable_char(vm, "SHADER_NAME_LABEL_OUTLINE", cocos2d::GLProgram::SHADER_NAME_LABEL_OUTLINE, SQTrue);
    to_squirrel_variable_char(vm, "SHADER_NAME_LABEL_DISTANCEFIELD_NORMAL", cocos2d::GLProgram::SHADER_NAME_LABEL_DISTANCEFIELD_NORMAL, SQTrue);
    to_squirrel_variable_char(vm, "SHADER_NAME_LABEL_DISTANCEFIELD_GLOW", cocos2d::GLProgram::SHADER_NAME_LABEL_DISTANCEFIELD_GLOW, SQTrue);
    to_squirrel_variable_char(vm, "SHADER_3D_POSITION", cocos2d::GLProgram::SHADER_3D_POSITION, SQTrue);
    to_squirrel_variable_char(vm, "SHADER_3D_POSITION_TEXTURE", cocos2d::GLProgram::SHADER_3D_POSITION_TEXTURE, SQTrue);
    to_squirrel_variable_char(vm, "SHADER_3D_SKINPOSITION_TEXTURE", cocos2d::GLProgram::SHADER_3D_SKINPOSITION_TEXTURE, SQTrue);
    to_squirrel_variable_char(vm, "SHADER_3D_POSITION_NORMAL", cocos2d::GLProgram::SHADER_3D_POSITION_NORMAL, SQTrue);
    to_squirrel_variable_char(vm, "SHADER_3D_POSITION_NORMAL_TEXTURE", cocos2d::GLProgram::SHADER_3D_POSITION_NORMAL_TEXTURE, SQTrue);
    to_squirrel_variable_char(vm, "SHADER_3D_SKINPOSITION_NORMAL_TEXTURE", cocos2d::GLProgram::SHADER_3D_SKINPOSITION_NORMAL_TEXTURE, SQTrue);
    to_squirrel_variable_char(vm, "UNIFORM_NAME_AMBIENT_COLOR", cocos2d::GLProgram::UNIFORM_NAME_AMBIENT_COLOR, SQTrue);
    to_squirrel_variable_char(vm, "UNIFORM_NAME_P_MATRIX", cocos2d::GLProgram::UNIFORM_NAME_P_MATRIX, SQTrue);
    to_squirrel_variable_char(vm, "UNIFORM_NAME_MV_MATRIX", cocos2d::GLProgram::UNIFORM_NAME_MV_MATRIX, SQTrue);
    to_squirrel_variable_char(vm, "UNIFORM_NAME_MVP_MATRIX", cocos2d::GLProgram::UNIFORM_NAME_MVP_MATRIX, SQTrue);
    to_squirrel_variable_char(vm, "UNIFORM_NAME_NORMAL_MATRIX", cocos2d::GLProgram::UNIFORM_NAME_NORMAL_MATRIX, SQTrue);
    to_squirrel_variable_char(vm, "UNIFORM_NAME_TIME", cocos2d::GLProgram::UNIFORM_NAME_TIME, SQTrue);
    to_squirrel_variable_char(vm, "UNIFORM_NAME_SIN_TIME", cocos2d::GLProgram::UNIFORM_NAME_SIN_TIME, SQTrue);
    to_squirrel_variable_char(vm, "UNIFORM_NAME_COS_TIME", cocos2d::GLProgram::UNIFORM_NAME_COS_TIME, SQTrue);
    to_squirrel_variable_char(vm, "UNIFORM_NAME_RANDOM01", cocos2d::GLProgram::UNIFORM_NAME_RANDOM01, SQTrue);
    to_squirrel_variable_char(vm, "UNIFORM_NAME_SAMPLER0", cocos2d::GLProgram::UNIFORM_NAME_SAMPLER0, SQTrue);
    to_squirrel_variable_char(vm, "UNIFORM_NAME_SAMPLER1", cocos2d::GLProgram::UNIFORM_NAME_SAMPLER1, SQTrue);
    to_squirrel_variable_char(vm, "UNIFORM_NAME_SAMPLER2", cocos2d::GLProgram::UNIFORM_NAME_SAMPLER2, SQTrue);
    to_squirrel_variable_char(vm, "UNIFORM_NAME_SAMPLER3", cocos2d::GLProgram::UNIFORM_NAME_SAMPLER3, SQTrue);
    to_squirrel_variable_char(vm, "UNIFORM_NAME_ALPHA_TEST_VALUE", cocos2d::GLProgram::UNIFORM_NAME_ALPHA_TEST_VALUE, SQTrue);
    to_squirrel_variable_char(vm, "ATTRIBUTE_NAME_COLOR", cocos2d::GLProgram::ATTRIBUTE_NAME_COLOR, SQTrue);
    to_squirrel_variable_char(vm, "ATTRIBUTE_NAME_POSITION", cocos2d::GLProgram::ATTRIBUTE_NAME_POSITION, SQTrue);
    to_squirrel_variable_char(vm, "ATTRIBUTE_NAME_TEX_COORD", cocos2d::GLProgram::ATTRIBUTE_NAME_TEX_COORD, SQTrue);
    to_squirrel_variable_char(vm, "ATTRIBUTE_NAME_TEX_COORD1", cocos2d::GLProgram::ATTRIBUTE_NAME_TEX_COORD1, SQTrue);
    to_squirrel_variable_char(vm, "ATTRIBUTE_NAME_TEX_COORD2", cocos2d::GLProgram::ATTRIBUTE_NAME_TEX_COORD2, SQTrue);
    to_squirrel_variable_char(vm, "ATTRIBUTE_NAME_TEX_COORD3", cocos2d::GLProgram::ATTRIBUTE_NAME_TEX_COORD3, SQTrue);
    to_squirrel_variable_char(vm, "ATTRIBUTE_NAME_NORMAL", cocos2d::GLProgram::ATTRIBUTE_NAME_NORMAL, SQTrue);
    to_squirrel_variable_char(vm, "ATTRIBUTE_NAME_BLEND_WEIGHT", cocos2d::GLProgram::ATTRIBUTE_NAME_BLEND_WEIGHT, SQTrue);
    to_squirrel_variable_char(vm, "ATTRIBUTE_NAME_BLEND_INDEX", cocos2d::GLProgram::ATTRIBUTE_NAME_BLEND_INDEX, SQTrue);


    squirrel_cocos2dx_GLProgram_push_c_class(vm);

    std::string typeName = typeid(cocos2d::GLProgram).name();
    g_sqType[typeName] = "cc.GLProgram";

    return 1;
}
SQInteger squirrel_cocos2dx_ParticleGalaxy_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        cocos2d::ParticleGalaxy* ret = cocos2d::ParticleGalaxy::create();
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.ParticleGalaxy");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleGalaxy_createWithTotalParticles_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if(!ok)
            return 0;
        cocos2d::ParticleGalaxy* ret = cocos2d::ParticleGalaxy::createWithTotalParticles(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.ParticleGalaxy");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "createWithTotalParticles", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_ParticleGalaxy_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.ParticleGalaxy", -1);
    return 1;
}

void squirrel_cocos2dx_ParticleGalaxy_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::ParticleGalaxy", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ParticleSystemQuad", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ParticleSystem", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TextureProtocol", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::BlendProtocol", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_ParticleGalaxy(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("ParticleGalaxy"), -1);


    sq_pushstring(vm, _SC("ParticleSystemQuad"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_ParticleGalaxy_create_static, SQTrue);
    to_squirrel_function(vm, "createWithTotalParticles", squirrel_cocos2dx_ParticleGalaxy_createWithTotalParticles_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_ParticleGalaxy_typeof_meta);



    squirrel_cocos2dx_ParticleGalaxy_push_c_class(vm);

    std::string typeName = typeid(cocos2d::ParticleGalaxy).name();
    g_sqType[typeName] = "cc.ParticleGalaxy";

    return 1;
}
SQInteger squirrel_cocos2dx_Twirl_setAmplitudeRate(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Twirl* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Twirl_setAmplitudeRate'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setAmplitudeRate(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setAmplitudeRate", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Twirl_getAmplitudeRate(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Twirl* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Twirl_getAmplitudeRate'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getAmplitudeRate();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getAmplitudeRate", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Twirl_setAmplitude(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Twirl* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Twirl_setAmplitude'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setAmplitude(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setAmplitude", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Twirl_getAmplitude(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Twirl* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Twirl_getAmplitude'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getAmplitude();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getAmplitude", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Twirl_setPosition(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Twirl* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Twirl_setPosition'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec2 arg0;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->setPosition(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setPosition", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Twirl_getPosition(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Twirl* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Twirl_getPosition'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::Vec2& ret = cobj->getPosition();
        vec2_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getPosition", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Twirl_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 5)
    {
        float arg0;
        cocos2d::Size arg1;
        cocos2d::Vec2 arg2;
        unsigned int arg3;
        float arg4;
        ok &= sqval_to_float(vm, 2, &arg0);
        cocos2d::Size* ptr3 = nullptr; ok &= sqval_to_size(vm, 3, ptr3); arg1 = *ptr3;
        cocos2d::Vec2* ptr4 = nullptr; ok &= sqval_to_vec2(vm, 4, ptr4); arg2 = *ptr4;
        ok &= sqval_to_uint32(vm, 5, &arg3);
        ok &= sqval_to_float(vm, 6, &arg4);
        if(!ok)
            return 0;
        cocos2d::Twirl* ret = cocos2d::Twirl::create(arg0, arg1, arg2, arg3, arg4);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.Twirl");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 5);
    return 0;
}

SQInteger squirrel_cocos2dx_Twirl_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.Twirl", -1);
    return 1;
}

void squirrel_cocos2dx_Twirl_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::Twirl", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Grid3DAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::GridAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_Twirl(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("Twirl"), -1);


    sq_pushstring(vm, _SC("Grid3DAction"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "setAmplitudeRate", squirrel_cocos2dx_Twirl_setAmplitudeRate);
    to_squirrel_function(vm, "getAmplitudeRate", squirrel_cocos2dx_Twirl_getAmplitudeRate);
    to_squirrel_function(vm, "setAmplitude", squirrel_cocos2dx_Twirl_setAmplitude);
    to_squirrel_function(vm, "getAmplitude", squirrel_cocos2dx_Twirl_getAmplitude);
    to_squirrel_function(vm, "setPosition", squirrel_cocos2dx_Twirl_setPosition);
    to_squirrel_function(vm, "getPosition", squirrel_cocos2dx_Twirl_getPosition);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_Twirl_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_Twirl_typeof_meta);



    squirrel_cocos2dx_Twirl_push_c_class(vm);

    std::string typeName = typeid(cocos2d::Twirl).name();
    g_sqType[typeName] = "cc.Twirl";

    return 1;
}
SQInteger squirrel_cocos2dx_MenuItemLabel_getDisabledColor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::MenuItemLabel* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_MenuItemLabel_getDisabledColor'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::Color3B& ret = cobj->getDisabledColor();
        color3b_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getDisabledColor", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_MenuItemLabel_setString(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::MenuItemLabel* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_MenuItemLabel_setString'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setString(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setString", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_MenuItemLabel_setLabel(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::MenuItemLabel* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_MenuItemLabel_setLabel'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Node* arg0;

        ok &= sqval_to_object<cocos2d::Node>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setLabel(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setLabel", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_MenuItemLabel_setDisabledColor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::MenuItemLabel* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_MenuItemLabel_setDisabledColor'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Color3B arg0;

        cocos2d::Color3B *ptr2 = nullptr; ok &= sqval_to_color3b(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->setDisabledColor(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setDisabledColor", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_MenuItemLabel_getLabel(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::MenuItemLabel* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_MenuItemLabel_getLabel'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Node* ret = cobj->getLabel();
        object_to_sqval<cocos2d::Node>(vm, "cc.Node", (cocos2d::Node*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getLabel", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_MenuItemLabel_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 1)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Node")) {
                break;
            }

            cocos2d::Node* arg0;
            ok &= sqval_to_object<cocos2d::Node>(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::MenuItemLabel* ret = cocos2d::MenuItemLabel::create(arg0);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.MenuItemLabel");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 2)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Node")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_CLOSURE) {
                break;
            }
            HSQOBJECT callback3;
            sq_getstackobj(vm, 3, &callback3);

            cocos2d::Node* arg0;
            ok &= sqval_to_object<cocos2d::Node>(vm, 2, &arg0);
            if (!ok) { break; }
            std::function<void (cocos2d::Ref *)> arg1;
            do {
			    // Lambda binding for squirrel
			    arg1 = [vm, callback3](cocos2d::Ref* larg0) -> void {
			        if (sq_getrefcount(vm, (HSQOBJECT *)&callback3) > 0) {
			            sq_pushobject(vm, callback3);
			            sq_push(vm, 1);
			            object_to_sqval<cocos2d::Ref>(vm, "cc.Ref", (cocos2d::Ref*)larg0);
			            sq_call(vm, 2, SQFalse, SQTrue);
			            sq_poptop(vm);
			        }
			    };
			} while(0);
            if (!ok) { break; }
            cocos2d::MenuItemLabel* ret = cocos2d::MenuItemLabel::create(arg0, arg1);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.MenuItemLabel");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            _SquirrelObject *sqobj = (_SquirrelObject *)ret->_scriptObject;
            sqobj->addClosure("callback3", callback3);
            return 1;
        }
    } while (0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d", "create", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_MenuItemLabel_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.MenuItemLabel", -1);
    return 1;
}

void squirrel_cocos2dx_MenuItemLabel_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::MenuItemLabel", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::MenuItem", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_MenuItemLabel(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("MenuItemLabel"), -1);


    sq_pushstring(vm, _SC("MenuItem"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "getDisabledColor", squirrel_cocos2dx_MenuItemLabel_getDisabledColor);
    to_squirrel_function(vm, "setString", squirrel_cocos2dx_MenuItemLabel_setString);
    to_squirrel_function(vm, "setLabel", squirrel_cocos2dx_MenuItemLabel_setLabel);
    to_squirrel_function(vm, "setDisabledColor", squirrel_cocos2dx_MenuItemLabel_setDisabledColor);
    to_squirrel_function(vm, "getLabel", squirrel_cocos2dx_MenuItemLabel_getLabel);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_MenuItemLabel_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_MenuItemLabel_typeof_meta);



    squirrel_cocos2dx_MenuItemLabel_push_c_class(vm);

    std::string typeName = typeid(cocos2d::MenuItemLabel).name();
    g_sqType[typeName] = "cc.MenuItemLabel";

    return 1;
}
SQInteger squirrel_cocos2dx_EaseQuinticActionIn_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        cocos2d::ActionInterval* arg0;
        ok &= sqval_to_object<cocos2d::ActionInterval>(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::EaseQuinticActionIn* ret = cocos2d::EaseQuinticActionIn::create(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.EaseQuinticActionIn");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_EaseQuinticActionIn_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.EaseQuinticActionIn", -1);
    return 1;
}

void squirrel_cocos2dx_EaseQuinticActionIn_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::EaseQuinticActionIn", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionEase", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_EaseQuinticActionIn(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("EaseQuinticActionIn"), -1);


    sq_pushstring(vm, _SC("ActionEase"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_EaseQuinticActionIn_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_EaseQuinticActionIn_typeof_meta);



    squirrel_cocos2dx_EaseQuinticActionIn_push_c_class(vm);

    std::string typeName = typeid(cocos2d::EaseQuinticActionIn).name();
    g_sqType[typeName] = "cc.EaseQuinticActionIn";

    return 1;
}
SQInteger squirrel_cocos2dx_LayerColor_changeWidthAndHeight(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::LayerColor* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_LayerColor_changeWidthAndHeight'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        float arg0;
        float arg1;

        ok &= sqval_to_float(vm, 2, &arg0);

        ok &= sqval_to_float(vm, 3, &arg1);
        if (!ok)
            return 0;
        cobj->changeWidthAndHeight(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "changeWidthAndHeight", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_LayerColor_changeHeight(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::LayerColor* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_LayerColor_changeHeight'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->changeHeight(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "changeHeight", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_LayerColor_changeWidth(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::LayerColor* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_LayerColor_changeWidth'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->changeWidth(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "changeWidth", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_LayerColor_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 3)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Color4B")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }

            cocos2d::Color4B arg0;
            cocos2d::Color4B *ptr2 = nullptr; ok &=sqval_to_color4b(vm, 2, ptr2); arg0 = *ptr2;
            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);
            if (!ok) { break; }
            float arg2;
            ok &= sqval_to_float(vm, 4, &arg2);
            if (!ok) { break; }
            cocos2d::LayerColor* ret = cocos2d::LayerColor::create(arg0, arg1, arg2);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.LayerColor");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 0)
        {


            cocos2d::LayerColor* ret = cocos2d::LayerColor::create();
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.LayerColor");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 1)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Color4B")) {
                break;
            }

            cocos2d::Color4B arg0;
            cocos2d::Color4B *ptr2 = nullptr; ok &=sqval_to_color4b(vm, 2, ptr2); arg0 = *ptr2;
            if (!ok) { break; }
            cocos2d::LayerColor* ret = cocos2d::LayerColor::create(arg0);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.LayerColor");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d", "create", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_LayerColor_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.LayerColor", -1);
    return 1;
}

void squirrel_cocos2dx_LayerColor_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::LayerColor", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Layer", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::BlendProtocol", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_LayerColor(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("LayerColor"), -1);


    sq_pushstring(vm, _SC("Layer"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "changeWidthAndHeight", squirrel_cocos2dx_LayerColor_changeWidthAndHeight);
    to_squirrel_function(vm, "changeHeight", squirrel_cocos2dx_LayerColor_changeHeight);
    to_squirrel_function(vm, "changeWidth", squirrel_cocos2dx_LayerColor_changeWidth);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_LayerColor_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_LayerColor_typeof_meta);



    squirrel_cocos2dx_LayerColor_push_c_class(vm);

    std::string typeName = typeid(cocos2d::LayerColor).name();
    g_sqType[typeName] = "cc.LayerColor";

    return 1;
}
SQInteger squirrel_cocos2dx_FadeOutBLTiles_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        float arg0;
        cocos2d::Size arg1;
        ok &= sqval_to_float(vm, 2, &arg0);
        cocos2d::Size* ptr3 = nullptr; ok &= sqval_to_size(vm, 3, ptr3); arg1 = *ptr3;
        if(!ok)
            return 0;
        cocos2d::FadeOutBLTiles* ret = cocos2d::FadeOutBLTiles::create(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.FadeOutBLTiles");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_FadeOutBLTiles_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.FadeOutBLTiles", -1);
    return 1;
}

void squirrel_cocos2dx_FadeOutBLTiles_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::FadeOutBLTiles", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::FadeOutTRTiles", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TiledGrid3DAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::GridAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_FadeOutBLTiles(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("FadeOutBLTiles"), -1);


    sq_pushstring(vm, _SC("FadeOutTRTiles"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_FadeOutBLTiles_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_FadeOutBLTiles_typeof_meta);



    squirrel_cocos2dx_FadeOutBLTiles_push_c_class(vm);

    std::string typeName = typeid(cocos2d::FadeOutBLTiles).name();
    g_sqType[typeName] = "cc.FadeOutBLTiles";

    return 1;
}
SQInteger squirrel_cocos2dx_TransitionProgress_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        float arg0;
        cocos2d::Scene* arg1;
        ok &= sqval_to_float(vm, 2, &arg0);
        ok &= sqval_to_object<cocos2d::Scene>(vm, 3, &arg1);
        if(!ok)
            return 0;
        cocos2d::TransitionProgress* ret = cocos2d::TransitionProgress::create(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.TransitionProgress");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_TransitionProgress_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.TransitionProgress", -1);
    return 1;
}

void squirrel_cocos2dx_TransitionProgress_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::TransitionProgress", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::TransitionScene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Scene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_TransitionProgress(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("TransitionProgress"), -1);


    sq_pushstring(vm, _SC("TransitionScene"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_TransitionProgress_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_TransitionProgress_typeof_meta);



    squirrel_cocos2dx_TransitionProgress_push_c_class(vm);

    std::string typeName = typeid(cocos2d::TransitionProgress).name();
    g_sqType[typeName] = "cc.TransitionProgress";

    return 1;
}
SQInteger squirrel_cocos2dx_EaseRateAction_setRate(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::EaseRateAction* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_EaseRateAction_setRate'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setRate(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setRate", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_EaseRateAction_getRate(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::EaseRateAction* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_EaseRateAction_getRate'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getRate();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getRate", (int)argc, 0);
    return 0;
}

SQInteger squirrel_cocos2dx_EaseRateAction_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.EaseRateAction", -1);
    return 1;
}

void squirrel_cocos2dx_EaseRateAction_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::EaseRateAction", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionEase", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_EaseRateAction(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("EaseRateAction"), -1);


    sq_pushstring(vm, _SC("ActionEase"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "setRate", squirrel_cocos2dx_EaseRateAction_setRate);
    to_squirrel_function(vm, "getRate", squirrel_cocos2dx_EaseRateAction_getRate);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_EaseRateAction_typeof_meta);



    squirrel_cocos2dx_EaseRateAction_push_c_class(vm);

    std::string typeName = typeid(cocos2d::EaseRateAction).name();
    g_sqType[typeName] = "cc.EaseRateAction";

    return 1;
}
SQInteger squirrel_cocos2dx_LayerGradient_getStartColor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::LayerGradient* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_LayerGradient_getStartColor'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::Color3B& ret = cobj->getStartColor();
        color3b_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getStartColor", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_LayerGradient_isCompressedInterpolation(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::LayerGradient* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_LayerGradient_isCompressedInterpolation'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isCompressedInterpolation();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isCompressedInterpolation", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_LayerGradient_getStartOpacity(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::LayerGradient* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_LayerGradient_getStartOpacity'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        uint16_t ret = cobj->getStartOpacity();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getStartOpacity", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_LayerGradient_setVector(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::LayerGradient* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_LayerGradient_setVector'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec2 arg0;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->setVector(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setVector", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_LayerGradient_setStartOpacity(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::LayerGradient* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_LayerGradient_setStartOpacity'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        uint16_t arg0;

        ok &= sqval_to_uint16(vm, 2, (uint16_t *)&arg0);
        if (!ok)
            return 0;
        cobj->setStartOpacity(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setStartOpacity", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_LayerGradient_setCompressedInterpolation(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::LayerGradient* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_LayerGradient_setCompressedInterpolation'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setCompressedInterpolation(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setCompressedInterpolation", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_LayerGradient_setEndOpacity(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::LayerGradient* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_LayerGradient_setEndOpacity'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        uint16_t arg0;

        ok &= sqval_to_uint16(vm, 2, (uint16_t *)&arg0);
        if (!ok)
            return 0;
        cobj->setEndOpacity(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setEndOpacity", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_LayerGradient_getVector(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::LayerGradient* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_LayerGradient_getVector'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::Vec2& ret = cobj->getVector();
        vec2_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getVector", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_LayerGradient_setEndColor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::LayerGradient* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_LayerGradient_setEndColor'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Color3B arg0;

        cocos2d::Color3B *ptr2 = nullptr; ok &= sqval_to_color3b(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->setEndColor(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setEndColor", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_LayerGradient_getEndColor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::LayerGradient* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_LayerGradient_getEndColor'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::Color3B& ret = cobj->getEndColor();
        color3b_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getEndColor", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_LayerGradient_getEndOpacity(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::LayerGradient* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_LayerGradient_getEndOpacity'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        uint16_t ret = cobj->getEndOpacity();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getEndOpacity", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_LayerGradient_setStartColor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::LayerGradient* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_LayerGradient_setStartColor'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Color3B arg0;

        cocos2d::Color3B *ptr2 = nullptr; ok &= sqval_to_color3b(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->setStartColor(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setStartColor", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_LayerGradient_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 2)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Color4B")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Color4B")) {
                break;
            }

            cocos2d::Color4B arg0;
            cocos2d::Color4B *ptr2 = nullptr; ok &=sqval_to_color4b(vm, 2, ptr2); arg0 = *ptr2;
            if (!ok) { break; }
            cocos2d::Color4B arg1;
            cocos2d::Color4B *ptr3 = nullptr; ok &=sqval_to_color4b(vm, 3, ptr3); arg1 = *ptr3;
            if (!ok) { break; }
            cocos2d::LayerGradient* ret = cocos2d::LayerGradient::create(arg0, arg1);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.LayerGradient");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 0)
        {


            cocos2d::LayerGradient* ret = cocos2d::LayerGradient::create();
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.LayerGradient");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 3)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Color4B")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Color4B")) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INSTANCE || ! instanceof_cclass(vm, 4, "cocos2d::Vec2")) {
                break;
            }

            cocos2d::Color4B arg0;
            cocos2d::Color4B *ptr2 = nullptr; ok &=sqval_to_color4b(vm, 2, ptr2); arg0 = *ptr2;
            if (!ok) { break; }
            cocos2d::Color4B arg1;
            cocos2d::Color4B *ptr3 = nullptr; ok &=sqval_to_color4b(vm, 3, ptr3); arg1 = *ptr3;
            if (!ok) { break; }
            cocos2d::Vec2 arg2;
            cocos2d::Vec2* ptr4 = nullptr; ok &= sqval_to_vec2(vm, 4, ptr4); arg2 = *ptr4;
            if (!ok) { break; }
            cocos2d::LayerGradient* ret = cocos2d::LayerGradient::create(arg0, arg1, arg2);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.LayerGradient");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d", "create", (int)argc, 3);
    return 0;
}

SQInteger squirrel_cocos2dx_LayerGradient_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.LayerGradient", -1);
    return 1;
}

void squirrel_cocos2dx_LayerGradient_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::LayerGradient", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::LayerColor", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Layer", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::BlendProtocol", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_LayerGradient(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("LayerGradient"), -1);


    sq_pushstring(vm, _SC("LayerColor"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "getStartColor", squirrel_cocos2dx_LayerGradient_getStartColor);
    to_squirrel_function(vm, "isCompressedInterpolation", squirrel_cocos2dx_LayerGradient_isCompressedInterpolation);
    to_squirrel_function(vm, "getStartOpacity", squirrel_cocos2dx_LayerGradient_getStartOpacity);
    to_squirrel_function(vm, "setVector", squirrel_cocos2dx_LayerGradient_setVector);
    to_squirrel_function(vm, "setStartOpacity", squirrel_cocos2dx_LayerGradient_setStartOpacity);
    to_squirrel_function(vm, "setCompressedInterpolation", squirrel_cocos2dx_LayerGradient_setCompressedInterpolation);
    to_squirrel_function(vm, "setEndOpacity", squirrel_cocos2dx_LayerGradient_setEndOpacity);
    to_squirrel_function(vm, "getVector", squirrel_cocos2dx_LayerGradient_getVector);
    to_squirrel_function(vm, "setEndColor", squirrel_cocos2dx_LayerGradient_setEndColor);
    to_squirrel_function(vm, "getEndColor", squirrel_cocos2dx_LayerGradient_getEndColor);
    to_squirrel_function(vm, "getEndOpacity", squirrel_cocos2dx_LayerGradient_getEndOpacity);
    to_squirrel_function(vm, "setStartColor", squirrel_cocos2dx_LayerGradient_setStartColor);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_LayerGradient_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_LayerGradient_typeof_meta);



    squirrel_cocos2dx_LayerGradient_push_c_class(vm);

    std::string typeName = typeid(cocos2d::LayerGradient).name();
    g_sqType[typeName] = "cc.LayerGradient";

    return 1;
}
SQInteger squirrel_cocos2dx_EventListenerTouchAllAtOnce_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        cocos2d::EventListenerTouchAllAtOnce* ret = cocos2d::EventListenerTouchAllAtOnce::create();
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.EventListenerTouchAllAtOnce");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 0);
    return 0;
}

SQInteger squirrel_cocos2dx_EventListenerTouchAllAtOnce_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.EventListenerTouchAllAtOnce", -1);
    return 1;
}

SQInteger squirrel_cocos2dx_EventListenerTouchAllAtOnce_get_meta(HSQUIRRELVM vm)
{
    cocos2d::EventListenerTouchAllAtOnce *cobj = nullptr;
    if (SQ_FAILED(sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0))) {
        CCLOG("cocos2d::EventListenerTouchAllAtOnce sq_getinstanceup failed.");
        sq_pushnull(vm);
        return 1;
    }

    const char *varName = nullptr;
    sq_getstring(vm, 2, &varName);
    
    do {
        if (strcmp(varName, "onTouchesBegan") == 0) {
            ccfunction_to_sqval(vm, cobj, "onTouchesBegan");
            break;
        }
        if (strcmp(varName, "onTouchesMoved") == 0) {
            ccfunction_to_sqval(vm, cobj, "onTouchesMoved");
            break;
        }
        if (strcmp(varName, "onTouchesEnded") == 0) {
            ccfunction_to_sqval(vm, cobj, "onTouchesEnded");
            break;
        }
        if (strcmp(varName, "onTouchesCancelled") == 0) {
            ccfunction_to_sqval(vm, cobj, "onTouchesCancelled");
            break;
        }

        return 0;
        
    } while(0);

    return 1;
}

SQInteger squirrel_cocos2dx_EventListenerTouchAllAtOnce_set_meta(HSQUIRRELVM vm)
{
    cocos2d::EventListenerTouchAllAtOnce *cobj = nullptr;
    if (SQ_FAILED(sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0))) {
        CCLOG("cocos2d::EventListenerTouchAllAtOnce sq_getinstanceup failed.");
        return 0;
    }

    bool ok  = true;
    const char *varName = nullptr;
    sq_getstring(vm, 2, &varName);
    
    do {
        if (strcmp(varName, "onTouchesBegan") == 0) {
            HSQOBJECT callback3;
            sq_getstackobj(vm, 3, &callback3);
            do {
			    // Lambda binding for squirrel
			    cobj->onTouchesBegan = [vm, callback3](const std::vector<cocos2d::Touch*> & larg0, cocos2d::Event* larg1) -> void {
			        if (sq_getrefcount(vm, (HSQOBJECT *)&callback3) > 0) {
			            sq_pushobject(vm, callback3);
			            sq_push(vm, 1);
			            ccvector_object_to_sqval<cocos2d::Touch>(vm, "td::vector<cc.Touch", larg0);
			            object_to_sqval<cocos2d::Event>(vm, "cc.Event", (cocos2d::Event*)larg1);
			            sq_call(vm, 3, SQFalse, SQTrue);
			            sq_poptop(vm);
			        }
			    };
			} while(0);
            if (! ok) {
                return 0;
            }
            _SquirrelObject *sqobj = (_SquirrelObject *)cobj->_scriptObject;
            sqobj->addClosure("onTouchesBegan", callback3);
            break;
        }
        if (strcmp(varName, "onTouchesMoved") == 0) {
            HSQOBJECT callback3;
            sq_getstackobj(vm, 3, &callback3);
            do {
			    // Lambda binding for squirrel
			    cobj->onTouchesMoved = [vm, callback3](const std::vector<cocos2d::Touch*> & larg0, cocos2d::Event* larg1) -> void {
			        if (sq_getrefcount(vm, (HSQOBJECT *)&callback3) > 0) {
			            sq_pushobject(vm, callback3);
			            sq_push(vm, 1);
			            ccvector_object_to_sqval<cocos2d::Touch>(vm, "td::vector<cc.Touch", larg0);
			            object_to_sqval<cocos2d::Event>(vm, "cc.Event", (cocos2d::Event*)larg1);
			            sq_call(vm, 3, SQFalse, SQTrue);
			            sq_poptop(vm);
			        }
			    };
			} while(0);
            if (! ok) {
                return 0;
            }
            _SquirrelObject *sqobj = (_SquirrelObject *)cobj->_scriptObject;
            sqobj->addClosure("onTouchesMoved", callback3);
            break;
        }
        if (strcmp(varName, "onTouchesEnded") == 0) {
            HSQOBJECT callback3;
            sq_getstackobj(vm, 3, &callback3);
            do {
			    // Lambda binding for squirrel
			    cobj->onTouchesEnded = [vm, callback3](const std::vector<cocos2d::Touch*> & larg0, cocos2d::Event* larg1) -> void {
			        if (sq_getrefcount(vm, (HSQOBJECT *)&callback3) > 0) {
			            sq_pushobject(vm, callback3);
			            sq_push(vm, 1);
			            ccvector_object_to_sqval<cocos2d::Touch>(vm, "td::vector<cc.Touch", larg0);
			            object_to_sqval<cocos2d::Event>(vm, "cc.Event", (cocos2d::Event*)larg1);
			            sq_call(vm, 3, SQFalse, SQTrue);
			            sq_poptop(vm);
			        }
			    };
			} while(0);
            if (! ok) {
                return 0;
            }
            _SquirrelObject *sqobj = (_SquirrelObject *)cobj->_scriptObject;
            sqobj->addClosure("onTouchesEnded", callback3);
            break;
        }
        if (strcmp(varName, "onTouchesCancelled") == 0) {
            HSQOBJECT callback3;
            sq_getstackobj(vm, 3, &callback3);
            do {
			    // Lambda binding for squirrel
			    cobj->onTouchesCancelled = [vm, callback3](const std::vector<cocos2d::Touch*> & larg0, cocos2d::Event* larg1) -> void {
			        if (sq_getrefcount(vm, (HSQOBJECT *)&callback3) > 0) {
			            sq_pushobject(vm, callback3);
			            sq_push(vm, 1);
			            ccvector_object_to_sqval<cocos2d::Touch>(vm, "td::vector<cc.Touch", larg0);
			            object_to_sqval<cocos2d::Event>(vm, "cc.Event", (cocos2d::Event*)larg1);
			            sq_call(vm, 3, SQFalse, SQTrue);
			            sq_poptop(vm);
			        }
			    };
			} while(0);
            if (! ok) {
                return 0;
            }
            _SquirrelObject *sqobj = (_SquirrelObject *)cobj->_scriptObject;
            sqobj->addClosure("onTouchesCancelled", callback3);
            break;
        }

        CCLOG("specified variable is not found in cocos2d::EventListenerTouchAllAtOnce");
    } while(0);

    return 0;
}

void squirrel_cocos2dx_EventListenerTouchAllAtOnce_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::EventListenerTouchAllAtOnce", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::EventListener", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_EventListenerTouchAllAtOnce(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("EventListenerTouchAllAtOnce"), -1);


    sq_pushstring(vm, _SC("EventListener"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_EventListenerTouchAllAtOnce_create_static, SQTrue);

    to_squirrel_function(vm, "_get", squirrel_cocos2dx_EventListenerTouchAllAtOnce_get_meta);
    to_squirrel_function(vm, "_set", squirrel_cocos2dx_EventListenerTouchAllAtOnce_set_meta);
    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_EventListenerTouchAllAtOnce_typeof_meta);

    to_squirrel_variable_string(vm, "LISTENER_ID", cocos2d::EventListenerTouchAllAtOnce::LISTENER_ID, SQTrue);


    squirrel_cocos2dx_EventListenerTouchAllAtOnce_push_c_class(vm);

    std::string typeName = typeid(cocos2d::EventListenerTouchAllAtOnce).name();
    g_sqType[typeName] = "cc.EventListenerTouchAllAtOnce";

    return 1;
}
SQInteger squirrel_cocos2dx_Node_addChild(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_addChild'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Node")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }

            cocos2d::Node* arg0;
            ok &= sqval_to_object<cocos2d::Node>(vm, 2, &arg0);

            if (!ok) { break; }
            int arg1;
            ok &= sqval_to_int32(vm, 3, (int *)&arg1);

            if (!ok) { break; }
            cobj->addChild(arg0, arg1);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Node")) {
                break;
            }

            cocos2d::Node* arg0;
            ok &= sqval_to_object<cocos2d::Node>(vm, 2, &arg0);

            if (!ok) { break; }
            cobj->addChild(arg0);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 3) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Node")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }

            cocos2d::Node* arg0;
            ok &= sqval_to_object<cocos2d::Node>(vm, 2, &arg0);

            if (!ok) { break; }
            int arg1;
            ok &= sqval_to_int32(vm, 3, (int *)&arg1);

            if (!ok) { break; }
            int arg2;
            ok &= sqval_to_int32(vm, 4, (int *)&arg2);

            if (!ok) { break; }
            cobj->addChild(arg0, arg1, arg2);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 3) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Node")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_STRING) {
                break;
            }

            cocos2d::Node* arg0;
            ok &= sqval_to_object<cocos2d::Node>(vm, 2, &arg0);

            if (!ok) { break; }
            int arg1;
            ok &= sqval_to_int32(vm, 3, (int *)&arg1);

            if (!ok) { break; }
            std::string arg2;
            ok &= sqval_to_std_string(vm, 4, &arg2);

            if (!ok) { break; }
            cobj->addChild(arg0, arg1, arg2);
            return 0;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "addChild", (int)argc, 3);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_removeComponent(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_removeComponent'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Component")) {
                break;
            }

            cocos2d::Component* arg0;
            ok &= sqval_to_object<cocos2d::Component>(vm, 2, &arg0);

            if (!ok) { break; }
            bool ret = cobj->removeComponent(arg0);
            sq_pushbool(vm, (SQBool)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);

            if (!ok) { break; }
            bool ret = cobj->removeComponent(arg0);
            sq_pushbool(vm, (SQBool)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "removeComponent", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_setPhysicsBody(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_setPhysicsBody'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::PhysicsBody* arg0;

        ok &= sqval_to_object<cocos2d::PhysicsBody>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setPhysicsBody(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setPhysicsBody", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_getDescription(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_getDescription'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        std::string ret = cobj->getDescription();
        sq_pushstring(vm, (const SQChar *)ret.c_str(), -1);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getDescription", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_setRotationSkewY(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_setRotationSkewY'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setRotationSkewY(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setRotationSkewY", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_setOpacityModifyRGB(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_setOpacityModifyRGB'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setOpacityModifyRGB(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setOpacityModifyRGB", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_setCascadeOpacityEnabled(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_setCascadeOpacityEnabled'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setCascadeOpacityEnabled(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setCascadeOpacityEnabled", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_getChildren(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_getChildren'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 0) {

            const cocos2d::Vector<cocos2d::Node *>& ret = cobj->getChildren();
            ccvector_to_sqval(vm, ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 0) {

            cocos2d::Vector<cocos2d::Node *>& ret = cobj->getChildren();
            ccvector_to_sqval(vm, ret);
            return 1;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getChildren", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_unschedule(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_unschedule'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->unschedule(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "unschedule", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_scheduleOnce(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_scheduleOnce'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 3) 
    {
        std::function<void (float)> arg0;
        HSQOBJECT callback2;
        sq_getstackobj(vm, 2, &callback2);
        float arg1;
        std::string arg2;

        do {
			    // Lambda binding for squirrel
			    arg0 = [vm, callback2](float larg0) -> void {
			        if (sq_getrefcount(vm, (HSQOBJECT *)&callback2) > 0) {
			            sq_pushobject(vm, callback2);
			            sq_push(vm, 1);
			            sq_pushfloat(vm, (SQFloat)larg0);
			            sq_call(vm, 2, SQFalse, SQTrue);
			            sq_poptop(vm);
			        }
			    };
			} while(0);

        ok &= sqval_to_float(vm, 3, &arg1);

        ok &= sqval_to_std_string(vm, 4, &arg2);
        if (!ok)
            return 0;
        cobj->scheduleOnce(arg0, arg1, arg2);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "scheduleOnce", (int)argc, 3);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_setOnExitCallback(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_setOnExitCallback'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::function<void ()> arg0;
        HSQOBJECT callback2;
        sq_getstackobj(vm, 2, &callback2);

        do {
			    // Lambda binding for squirrel
			    arg0 = [vm, callback2]() -> void {
			        if (sq_getrefcount(vm, (HSQOBJECT *)&callback2) > 0) {
			            sq_pushobject(vm, callback2);
			            sq_push(vm, 1);
			            sq_call(vm, 1, SQFalse, SQTrue);
			            sq_poptop(vm);
			        }
			    };
			} while(0);
        if (!ok)
            return 0;
        cobj->setOnExitCallback(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setOnExitCallback", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_pause(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_pause'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->pause();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "pause", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_convertToWorldSpaceAR(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_convertToWorldSpaceAR'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec2 arg0;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cocos2d::Vec2 ret = cobj->convertToWorldSpaceAR(arg0);
        vec2_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "convertToWorldSpaceAR", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_isIgnoreAnchorPointForPosition(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_isIgnoreAnchorPointForPosition'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isIgnoreAnchorPointForPosition();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isIgnoreAnchorPointForPosition", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_getChildByName(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_getChildByName'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        cocos2d::Node* ret = cobj->getChildByName(arg0);
        object_to_sqval<cocos2d::Node>(vm, "cc.Node", (cocos2d::Node*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getChildByName", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_updateDisplayedOpacity(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_updateDisplayedOpacity'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        uint16_t arg0;

        ok &= sqval_to_uint16(vm, 2, (uint16_t *)&arg0);
        if (!ok)
            return 0;
        cobj->updateDisplayedOpacity(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "updateDisplayedOpacity", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_getCameraMask(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_getCameraMask'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        unsigned short ret = cobj->getCameraMask();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getCameraMask", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_setRotation(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_setRotation'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setRotation(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setRotation", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_setScaleZ(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_setScaleZ'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setScaleZ(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setScaleZ", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_setScaleY(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_setScaleY'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setScaleY(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setScaleY", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_setScaleX(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_setScaleX'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setScaleX(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setScaleX", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_setRotationSkewX(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_setRotationSkewX'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setRotationSkewX(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setRotationSkewX", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_scheduleUpdateWithPriority(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_scheduleUpdateWithPriority'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        int arg0;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if (!ok)
            return 0;
        cobj->scheduleUpdateWithPriority(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "scheduleUpdateWithPriority", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_setonEnterTransitionDidFinishCallback(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_setonEnterTransitionDidFinishCallback'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::function<void ()> arg0;
        HSQOBJECT callback2;
        sq_getstackobj(vm, 2, &callback2);

        do {
			    // Lambda binding for squirrel
			    arg0 = [vm, callback2]() -> void {
			        if (sq_getrefcount(vm, (HSQOBJECT *)&callback2) > 0) {
			            sq_pushobject(vm, callback2);
			            sq_push(vm, 1);
			            sq_call(vm, 1, SQFalse, SQTrue);
			            sq_poptop(vm);
			        }
			    };
			} while(0);
        if (!ok)
            return 0;
        cobj->setonEnterTransitionDidFinishCallback(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setonEnterTransitionDidFinishCallback", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_removeFromPhysicsWorld(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_removeFromPhysicsWorld'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->removeFromPhysicsWorld();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "removeFromPhysicsWorld", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_removeAllComponents(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_removeAllComponents'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->removeAllComponents();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "removeAllComponents", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_getOpacity(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_getOpacity'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        uint16_t ret = cobj->getOpacity();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getOpacity", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_setCameraMask(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_setCameraMask'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        unsigned short arg0;

        ok &= sqval_to_ushort(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setCameraMask(arg0);
        return 0;
    }
    if (argc == 2) 
    {
        unsigned short arg0;
        bool arg1;

        ok &= sqval_to_ushort(vm, 2, &arg0);

        ok &= sqval_to_boolean(vm, 3, &arg1);
        if (!ok)
            return 0;
        cobj->setCameraMask(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setCameraMask", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_getTag(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_getTag'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        int ret = cobj->getTag();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getTag", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_getGLProgram(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_getGLProgram'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::GLProgram* ret = cobj->getGLProgram();
        object_to_sqval<cocos2d::GLProgram>(vm, "cc.GLProgram", (cocos2d::GLProgram*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getGLProgram", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_getNodeToWorldTransform(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_getNodeToWorldTransform'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Mat4 ret = cobj->getNodeToWorldTransform();
        mat4_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getNodeToWorldTransform", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_getPosition3D(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_getPosition3D'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Vec3 ret = cobj->getPosition3D();
        vec3_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getPosition3D", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_removeChild(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_removeChild'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Node* arg0;

        ok &= sqval_to_object<cocos2d::Node>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->removeChild(arg0);
        return 0;
    }
    if (argc == 2) 
    {
        cocos2d::Node* arg0;
        bool arg1;

        ok &= sqval_to_object<cocos2d::Node>(vm, 2, &arg0);

        ok &= sqval_to_boolean(vm, 3, &arg1);
        if (!ok)
            return 0;
        cobj->removeChild(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "removeChild", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_convertToWorldSpace(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_convertToWorldSpace'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec2 arg0;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cocos2d::Vec2 ret = cobj->convertToWorldSpace(arg0);
        vec2_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "convertToWorldSpace", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_getScene(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_getScene'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Scene* ret = cobj->getScene();
        object_to_sqval<cocos2d::Scene>(vm, "cc.Scene", (cocos2d::Scene*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getScene", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_getEventDispatcher(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_getEventDispatcher'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::EventDispatcher* ret = cobj->getEventDispatcher();
        object_to_sqval<cocos2d::EventDispatcher>(vm, "cc.EventDispatcher", (cocos2d::EventDispatcher*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getEventDispatcher", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_setSkewX(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_setSkewX'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setSkewX(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setSkewX", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_setGLProgramState(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_setGLProgramState'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::GLProgramState* arg0;

        ok &= sqval_to_object<cocos2d::GLProgramState>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setGLProgramState(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setGLProgramState", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_setOnEnterCallback(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_setOnEnterCallback'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::function<void ()> arg0;
        HSQOBJECT callback2;
        sq_getstackobj(vm, 2, &callback2);

        do {
			    // Lambda binding for squirrel
			    arg0 = [vm, callback2]() -> void {
			        if (sq_getrefcount(vm, (HSQOBJECT *)&callback2) > 0) {
			            sq_pushobject(vm, callback2);
			            sq_push(vm, 1);
			            sq_call(vm, 1, SQFalse, SQTrue);
			            sq_poptop(vm);
			        }
			    };
			} while(0);
        if (!ok)
            return 0;
        cobj->setOnEnterCallback(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setOnEnterCallback", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_setNormalizedPosition(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_setNormalizedPosition'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec2 arg0;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->setNormalizedPosition(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setNormalizedPosition", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_setonExitTransitionDidStartCallback(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_setonExitTransitionDidStartCallback'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::function<void ()> arg0;
        HSQOBJECT callback2;
        sq_getstackobj(vm, 2, &callback2);

        do {
			    // Lambda binding for squirrel
			    arg0 = [vm, callback2]() -> void {
			        if (sq_getrefcount(vm, (HSQOBJECT *)&callback2) > 0) {
			            sq_pushobject(vm, callback2);
			            sq_push(vm, 1);
			            sq_call(vm, 1, SQFalse, SQTrue);
			            sq_poptop(vm);
			        }
			    };
			} while(0);
        if (!ok)
            return 0;
        cobj->setonExitTransitionDidStartCallback(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setonExitTransitionDidStartCallback", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_unscheduleAllCallbacks(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_unscheduleAllCallbacks'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->unscheduleAllCallbacks();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "unscheduleAllCallbacks", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_convertTouchToNodeSpace(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_convertTouchToNodeSpace'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Touch* arg0;

        ok &= sqval_to_object<cocos2d::Touch>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cocos2d::Vec2 ret = cobj->convertTouchToNodeSpace(arg0);
        vec2_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "convertTouchToNodeSpace", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_removeAllChildren(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_removeAllChildren'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->removeAllChildren();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "removeAllChildren", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_getNodeToParentAffineTransform(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_getNodeToParentAffineTransform'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::AffineTransform ret = cobj->getNodeToParentAffineTransform();
        affinetransform_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getNodeToParentAffineTransform", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_unscheduleUpdate(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_unscheduleUpdate'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->unscheduleUpdate();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "unscheduleUpdate", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_isCascadeOpacityEnabled(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_isCascadeOpacityEnabled'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isCascadeOpacityEnabled();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isCascadeOpacityEnabled", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_setParent(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_setParent'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Node* arg0;

        ok &= sqval_to_object<cocos2d::Node>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setParent(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setParent", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_getName(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_getName'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        std::string ret = cobj->getName();
        sq_pushstring(vm, (const SQChar *)ret.c_str(), -1);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getName", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_resume(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_resume'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->resume();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "resume", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_getRotation3D(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_getRotation3D'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Vec3 ret = cobj->getRotation3D();
        vec3_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getRotation3D", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_getNodeToParentTransform(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_getNodeToParentTransform'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::Mat4& ret = cobj->getNodeToParentTransform();
        mat4_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getNodeToParentTransform", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_convertTouchToNodeSpaceAR(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_convertTouchToNodeSpaceAR'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Touch* arg0;

        ok &= sqval_to_object<cocos2d::Touch>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cocos2d::Vec2 ret = cobj->convertTouchToNodeSpaceAR(arg0);
        vec2_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "convertTouchToNodeSpaceAR", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_convertToNodeSpace(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_convertToNodeSpace'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec2 arg0;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cocos2d::Vec2 ret = cobj->convertToNodeSpace(arg0);
        vec2_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "convertToNodeSpace", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_schedule(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_schedule'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 3) {
            if (sq_gettype(vm, 2) != OT_CLOSURE) {
                break;
            }
            HSQOBJECT callback2;
            sq_getstackobj(vm, 2, &callback2);
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_STRING) {
                break;
            }

            std::function<void (float)> arg0;
            do {
			    // Lambda binding for squirrel
			    arg0 = [vm, callback2](float larg0) -> void {
			        if (sq_getrefcount(vm, (HSQOBJECT *)&callback2) > 0) {
			            sq_pushobject(vm, callback2);
			            sq_push(vm, 1);
			            sq_pushfloat(vm, (SQFloat)larg0);
			            sq_call(vm, 2, SQFalse, SQTrue);
			            sq_poptop(vm);
			        }
			    };
			} while(0);

            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);

            if (!ok) { break; }
            std::string arg2;
            ok &= sqval_to_std_string(vm, 4, &arg2);

            if (!ok) { break; }
            cobj->schedule(arg0, arg1, arg2);
            _SquirrelObject *sqobj = (_SquirrelObject *)cobj->_scriptObject;
            sqobj->addClosure("callback2", callback2);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_CLOSURE) {
                break;
            }
            HSQOBJECT callback2;
            sq_getstackobj(vm, 2, &callback2);
            if (sq_gettype(vm, 3) != OT_STRING) {
                break;
            }

            std::function<void (float)> arg0;
            do {
			    // Lambda binding for squirrel
			    arg0 = [vm, callback2](float larg0) -> void {
			        if (sq_getrefcount(vm, (HSQOBJECT *)&callback2) > 0) {
			            sq_pushobject(vm, callback2);
			            sq_push(vm, 1);
			            sq_pushfloat(vm, (SQFloat)larg0);
			            sq_call(vm, 2, SQFalse, SQTrue);
			            sq_poptop(vm);
			        }
			    };
			} while(0);

            if (!ok) { break; }
            std::string arg1;
            ok &= sqval_to_std_string(vm, 3, &arg1);

            if (!ok) { break; }
            cobj->schedule(arg0, arg1);
            _SquirrelObject *sqobj = (_SquirrelObject *)cobj->_scriptObject;
            sqobj->addClosure("callback2", callback2);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 5) {
            if (sq_gettype(vm, 2) != OT_CLOSURE) {
                break;
            }
            HSQOBJECT callback2;
            sq_getstackobj(vm, 2, &callback2);
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INTEGER && sq_gettype(vm, 5) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 6) != OT_STRING) {
                break;
            }

            std::function<void (float)> arg0;
            do {
			    // Lambda binding for squirrel
			    arg0 = [vm, callback2](float larg0) -> void {
			        if (sq_getrefcount(vm, (HSQOBJECT *)&callback2) > 0) {
			            sq_pushobject(vm, callback2);
			            sq_push(vm, 1);
			            sq_pushfloat(vm, (SQFloat)larg0);
			            sq_call(vm, 2, SQFalse, SQTrue);
			            sq_poptop(vm);
			        }
			    };
			} while(0);

            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);

            if (!ok) { break; }
            unsigned int arg2;
            ok &= sqval_to_uint32(vm, 4, &arg2);

            if (!ok) { break; }
            float arg3;
            ok &= sqval_to_float(vm, 5, &arg3);

            if (!ok) { break; }
            std::string arg4;
            ok &= sqval_to_std_string(vm, 6, &arg4);

            if (!ok) { break; }
            cobj->schedule(arg0, arg1, arg2, arg3, arg4);
            _SquirrelObject *sqobj = (_SquirrelObject *)cobj->_scriptObject;
            sqobj->addClosure("callback2", callback2);
            return 0;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "schedule", (int)argc, 5);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_removeAllChildrenWithCleanup(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_removeAllChildrenWithCleanup'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->removeAllChildrenWithCleanup(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "removeAllChildrenWithCleanup", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_removeFromParentAndCleanup(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_removeFromParentAndCleanup'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->removeFromParentAndCleanup(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "removeFromParentAndCleanup", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_getPhysicsBody(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_getPhysicsBody'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::PhysicsBody* ret = cobj->getPhysicsBody();
        object_to_sqval<cocos2d::PhysicsBody>(vm, "cc.PhysicsBody", (cocos2d::PhysicsBody*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getPhysicsBody", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_setPosition(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_setPosition'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);

            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);

            if (!ok) { break; }
            cobj->setPosition(arg0, arg1);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Vec2")) {
                break;
            }

            cocos2d::Vec2 arg0;
            cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;

            if (!ok) { break; }
            cobj->setPosition(arg0);
            return 0;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setPosition", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_stopActionByTag(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_stopActionByTag'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        int arg0;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if (!ok)
            return 0;
        cobj->stopActionByTag(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "stopActionByTag", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_reorderChild(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_reorderChild'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        cocos2d::Node* arg0;
        int arg1;

        ok &= sqval_to_object<cocos2d::Node>(vm, 2, &arg0);

        ok &= sqval_to_int32(vm, 3, (int *)&arg1);
        if (!ok)
            return 0;
        cobj->reorderChild(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "reorderChild", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_ignoreAnchorPointForPosition(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_ignoreAnchorPointForPosition'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->ignoreAnchorPointForPosition(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "ignoreAnchorPointForPosition", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_setSkewY(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_setSkewY'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setSkewY(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setSkewY", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_setPositionZ(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_setPositionZ'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setPositionZ(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setPositionZ", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_setRotation3D(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_setRotation3D'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec3 arg0;

        cocos2d::Vec3* ptr2 = nullptr; ok &= sqval_to_vec3(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->setRotation3D(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setRotation3D", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_setPositionX(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_setPositionX'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setPositionX(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setPositionX", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_setNodeToParentTransform(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_setNodeToParentTransform'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Mat4 arg0;

        cocos2d::Mat4 *ptr2 = nullptr; ok &= sqval_to_mat4(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->setNodeToParentTransform(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setNodeToParentTransform", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_getAnchorPoint(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_getAnchorPoint'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::Vec2& ret = cobj->getAnchorPoint();
        vec2_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getAnchorPoint", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_getNumberOfRunningActions(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_getNumberOfRunningActions'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        ssize_t ret = cobj->getNumberOfRunningActions();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getNumberOfRunningActions", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_updateTransform(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_updateTransform'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->updateTransform();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "updateTransform", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_isVisible(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_isVisible'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isVisible();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isVisible", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_getChildrenCount(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_getChildrenCount'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        ssize_t ret = cobj->getChildrenCount();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getChildrenCount", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_setAnchorPoint(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_setAnchorPoint'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec2 arg0;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->setAnchorPoint(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setAnchorPoint", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_convertToNodeSpaceAR(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_convertToNodeSpaceAR'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec2 arg0;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cocos2d::Vec2 ret = cobj->convertToNodeSpaceAR(arg0);
        vec2_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "convertToNodeSpaceAR", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_addComponent(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_addComponent'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Component* arg0;

        ok &= sqval_to_object<cocos2d::Component>(vm, 2, &arg0);
        if (!ok)
            return 0;
        bool ret = cobj->addComponent(arg0);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "addComponent", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_runAction(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_runAction'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Action* arg0;

        ok &= sqval_to_object<cocos2d::Action>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cocos2d::Action* ret = cobj->runAction(arg0);
        object_to_sqval<cocos2d::Action>(vm, "cc.Action", (cocos2d::Action*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "runAction", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_isOpacityModifyRGB(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_isOpacityModifyRGB'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isOpacityModifyRGB();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isOpacityModifyRGB", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_scheduleUpdateWithPriorityLua(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_scheduleUpdateWithPriorityLua'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        int arg0;
        int arg1;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);

        ok &= sqval_to_int32(vm, 3, (int *)&arg1);
        if (!ok)
            return 0;
        cobj->scheduleUpdateWithPriorityLua(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "scheduleUpdateWithPriorityLua", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_getRotation(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_getRotation'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getRotation();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getRotation", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_getAnchorPointInPoints(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_getAnchorPointInPoints'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::Vec2& ret = cobj->getAnchorPointInPoints();
        vec2_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getAnchorPointInPoints", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_visit(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_visit'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 0) {

            cobj->visit();
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 3) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Renderer")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Mat4")) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }

            cocos2d::Renderer* arg0;
            ok &= sqval_to_object<cocos2d::Renderer>(vm, 2, &arg0);

            if (!ok) { break; }
            cocos2d::Mat4 arg1;
            cocos2d::Mat4 *ptr3 = nullptr; ok &= sqval_to_mat4(vm, 3, ptr3); arg1 = *ptr3;

            if (!ok) { break; }
            unsigned int arg2;
            ok &= sqval_to_uint32(vm, 4, &arg2);

            if (!ok) { break; }
            cobj->visit(arg0, arg1, arg2);
            return 0;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "visit", (int)argc, 3);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_removeChildByName(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_removeChildByName'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->removeChildByName(arg0);
        return 0;
    }
    if (argc == 2) 
    {
        std::string arg0;
        bool arg1;

        ok &= sqval_to_std_string(vm, 2, &arg0);

        ok &= sqval_to_boolean(vm, 3, &arg1);
        if (!ok)
            return 0;
        cobj->removeChildByName(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "removeChildByName", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_getGLProgramState(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_getGLProgramState'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::GLProgramState* ret = cobj->getGLProgramState();
        object_to_sqval<cocos2d::GLProgramState>(vm, "cc.GLProgramState", (cocos2d::GLProgramState*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getGLProgramState", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_setScheduler(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_setScheduler'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Scheduler* arg0;

        ok &= sqval_to_object<cocos2d::Scheduler>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setScheduler(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setScheduler", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_stopAllActions(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_stopAllActions'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->stopAllActions();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "stopAllActions", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_getSkewX(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_getSkewX'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getSkewX();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getSkewX", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_getSkewY(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_getSkewY'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getSkewY();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getSkewY", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_getDisplayedColor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_getDisplayedColor'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::Color3B& ret = cobj->getDisplayedColor();
        color3b_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getDisplayedColor", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_getActionByTag(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_getActionByTag'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        int arg0;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if (!ok)
            return 0;
        cocos2d::Action* ret = cobj->getActionByTag(arg0);
        object_to_sqval<cocos2d::Action>(vm, "cc.Action", (cocos2d::Action*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getActionByTag", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_setName(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_setName'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setName(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setName", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_setAdditionalTransform(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_setAdditionalTransform'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::AffineTransform")) {
                break;
            }

            cocos2d::AffineTransform arg0;
            cocos2d::AffineTransform *ptr2 = nullptr; ok &= sqval_to_affinetransform(vm, 2, ptr2); arg0 = *ptr2;

            if (!ok) { break; }
            cobj->setAdditionalTransform(arg0);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Mat4")) {
                break;
            }

            cocos2d::Mat4* arg0;
            ok &= sqval_to_object<cocos2d::Mat4>(vm, 2, &arg0);

            if (!ok) { break; }
            cobj->setAdditionalTransform(arg0);
            return 0;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setAdditionalTransform", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_getDisplayedOpacity(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_getDisplayedOpacity'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        uint16_t ret = cobj->getDisplayedOpacity();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getDisplayedOpacity", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_getLocalZOrder(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_getLocalZOrder'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        int ret = cobj->getLocalZOrder();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getLocalZOrder", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_getScheduler(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_getScheduler'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 0) {

            const cocos2d::Scheduler* ret = cobj->getScheduler();
            object_to_sqval<cocos2d::Scheduler>(vm, "cc.Scheduler", (cocos2d::Scheduler*)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 0) {

            cocos2d::Scheduler* ret = cobj->getScheduler();
            object_to_sqval<cocos2d::Scheduler>(vm, "cc.Scheduler", (cocos2d::Scheduler*)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getScheduler", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_getParentToNodeAffineTransform(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_getParentToNodeAffineTransform'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::AffineTransform ret = cobj->getParentToNodeAffineTransform();
        affinetransform_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getParentToNodeAffineTransform", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_getOrderOfArrival(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_getOrderOfArrival'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        int ret = cobj->getOrderOfArrival();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getOrderOfArrival", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_setContentSize(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_setContentSize'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Size arg0;

        cocos2d::Size* ptr2 = nullptr; ok &= sqval_to_size(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->setContentSize(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setContentSize", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_setActionManager(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_setActionManager'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::ActionManager* arg0;

        ok &= sqval_to_object<cocos2d::ActionManager>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setActionManager(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setActionManager", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_getPosition(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_getPosition'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_ARRAY) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_ARRAY) {
                break;
            }

            float* arg0;
            ok &= sqval_to_float_array(vm, 2, (const float **)&arg0);

            if (!ok) { break; }
            float* arg1;
            ok &= sqval_to_float_array(vm, 3, (const float **)&arg1);

            if (!ok) { break; }
            cobj->getPosition(arg0, arg1);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 0) {

            const cocos2d::Vec2& ret = cobj->getPosition();
            vec2_to_sqval(vm, ret);
            return 1;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getPosition", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_setColor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_setColor'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Color3B arg0;

        cocos2d::Color3B *ptr2 = nullptr; ok &= sqval_to_color3b(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->setColor(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setColor", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_isRunning(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_isRunning'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isRunning();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isRunning", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_getParent(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_getParent'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 0) {

            const cocos2d::Node* ret = cobj->getParent();
            object_to_sqval<cocos2d::Node>(vm, "cc.Node", (cocos2d::Node*)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 0) {

            cocos2d::Node* ret = cobj->getParent();
            object_to_sqval<cocos2d::Node>(vm, "cc.Node", (cocos2d::Node*)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getParent", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_getPositionZ(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_getPositionZ'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getPositionZ();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getPositionZ", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_getPositionY(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_getPositionY'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getPositionY();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getPositionY", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_getPositionX(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_getPositionX'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getPositionX();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getPositionX", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_removeChildByTag(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_removeChildByTag'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        int arg0;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if (!ok)
            return 0;
        cobj->removeChildByTag(arg0);
        return 0;
    }
    if (argc == 2) 
    {
        int arg0;
        bool arg1;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);

        ok &= sqval_to_boolean(vm, 3, &arg1);
        if (!ok)
            return 0;
        cobj->removeChildByTag(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "removeChildByTag", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_setPositionY(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_setPositionY'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setPositionY(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setPositionY", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_getNodeToWorldAffineTransform(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_getNodeToWorldAffineTransform'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::AffineTransform ret = cobj->getNodeToWorldAffineTransform();
        affinetransform_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getNodeToWorldAffineTransform", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_updateDisplayedColor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_updateDisplayedColor'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Color3B arg0;

        cocos2d::Color3B *ptr2 = nullptr; ok &= sqval_to_color3b(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->updateDisplayedColor(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "updateDisplayedColor", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_setVisible(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_setVisible'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setVisible(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setVisible", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_getParentToNodeTransform(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_getParentToNodeTransform'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::Mat4& ret = cobj->getParentToNodeTransform();
        mat4_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getParentToNodeTransform", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_isScheduled(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_isScheduled'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        bool ret = cobj->isScheduled(arg0);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isScheduled", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_setGlobalZOrder(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_setGlobalZOrder'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setGlobalZOrder(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setGlobalZOrder", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_setScale(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_setScale'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);

            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);

            if (!ok) { break; }
            cobj->setScale(arg0, arg1);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);

            if (!ok) { break; }
            cobj->setScale(arg0);
            return 0;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setScale", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_getChildByTag(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_getChildByTag'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        int arg0;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if (!ok)
            return 0;
        cocos2d::Node* ret = cobj->getChildByTag(arg0);
        object_to_sqval<cocos2d::Node>(vm, "cc.Node", (cocos2d::Node*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getChildByTag", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_setOrderOfArrival(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_setOrderOfArrival'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        int arg0;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if (!ok)
            return 0;
        cobj->setOrderOfArrival(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setOrderOfArrival", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_getScaleZ(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_getScaleZ'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getScaleZ();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getScaleZ", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_getScaleY(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_getScaleY'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getScaleY();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getScaleY", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_getScaleX(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_getScaleX'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getScaleX();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getScaleX", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_setLocalZOrder(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_setLocalZOrder'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        int arg0;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if (!ok)
            return 0;
        cobj->setLocalZOrder(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setLocalZOrder", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_getWorldToNodeAffineTransform(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_getWorldToNodeAffineTransform'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::AffineTransform ret = cobj->getWorldToNodeAffineTransform();
        affinetransform_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getWorldToNodeAffineTransform", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_setCascadeColorEnabled(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_setCascadeColorEnabled'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setCascadeColorEnabled(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setCascadeColorEnabled", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_setOpacity(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_setOpacity'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        uint16_t arg0;

        ok &= sqval_to_uint16(vm, 2, (uint16_t *)&arg0);
        if (!ok)
            return 0;
        cobj->setOpacity(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setOpacity", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_cleanup(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_cleanup'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->cleanup();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "cleanup", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_getComponent(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_getComponent'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        cocos2d::Component* ret = cobj->getComponent(arg0);
        object_to_sqval<cocos2d::Component>(vm, "cc.Component", (cocos2d::Component*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getComponent", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_getContentSize(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_getContentSize'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::Size& ret = cobj->getContentSize();
        size_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getContentSize", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_stopAllActionsByTag(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_stopAllActionsByTag'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        int arg0;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if (!ok)
            return 0;
        cobj->stopAllActionsByTag(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "stopAllActionsByTag", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_getColor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_getColor'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::Color3B& ret = cobj->getColor();
        color3b_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getColor", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_getBoundingBox(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_getBoundingBox'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Rect ret = cobj->getBoundingBox();
        rect_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getBoundingBox", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_setEventDispatcher(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_setEventDispatcher'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::EventDispatcher* arg0;

        ok &= sqval_to_object<cocos2d::EventDispatcher>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setEventDispatcher(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setEventDispatcher", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_getGlobalZOrder(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_getGlobalZOrder'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getGlobalZOrder();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getGlobalZOrder", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_draw(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_draw'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 0) {

            cobj->draw();
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 3) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Renderer")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Mat4")) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }

            cocos2d::Renderer* arg0;
            ok &= sqval_to_object<cocos2d::Renderer>(vm, 2, &arg0);

            if (!ok) { break; }
            cocos2d::Mat4 arg1;
            cocos2d::Mat4 *ptr3 = nullptr; ok &= sqval_to_mat4(vm, 3, ptr3); arg1 = *ptr3;

            if (!ok) { break; }
            unsigned int arg2;
            ok &= sqval_to_uint32(vm, 4, &arg2);

            if (!ok) { break; }
            cobj->draw(arg0, arg1, arg2);
            return 0;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "draw", (int)argc, 3);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_setUserObject(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_setUserObject'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Ref* arg0;

        ok &= sqval_to_object<cocos2d::Ref>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setUserObject(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setUserObject", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_removeFromParent(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_removeFromParent'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->removeFromParent();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "removeFromParent", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_setPosition3D(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_setPosition3D'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec3 arg0;

        cocos2d::Vec3* ptr2 = nullptr; ok &= sqval_to_vec3(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->setPosition3D(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setPosition3D", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_update(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_update'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->update(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "update", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_sortAllChildren(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_sortAllChildren'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->sortAllChildren();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "sortAllChildren", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_getWorldToNodeTransform(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_getWorldToNodeTransform'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Mat4 ret = cobj->getWorldToNodeTransform();
        mat4_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getWorldToNodeTransform", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_setGLProgram(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_setGLProgram'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::GLProgram* arg0;

        ok &= sqval_to_object<cocos2d::GLProgram>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setGLProgram(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setGLProgram", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_getScale(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_getScale'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getScale();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getScale", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_getNormalizedPosition(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_getNormalizedPosition'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::Vec2& ret = cobj->getNormalizedPosition();
        vec2_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getNormalizedPosition", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_getRotationSkewX(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_getRotationSkewX'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getRotationSkewX();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getRotationSkewX", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_getRotationSkewY(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_getRotationSkewY'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getRotationSkewY();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getRotationSkewY", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_setTag(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_setTag'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        int arg0;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if (!ok)
            return 0;
        cobj->setTag(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setTag", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_isCascadeColorEnabled(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_isCascadeColorEnabled'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isCascadeColorEnabled();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isCascadeColorEnabled", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_scheduleUpdate(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_scheduleUpdate'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->scheduleUpdate();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "scheduleUpdate", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_stopAction(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_stopAction'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Action* arg0;

        ok &= sqval_to_object<cocos2d::Action>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->stopAction(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "stopAction", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_getActionManager(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Node* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Node_getActionManager'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 0) {

            const cocos2d::ActionManager* ret = cobj->getActionManager();
            object_to_sqval<cocos2d::ActionManager>(vm, "cc.ActionManager", (cocos2d::ActionManager*)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 0) {

            cocos2d::ActionManager* ret = cobj->getActionManager();
            object_to_sqval<cocos2d::ActionManager>(vm, "cc.ActionManager", (cocos2d::ActionManager*)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getActionManager", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Node_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        cocos2d::Node* ret = cocos2d::Node::create();
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.Node");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 0);
    return 0;
}

SQInteger squirrel_cocos2dx_Node_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.Node", -1);
    return 1;
}

void squirrel_cocos2dx_Node_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_Node(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("Node"), -1);


    sq_pushstring(vm, _SC("Ref"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "addChild", squirrel_cocos2dx_Node_addChild);
    to_squirrel_function(vm, "removeComponent", squirrel_cocos2dx_Node_removeComponent);
    to_squirrel_function(vm, "setPhysicsBody", squirrel_cocos2dx_Node_setPhysicsBody);
    to_squirrel_function(vm, "getDescription", squirrel_cocos2dx_Node_getDescription);
    to_squirrel_function(vm, "setRotationSkewY", squirrel_cocos2dx_Node_setRotationSkewY);
    to_squirrel_function(vm, "setOpacityModifyRGB", squirrel_cocos2dx_Node_setOpacityModifyRGB);
    to_squirrel_function(vm, "setCascadeOpacityEnabled", squirrel_cocos2dx_Node_setCascadeOpacityEnabled);
    to_squirrel_function(vm, "getChildren", squirrel_cocos2dx_Node_getChildren);
    to_squirrel_function(vm, "unschedule", squirrel_cocos2dx_Node_unschedule);
    to_squirrel_function(vm, "scheduleOnce", squirrel_cocos2dx_Node_scheduleOnce);
    to_squirrel_function(vm, "setOnExitCallback", squirrel_cocos2dx_Node_setOnExitCallback);
    to_squirrel_function(vm, "pause", squirrel_cocos2dx_Node_pause);
    to_squirrel_function(vm, "convertToWorldSpaceAR", squirrel_cocos2dx_Node_convertToWorldSpaceAR);
    to_squirrel_function(vm, "isIgnoreAnchorPointForPosition", squirrel_cocos2dx_Node_isIgnoreAnchorPointForPosition);
    to_squirrel_function(vm, "getChildByName", squirrel_cocos2dx_Node_getChildByName);
    to_squirrel_function(vm, "updateDisplayedOpacity", squirrel_cocos2dx_Node_updateDisplayedOpacity);
    to_squirrel_function(vm, "getCameraMask", squirrel_cocos2dx_Node_getCameraMask);
    to_squirrel_function(vm, "setRotation", squirrel_cocos2dx_Node_setRotation);
    to_squirrel_function(vm, "setScaleZ", squirrel_cocos2dx_Node_setScaleZ);
    to_squirrel_function(vm, "setScaleY", squirrel_cocos2dx_Node_setScaleY);
    to_squirrel_function(vm, "setScaleX", squirrel_cocos2dx_Node_setScaleX);
    to_squirrel_function(vm, "setRotationSkewX", squirrel_cocos2dx_Node_setRotationSkewX);
    to_squirrel_function(vm, "scheduleUpdateWithPriority", squirrel_cocos2dx_Node_scheduleUpdateWithPriority);
    to_squirrel_function(vm, "setonEnterTransitionDidFinishCallback", squirrel_cocos2dx_Node_setonEnterTransitionDidFinishCallback);
    to_squirrel_function(vm, "removeFromPhysicsWorld", squirrel_cocos2dx_Node_removeFromPhysicsWorld);
    to_squirrel_function(vm, "removeAllComponents", squirrel_cocos2dx_Node_removeAllComponents);
    to_squirrel_function(vm, "getOpacity", squirrel_cocos2dx_Node_getOpacity);
    to_squirrel_function(vm, "setCameraMask", squirrel_cocos2dx_Node_setCameraMask);
    to_squirrel_function(vm, "getTag", squirrel_cocos2dx_Node_getTag);
    to_squirrel_function(vm, "getGLProgram", squirrel_cocos2dx_Node_getGLProgram);
    to_squirrel_function(vm, "getNodeToWorldTransform", squirrel_cocos2dx_Node_getNodeToWorldTransform);
    to_squirrel_function(vm, "getPosition3D", squirrel_cocos2dx_Node_getPosition3D);
    to_squirrel_function(vm, "removeChild", squirrel_cocos2dx_Node_removeChild);
    to_squirrel_function(vm, "convertToWorldSpace", squirrel_cocos2dx_Node_convertToWorldSpace);
    to_squirrel_function(vm, "getScene", squirrel_cocos2dx_Node_getScene);
    to_squirrel_function(vm, "getEventDispatcher", squirrel_cocos2dx_Node_getEventDispatcher);
    to_squirrel_function(vm, "setSkewX", squirrel_cocos2dx_Node_setSkewX);
    to_squirrel_function(vm, "setGLProgramState", squirrel_cocos2dx_Node_setGLProgramState);
    to_squirrel_function(vm, "setOnEnterCallback", squirrel_cocos2dx_Node_setOnEnterCallback);
    to_squirrel_function(vm, "setNormalizedPosition", squirrel_cocos2dx_Node_setNormalizedPosition);
    to_squirrel_function(vm, "setonExitTransitionDidStartCallback", squirrel_cocos2dx_Node_setonExitTransitionDidStartCallback);
    to_squirrel_function(vm, "unscheduleAllCallbacks", squirrel_cocos2dx_Node_unscheduleAllCallbacks);
    to_squirrel_function(vm, "convertTouchToNodeSpace", squirrel_cocos2dx_Node_convertTouchToNodeSpace);
    to_squirrel_function(vm, "removeAllChildren", squirrel_cocos2dx_Node_removeAllChildren);
    to_squirrel_function(vm, "getNodeToParentAffineTransform", squirrel_cocos2dx_Node_getNodeToParentAffineTransform);
    to_squirrel_function(vm, "unscheduleUpdate", squirrel_cocos2dx_Node_unscheduleUpdate);
    to_squirrel_function(vm, "isCascadeOpacityEnabled", squirrel_cocos2dx_Node_isCascadeOpacityEnabled);
    to_squirrel_function(vm, "setParent", squirrel_cocos2dx_Node_setParent);
    to_squirrel_function(vm, "getName", squirrel_cocos2dx_Node_getName);
    to_squirrel_function(vm, "resume", squirrel_cocos2dx_Node_resume);
    to_squirrel_function(vm, "getRotation3D", squirrel_cocos2dx_Node_getRotation3D);
    to_squirrel_function(vm, "getNodeToParentTransform", squirrel_cocos2dx_Node_getNodeToParentTransform);
    to_squirrel_function(vm, "convertTouchToNodeSpaceAR", squirrel_cocos2dx_Node_convertTouchToNodeSpaceAR);
    to_squirrel_function(vm, "convertToNodeSpace", squirrel_cocos2dx_Node_convertToNodeSpace);
    to_squirrel_function(vm, "schedule", squirrel_cocos2dx_Node_schedule);
    to_squirrel_function(vm, "removeAllChildrenWithCleanup", squirrel_cocos2dx_Node_removeAllChildrenWithCleanup);
    to_squirrel_function(vm, "removeFromParentAndCleanup", squirrel_cocos2dx_Node_removeFromParentAndCleanup);
    to_squirrel_function(vm, "getPhysicsBody", squirrel_cocos2dx_Node_getPhysicsBody);
    to_squirrel_function(vm, "setPosition", squirrel_cocos2dx_Node_setPosition);
    to_squirrel_function(vm, "stopActionByTag", squirrel_cocos2dx_Node_stopActionByTag);
    to_squirrel_function(vm, "reorderChild", squirrel_cocos2dx_Node_reorderChild);
    to_squirrel_function(vm, "ignoreAnchorPointForPosition", squirrel_cocos2dx_Node_ignoreAnchorPointForPosition);
    to_squirrel_function(vm, "setSkewY", squirrel_cocos2dx_Node_setSkewY);
    to_squirrel_function(vm, "setPositionZ", squirrel_cocos2dx_Node_setPositionZ);
    to_squirrel_function(vm, "setRotation3D", squirrel_cocos2dx_Node_setRotation3D);
    to_squirrel_function(vm, "setPositionX", squirrel_cocos2dx_Node_setPositionX);
    to_squirrel_function(vm, "setNodeToParentTransform", squirrel_cocos2dx_Node_setNodeToParentTransform);
    to_squirrel_function(vm, "getAnchorPoint", squirrel_cocos2dx_Node_getAnchorPoint);
    to_squirrel_function(vm, "getNumberOfRunningActions", squirrel_cocos2dx_Node_getNumberOfRunningActions);
    to_squirrel_function(vm, "updateTransform", squirrel_cocos2dx_Node_updateTransform);
    to_squirrel_function(vm, "isVisible", squirrel_cocos2dx_Node_isVisible);
    to_squirrel_function(vm, "getChildrenCount", squirrel_cocos2dx_Node_getChildrenCount);
    to_squirrel_function(vm, "setAnchorPoint", squirrel_cocos2dx_Node_setAnchorPoint);
    to_squirrel_function(vm, "convertToNodeSpaceAR", squirrel_cocos2dx_Node_convertToNodeSpaceAR);
    to_squirrel_function(vm, "addComponent", squirrel_cocos2dx_Node_addComponent);
    to_squirrel_function(vm, "runAction", squirrel_cocos2dx_Node_runAction);
    to_squirrel_function(vm, "isOpacityModifyRGB", squirrel_cocos2dx_Node_isOpacityModifyRGB);
    to_squirrel_function(vm, "scheduleUpdateWithPriorityLua", squirrel_cocos2dx_Node_scheduleUpdateWithPriorityLua);
    to_squirrel_function(vm, "getRotation", squirrel_cocos2dx_Node_getRotation);
    to_squirrel_function(vm, "getAnchorPointInPoints", squirrel_cocos2dx_Node_getAnchorPointInPoints);
    to_squirrel_function(vm, "visit", squirrel_cocos2dx_Node_visit);
    to_squirrel_function(vm, "removeChildByName", squirrel_cocos2dx_Node_removeChildByName);
    to_squirrel_function(vm, "getGLProgramState", squirrel_cocos2dx_Node_getGLProgramState);
    to_squirrel_function(vm, "setScheduler", squirrel_cocos2dx_Node_setScheduler);
    to_squirrel_function(vm, "stopAllActions", squirrel_cocos2dx_Node_stopAllActions);
    to_squirrel_function(vm, "getSkewX", squirrel_cocos2dx_Node_getSkewX);
    to_squirrel_function(vm, "getSkewY", squirrel_cocos2dx_Node_getSkewY);
    to_squirrel_function(vm, "getDisplayedColor", squirrel_cocos2dx_Node_getDisplayedColor);
    to_squirrel_function(vm, "getActionByTag", squirrel_cocos2dx_Node_getActionByTag);
    to_squirrel_function(vm, "setName", squirrel_cocos2dx_Node_setName);
    to_squirrel_function(vm, "setAdditionalTransform", squirrel_cocos2dx_Node_setAdditionalTransform);
    to_squirrel_function(vm, "getDisplayedOpacity", squirrel_cocos2dx_Node_getDisplayedOpacity);
    to_squirrel_function(vm, "getLocalZOrder", squirrel_cocos2dx_Node_getLocalZOrder);
    to_squirrel_function(vm, "getScheduler", squirrel_cocos2dx_Node_getScheduler);
    to_squirrel_function(vm, "getParentToNodeAffineTransform", squirrel_cocos2dx_Node_getParentToNodeAffineTransform);
    to_squirrel_function(vm, "getOrderOfArrival", squirrel_cocos2dx_Node_getOrderOfArrival);
    to_squirrel_function(vm, "setContentSize", squirrel_cocos2dx_Node_setContentSize);
    to_squirrel_function(vm, "setActionManager", squirrel_cocos2dx_Node_setActionManager);
    to_squirrel_function(vm, "getPosition", squirrel_cocos2dx_Node_getPosition);
    to_squirrel_function(vm, "setColor", squirrel_cocos2dx_Node_setColor);
    to_squirrel_function(vm, "isRunning", squirrel_cocos2dx_Node_isRunning);
    to_squirrel_function(vm, "getParent", squirrel_cocos2dx_Node_getParent);
    to_squirrel_function(vm, "getPositionZ", squirrel_cocos2dx_Node_getPositionZ);
    to_squirrel_function(vm, "getPositionY", squirrel_cocos2dx_Node_getPositionY);
    to_squirrel_function(vm, "getPositionX", squirrel_cocos2dx_Node_getPositionX);
    to_squirrel_function(vm, "removeChildByTag", squirrel_cocos2dx_Node_removeChildByTag);
    to_squirrel_function(vm, "setPositionY", squirrel_cocos2dx_Node_setPositionY);
    to_squirrel_function(vm, "getNodeToWorldAffineTransform", squirrel_cocos2dx_Node_getNodeToWorldAffineTransform);
    to_squirrel_function(vm, "updateDisplayedColor", squirrel_cocos2dx_Node_updateDisplayedColor);
    to_squirrel_function(vm, "setVisible", squirrel_cocos2dx_Node_setVisible);
    to_squirrel_function(vm, "getParentToNodeTransform", squirrel_cocos2dx_Node_getParentToNodeTransform);
    to_squirrel_function(vm, "isScheduled", squirrel_cocos2dx_Node_isScheduled);
    to_squirrel_function(vm, "setGlobalZOrder", squirrel_cocos2dx_Node_setGlobalZOrder);
    to_squirrel_function(vm, "setScale", squirrel_cocos2dx_Node_setScale);
    to_squirrel_function(vm, "getChildByTag", squirrel_cocos2dx_Node_getChildByTag);
    to_squirrel_function(vm, "setOrderOfArrival", squirrel_cocos2dx_Node_setOrderOfArrival);
    to_squirrel_function(vm, "getScaleZ", squirrel_cocos2dx_Node_getScaleZ);
    to_squirrel_function(vm, "getScaleY", squirrel_cocos2dx_Node_getScaleY);
    to_squirrel_function(vm, "getScaleX", squirrel_cocos2dx_Node_getScaleX);
    to_squirrel_function(vm, "setLocalZOrder", squirrel_cocos2dx_Node_setLocalZOrder);
    to_squirrel_function(vm, "getWorldToNodeAffineTransform", squirrel_cocos2dx_Node_getWorldToNodeAffineTransform);
    to_squirrel_function(vm, "setCascadeColorEnabled", squirrel_cocos2dx_Node_setCascadeColorEnabled);
    to_squirrel_function(vm, "setOpacity", squirrel_cocos2dx_Node_setOpacity);
    to_squirrel_function(vm, "cleanup", squirrel_cocos2dx_Node_cleanup);
    to_squirrel_function(vm, "getComponent", squirrel_cocos2dx_Node_getComponent);
    to_squirrel_function(vm, "getContentSize", squirrel_cocos2dx_Node_getContentSize);
    to_squirrel_function(vm, "stopAllActionsByTag", squirrel_cocos2dx_Node_stopAllActionsByTag);
    to_squirrel_function(vm, "getColor", squirrel_cocos2dx_Node_getColor);
    to_squirrel_function(vm, "getBoundingBox", squirrel_cocos2dx_Node_getBoundingBox);
    to_squirrel_function(vm, "setEventDispatcher", squirrel_cocos2dx_Node_setEventDispatcher);
    to_squirrel_function(vm, "getGlobalZOrder", squirrel_cocos2dx_Node_getGlobalZOrder);
    to_squirrel_function(vm, "draw", squirrel_cocos2dx_Node_draw);
    to_squirrel_function(vm, "setUserObject", squirrel_cocos2dx_Node_setUserObject);
    to_squirrel_function(vm, "removeFromParent", squirrel_cocos2dx_Node_removeFromParent);
    to_squirrel_function(vm, "setPosition3D", squirrel_cocos2dx_Node_setPosition3D);
    to_squirrel_function(vm, "update", squirrel_cocos2dx_Node_update);
    to_squirrel_function(vm, "sortAllChildren", squirrel_cocos2dx_Node_sortAllChildren);
    to_squirrel_function(vm, "getWorldToNodeTransform", squirrel_cocos2dx_Node_getWorldToNodeTransform);
    to_squirrel_function(vm, "setGLProgram", squirrel_cocos2dx_Node_setGLProgram);
    to_squirrel_function(vm, "getScale", squirrel_cocos2dx_Node_getScale);
    to_squirrel_function(vm, "getNormalizedPosition", squirrel_cocos2dx_Node_getNormalizedPosition);
    to_squirrel_function(vm, "getRotationSkewX", squirrel_cocos2dx_Node_getRotationSkewX);
    to_squirrel_function(vm, "getRotationSkewY", squirrel_cocos2dx_Node_getRotationSkewY);
    to_squirrel_function(vm, "setTag", squirrel_cocos2dx_Node_setTag);
    to_squirrel_function(vm, "isCascadeColorEnabled", squirrel_cocos2dx_Node_isCascadeColorEnabled);
    to_squirrel_function(vm, "scheduleUpdate", squirrel_cocos2dx_Node_scheduleUpdate);
    to_squirrel_function(vm, "stopAction", squirrel_cocos2dx_Node_stopAction);
    to_squirrel_function(vm, "getActionManager", squirrel_cocos2dx_Node_getActionManager);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_Node_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_Node_typeof_meta);

    to_squirrel_variable_integer(vm, "INVALID_TAG", (SQInteger)cocos2d::Node::INVALID_TAG, SQTrue);
    to_squirrel_variable_integer(vm, "FLAGS_TRANSFORM_DIRTY", (SQInteger)cocos2d::Node::FLAGS_TRANSFORM_DIRTY, SQTrue);
    to_squirrel_variable_integer(vm, "FLAGS_CONTENT_SIZE_DIRTY", (SQInteger)cocos2d::Node::FLAGS_CONTENT_SIZE_DIRTY, SQTrue);
    to_squirrel_variable_integer(vm, "FLAGS_DIRTY_MASK", (SQInteger)cocos2d::Node::FLAGS_DIRTY_MASK, SQTrue);


    squirrel_cocos2dx_Node_push_c_class(vm);

    std::string typeName = typeid(cocos2d::Node).name();
    g_sqType[typeName] = "cc.Node";

    return 1;
}
SQInteger squirrel_cocos2dx_ToggleVisibility_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        cocos2d::ToggleVisibility* ret = cocos2d::ToggleVisibility::create();
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.ToggleVisibility");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 0);
    return 0;
}

SQInteger squirrel_cocos2dx_ToggleVisibility_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.ToggleVisibility", -1);
    return 1;
}

void squirrel_cocos2dx_ToggleVisibility_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::ToggleVisibility", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionInstant", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_ToggleVisibility(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("ToggleVisibility"), -1);


    sq_pushstring(vm, _SC("ActionInstant"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_ToggleVisibility_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_ToggleVisibility_typeof_meta);



    squirrel_cocos2dx_ToggleVisibility_push_c_class(vm);

    std::string typeName = typeid(cocos2d::ToggleVisibility).name();
    g_sqType[typeName] = "cc.ToggleVisibility";

    return 1;
}
SQInteger squirrel_cocos2dx_Repeat_setInnerAction(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Repeat* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Repeat_setInnerAction'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::FiniteTimeAction* arg0;

        ok &= sqval_to_object<cocos2d::FiniteTimeAction>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setInnerAction(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setInnerAction", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Repeat_getInnerAction(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Repeat* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Repeat_getInnerAction'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::FiniteTimeAction* ret = cobj->getInnerAction();
        object_to_sqval<cocos2d::FiniteTimeAction>(vm, "cc.FiniteTimeAction", (cocos2d::FiniteTimeAction*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getInnerAction", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Repeat_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        cocos2d::FiniteTimeAction* arg0;
        unsigned int arg1;
        ok &= sqval_to_object<cocos2d::FiniteTimeAction>(vm, 2, &arg0);
        ok &= sqval_to_uint32(vm, 3, &arg1);
        if(!ok)
            return 0;
        cocos2d::Repeat* ret = cocos2d::Repeat::create(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.Repeat");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_Repeat_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.Repeat", -1);
    return 1;
}

void squirrel_cocos2dx_Repeat_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::Repeat", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_Repeat(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("Repeat"), -1);


    sq_pushstring(vm, _SC("ActionInterval"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "setInnerAction", squirrel_cocos2dx_Repeat_setInnerAction);
    to_squirrel_function(vm, "getInnerAction", squirrel_cocos2dx_Repeat_getInnerAction);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_Repeat_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_Repeat_typeof_meta);



    squirrel_cocos2dx_Repeat_push_c_class(vm);

    std::string typeName = typeid(cocos2d::Repeat).name();
    g_sqType[typeName] = "cc.Repeat";

    return 1;
}
SQInteger squirrel_cocos2dx_CardinalSplineBy_constructor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::CardinalSplineBy* cobj = nullptr;
    bool ok  = true;

    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj = new cocos2d::CardinalSplineBy();
        sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
        cobj->retain();
        sq_setreleasehook(vm, 1, squirrel_releasehook_Ref);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "CardinalSplineBy", (int)argc, 0);
    return 0;
}


SQInteger squirrel_cocos2dx_CardinalSplineBy_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.CardinalSplineBy", -1);
    return 1;
}

void squirrel_cocos2dx_CardinalSplineBy_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::CardinalSplineBy", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::CardinalSplineTo", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_CardinalSplineBy(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("CardinalSplineBy"), -1);


    sq_pushstring(vm, _SC("CardinalSplineTo"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "constructor", squirrel_cocos2dx_CardinalSplineBy_constructor);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_CardinalSplineBy_typeof_meta);



    squirrel_cocos2dx_CardinalSplineBy_push_c_class(vm);

    std::string typeName = typeid(cocos2d::CardinalSplineBy).name();
    g_sqType[typeName] = "cc.CardinalSplineBy";

    return 1;
}
SQInteger squirrel_cocos2dx_TransitionFlipY_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 2)
        {

            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Scene")) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::Scene* arg1;
            ok &= sqval_to_object<cocos2d::Scene>(vm, 3, &arg1);
            if (!ok) { break; }
            cocos2d::TransitionFlipY* ret = cocos2d::TransitionFlipY::create(arg0, arg1);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.TransitionFlipY");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 3)
        {

            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Scene")) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INSTANCE || ! instanceof_cclass(vm, 4, "cocos2d::TransitionScene::Orientation")) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::Scene* arg1;
            ok &= sqval_to_object<cocos2d::Scene>(vm, 3, &arg1);
            if (!ok) { break; }
            cocos2d::TransitionScene::Orientation arg2;
            ok &= sqval_to_int32(vm, 4, (int *)&arg2);
            if (!ok) { break; }
            cocos2d::TransitionFlipY* ret = cocos2d::TransitionFlipY::create(arg0, arg1, arg2);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.TransitionFlipY");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d", "create", (int)argc, 3);
    return 0;
}

SQInteger squirrel_cocos2dx_TransitionFlipY_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.TransitionFlipY", -1);
    return 1;
}

void squirrel_cocos2dx_TransitionFlipY_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::TransitionFlipY", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::TransitionSceneOriented", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TransitionScene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Scene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_TransitionFlipY(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("TransitionFlipY"), -1);


    sq_pushstring(vm, _SC("TransitionSceneOriented"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_TransitionFlipY_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_TransitionFlipY_typeof_meta);



    squirrel_cocos2dx_TransitionFlipY_push_c_class(vm);

    std::string typeName = typeid(cocos2d::TransitionFlipY).name();
    g_sqType[typeName] = "cc.TransitionFlipY";

    return 1;
}
SQInteger squirrel_cocos2dx_TurnOffTiles_turnOnTile(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TurnOffTiles* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TurnOffTiles_turnOnTile'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec2 arg0;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->turnOnTile(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "turnOnTile", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TurnOffTiles_turnOffTile(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TurnOffTiles* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TurnOffTiles_turnOffTile'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec2 arg0;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->turnOffTile(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "turnOffTile", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TurnOffTiles_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 3)
        {

            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Size")) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::Size arg1;
            cocos2d::Size* ptr3 = nullptr; ok &= sqval_to_size(vm, 3, ptr3); arg1 = *ptr3;
            if (!ok) { break; }
            unsigned int arg2;
            ok &= sqval_to_uint32(vm, 4, &arg2);
            if (!ok) { break; }
            cocos2d::TurnOffTiles* ret = cocos2d::TurnOffTiles::create(arg0, arg1, arg2);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.TurnOffTiles");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 2)
        {

            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Size")) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::Size arg1;
            cocos2d::Size* ptr3 = nullptr; ok &= sqval_to_size(vm, 3, ptr3); arg1 = *ptr3;
            if (!ok) { break; }
            cocos2d::TurnOffTiles* ret = cocos2d::TurnOffTiles::create(arg0, arg1);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.TurnOffTiles");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d", "create", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_TurnOffTiles_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.TurnOffTiles", -1);
    return 1;
}

void squirrel_cocos2dx_TurnOffTiles_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::TurnOffTiles", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::TiledGrid3DAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::GridAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_TurnOffTiles(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("TurnOffTiles"), -1);


    sq_pushstring(vm, _SC("TiledGrid3DAction"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "turnOnTile", squirrel_cocos2dx_TurnOffTiles_turnOnTile);
    to_squirrel_function(vm, "turnOffTile", squirrel_cocos2dx_TurnOffTiles_turnOffTile);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_TurnOffTiles_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_TurnOffTiles_typeof_meta);



    squirrel_cocos2dx_TurnOffTiles_push_c_class(vm);

    std::string typeName = typeid(cocos2d::TurnOffTiles).name();
    g_sqType[typeName] = "cc.TurnOffTiles";

    return 1;
}
SQInteger squirrel_cocos2dx_TintTo_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 4)
    {
        float arg0;
        uint16_t arg1;
        uint16_t arg2;
        uint16_t arg3;
        ok &= sqval_to_float(vm, 2, &arg0);
        ok &= sqval_to_uint16(vm, 3, (uint16_t *)&arg1);
        ok &= sqval_to_uint16(vm, 4, (uint16_t *)&arg2);
        ok &= sqval_to_uint16(vm, 5, (uint16_t *)&arg3);
        if(!ok)
            return 0;
        cocos2d::TintTo* ret = cocos2d::TintTo::create(arg0, arg1, arg2, arg3);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.TintTo");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 4);
    return 0;
}

SQInteger squirrel_cocos2dx_TintTo_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.TintTo", -1);
    return 1;
}

void squirrel_cocos2dx_TintTo_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::TintTo", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_TintTo(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("TintTo"), -1);


    sq_pushstring(vm, _SC("ActionInterval"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_TintTo_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_TintTo_typeof_meta);



    squirrel_cocos2dx_TintTo_push_c_class(vm);

    std::string typeName = typeid(cocos2d::TintTo).name();
    g_sqType[typeName] = "cc.TintTo";

    return 1;
}
SQInteger squirrel_cocos2dx_CatmullRomTo_initWithDuration(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::CatmullRomTo* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_CatmullRomTo_initWithDuration'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        float arg0;
        cocos2d::PointArray* arg1;

        ok &= sqval_to_float(vm, 2, &arg0);

        ok &= sqval_to_object<cocos2d::PointArray>(vm, 3, &arg1);
        if (!ok)
            return 0;
        bool ret = cobj->initWithDuration(arg0, arg1);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "initWithDuration", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_CatmullRomTo_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.CatmullRomTo", -1);
    return 1;
}

void squirrel_cocos2dx_CatmullRomTo_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::CatmullRomTo", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::CardinalSplineTo", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_CatmullRomTo(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("CatmullRomTo"), -1);


    sq_pushstring(vm, _SC("CardinalSplineTo"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "initWithDuration", squirrel_cocos2dx_CatmullRomTo_initWithDuration);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_CatmullRomTo_typeof_meta);



    squirrel_cocos2dx_CatmullRomTo_push_c_class(vm);

    std::string typeName = typeid(cocos2d::CatmullRomTo).name();
    g_sqType[typeName] = "cc.CatmullRomTo";

    return 1;
}

SQInteger squirrel_cocos2dx_ActionInstant_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.ActionInstant", -1);
    return 1;
}

void squirrel_cocos2dx_ActionInstant_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::ActionInstant", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_ActionInstant(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("ActionInstant"), -1);


    sq_pushstring(vm, _SC("FiniteTimeAction"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }


    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_ActionInstant_typeof_meta);



    squirrel_cocos2dx_ActionInstant_push_c_class(vm);

    std::string typeName = typeid(cocos2d::ActionInstant).name();
    g_sqType[typeName] = "cc.ActionInstant";

    return 1;
}
SQInteger squirrel_cocos2dx_DrawNode_drawLine(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::DrawNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_DrawNode_drawLine'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 3) 
    {
        cocos2d::Vec2 arg0;
        cocos2d::Vec2 arg1;
        cocos2d::Color4F arg2;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;

        cocos2d::Vec2* ptr3 = nullptr; ok &= sqval_to_vec2(vm, 3, ptr3); arg1 = *ptr3;

        cocos2d::Color4F *ptr4 = nullptr; ok &=sqval_to_color4f(vm, 4, ptr4); arg2 = *ptr4;
        if (!ok)
            return 0;
        cobj->drawLine(arg0, arg1, arg2);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "drawLine", (int)argc, 3);
    return 0;
}
SQInteger squirrel_cocos2dx_DrawNode_drawPoints(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::DrawNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_DrawNode_drawPoints'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 3) 
    {
        const cocos2d::Vec2* arg0;
        unsigned int arg1;
        cocos2d::Color4F arg2;

        ok &= sqval_to_object<const cocos2d::Vec2>(vm, 2, &arg0);

        ok &= sqval_to_uint32(vm, 3, &arg1);

        cocos2d::Color4F *ptr4 = nullptr; ok &=sqval_to_color4f(vm, 4, ptr4); arg2 = *ptr4;
        if (!ok)
            return 0;
        cobj->drawPoints(arg0, arg1, arg2);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "drawPoints", (int)argc, 3);
    return 0;
}
SQInteger squirrel_cocos2dx_DrawNode_drawRect(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::DrawNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_DrawNode_drawRect'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 5) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Vec2")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Vec2")) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INSTANCE || ! instanceof_cclass(vm, 4, "cocos2d::Vec2")) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INSTANCE || ! instanceof_cclass(vm, 5, "cocos2d::Vec2")) {
                break;
            }
            if (sq_gettype(vm, 6) != OT_INSTANCE || ! instanceof_cclass(vm, 6, "cocos2d::Color4F")) {
                break;
            }

            cocos2d::Vec2 arg0;
            cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;

            if (!ok) { break; }
            cocos2d::Vec2 arg1;
            cocos2d::Vec2* ptr3 = nullptr; ok &= sqval_to_vec2(vm, 3, ptr3); arg1 = *ptr3;

            if (!ok) { break; }
            cocos2d::Vec2 arg2;
            cocos2d::Vec2* ptr4 = nullptr; ok &= sqval_to_vec2(vm, 4, ptr4); arg2 = *ptr4;

            if (!ok) { break; }
            cocos2d::Vec2 arg3;
            cocos2d::Vec2* ptr5 = nullptr; ok &= sqval_to_vec2(vm, 5, ptr5); arg3 = *ptr5;

            if (!ok) { break; }
            cocos2d::Color4F arg4;
            cocos2d::Color4F *ptr6 = nullptr; ok &=sqval_to_color4f(vm, 6, ptr6); arg4 = *ptr6;

            if (!ok) { break; }
            cobj->drawRect(arg0, arg1, arg2, arg3, arg4);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 3) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Vec2")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Vec2")) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INSTANCE || ! instanceof_cclass(vm, 4, "cocos2d::Color4F")) {
                break;
            }

            cocos2d::Vec2 arg0;
            cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;

            if (!ok) { break; }
            cocos2d::Vec2 arg1;
            cocos2d::Vec2* ptr3 = nullptr; ok &= sqval_to_vec2(vm, 3, ptr3); arg1 = *ptr3;

            if (!ok) { break; }
            cocos2d::Color4F arg2;
            cocos2d::Color4F *ptr4 = nullptr; ok &=sqval_to_color4f(vm, 4, ptr4); arg2 = *ptr4;

            if (!ok) { break; }
            cobj->drawRect(arg0, arg1, arg2);
            return 0;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "drawRect", (int)argc, 3);
    return 0;
}
SQInteger squirrel_cocos2dx_DrawNode_drawSolidCircle(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::DrawNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_DrawNode_drawSolidCircle'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 5) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Vec2")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INTEGER && sq_gettype(vm, 5) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 6) != OT_INSTANCE || ! instanceof_cclass(vm, 6, "cocos2d::Color4F")) {
                break;
            }

            cocos2d::Vec2 arg0;
            cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;

            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);

            if (!ok) { break; }
            float arg2;
            ok &= sqval_to_float(vm, 4, &arg2);

            if (!ok) { break; }
            unsigned int arg3;
            ok &= sqval_to_uint32(vm, 5, &arg3);

            if (!ok) { break; }
            cocos2d::Color4F arg4;
            cocos2d::Color4F *ptr6 = nullptr; ok &=sqval_to_color4f(vm, 6, ptr6); arg4 = *ptr6;

            if (!ok) { break; }
            cobj->drawSolidCircle(arg0, arg1, arg2, arg3, arg4);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 7) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Vec2")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INTEGER && sq_gettype(vm, 5) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 6) != OT_INTEGER && sq_gettype(vm, 6) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 7) != OT_INTEGER && sq_gettype(vm, 7) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 8) != OT_INSTANCE || ! instanceof_cclass(vm, 8, "cocos2d::Color4F")) {
                break;
            }

            cocos2d::Vec2 arg0;
            cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;

            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);

            if (!ok) { break; }
            float arg2;
            ok &= sqval_to_float(vm, 4, &arg2);

            if (!ok) { break; }
            unsigned int arg3;
            ok &= sqval_to_uint32(vm, 5, &arg3);

            if (!ok) { break; }
            float arg4;
            ok &= sqval_to_float(vm, 6, &arg4);

            if (!ok) { break; }
            float arg5;
            ok &= sqval_to_float(vm, 7, &arg5);

            if (!ok) { break; }
            cocos2d::Color4F arg6;
            cocos2d::Color4F *ptr8 = nullptr; ok &=sqval_to_color4f(vm, 8, ptr8); arg6 = *ptr8;

            if (!ok) { break; }
            cobj->drawSolidCircle(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
            return 0;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "drawSolidCircle", (int)argc, 7);
    return 0;
}
SQInteger squirrel_cocos2dx_DrawNode_onDrawGLPoint(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::DrawNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_DrawNode_onDrawGLPoint'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        cocos2d::Mat4 arg0;
        unsigned int arg1;

        cocos2d::Mat4 *ptr2 = nullptr; ok &= sqval_to_mat4(vm, 2, ptr2); arg0 = *ptr2;

        ok &= sqval_to_uint32(vm, 3, &arg1);
        if (!ok)
            return 0;
        cobj->onDrawGLPoint(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "onDrawGLPoint", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_DrawNode_drawDot(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::DrawNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_DrawNode_drawDot'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 3) 
    {
        cocos2d::Vec2 arg0;
        float arg1;
        cocos2d::Color4F arg2;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;

        ok &= sqval_to_float(vm, 3, &arg1);

        cocos2d::Color4F *ptr4 = nullptr; ok &=sqval_to_color4f(vm, 4, ptr4); arg2 = *ptr4;
        if (!ok)
            return 0;
        cobj->drawDot(arg0, arg1, arg2);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "drawDot", (int)argc, 3);
    return 0;
}
SQInteger squirrel_cocos2dx_DrawNode_drawCatmullRom(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::DrawNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_DrawNode_drawCatmullRom'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 3) 
    {
        cocos2d::PointArray* arg0;
        unsigned int arg1;
        cocos2d::Color4F arg2;

        ok &= sqval_to_object<cocos2d::PointArray>(vm, 2, &arg0);

        ok &= sqval_to_uint32(vm, 3, &arg1);

        cocos2d::Color4F *ptr4 = nullptr; ok &=sqval_to_color4f(vm, 4, ptr4); arg2 = *ptr4;
        if (!ok)
            return 0;
        cobj->drawCatmullRom(arg0, arg1, arg2);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "drawCatmullRom", (int)argc, 3);
    return 0;
}
SQInteger squirrel_cocos2dx_DrawNode_drawSegment(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::DrawNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_DrawNode_drawSegment'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 4) 
    {
        cocos2d::Vec2 arg0;
        cocos2d::Vec2 arg1;
        float arg2;
        cocos2d::Color4F arg3;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;

        cocos2d::Vec2* ptr3 = nullptr; ok &= sqval_to_vec2(vm, 3, ptr3); arg1 = *ptr3;

        ok &= sqval_to_float(vm, 4, &arg2);

        cocos2d::Color4F *ptr5 = nullptr; ok &=sqval_to_color4f(vm, 5, ptr5); arg3 = *ptr5;
        if (!ok)
            return 0;
        cobj->drawSegment(arg0, arg1, arg2, arg3);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "drawSegment", (int)argc, 4);
    return 0;
}
SQInteger squirrel_cocos2dx_DrawNode_onDraw(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::DrawNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_DrawNode_onDraw'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        cocos2d::Mat4 arg0;
        unsigned int arg1;

        cocos2d::Mat4 *ptr2 = nullptr; ok &= sqval_to_mat4(vm, 2, ptr2); arg0 = *ptr2;

        ok &= sqval_to_uint32(vm, 3, &arg1);
        if (!ok)
            return 0;
        cobj->onDraw(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "onDraw", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_DrawNode_drawCircle(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::DrawNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_DrawNode_drawCircle'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 6) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Vec2")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INTEGER && sq_gettype(vm, 5) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 6) != OT_BOOL) {
                break;
            }
            if (sq_gettype(vm, 7) != OT_INSTANCE || ! instanceof_cclass(vm, 7, "cocos2d::Color4F")) {
                break;
            }

            cocos2d::Vec2 arg0;
            cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;

            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);

            if (!ok) { break; }
            float arg2;
            ok &= sqval_to_float(vm, 4, &arg2);

            if (!ok) { break; }
            unsigned int arg3;
            ok &= sqval_to_uint32(vm, 5, &arg3);

            if (!ok) { break; }
            bool arg4;
            ok &= sqval_to_boolean(vm, 6, &arg4);

            if (!ok) { break; }
            cocos2d::Color4F arg5;
            cocos2d::Color4F *ptr7 = nullptr; ok &=sqval_to_color4f(vm, 7, ptr7); arg5 = *ptr7;

            if (!ok) { break; }
            cobj->drawCircle(arg0, arg1, arg2, arg3, arg4, arg5);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 8) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Vec2")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INTEGER && sq_gettype(vm, 5) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 6) != OT_BOOL) {
                break;
            }
            if (sq_gettype(vm, 7) != OT_INTEGER && sq_gettype(vm, 7) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 8) != OT_INTEGER && sq_gettype(vm, 8) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 9) != OT_INSTANCE || ! instanceof_cclass(vm, 9, "cocos2d::Color4F")) {
                break;
            }

            cocos2d::Vec2 arg0;
            cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;

            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);

            if (!ok) { break; }
            float arg2;
            ok &= sqval_to_float(vm, 4, &arg2);

            if (!ok) { break; }
            unsigned int arg3;
            ok &= sqval_to_uint32(vm, 5, &arg3);

            if (!ok) { break; }
            bool arg4;
            ok &= sqval_to_boolean(vm, 6, &arg4);

            if (!ok) { break; }
            float arg5;
            ok &= sqval_to_float(vm, 7, &arg5);

            if (!ok) { break; }
            float arg6;
            ok &= sqval_to_float(vm, 8, &arg6);

            if (!ok) { break; }
            cocos2d::Color4F arg7;
            cocos2d::Color4F *ptr9 = nullptr; ok &=sqval_to_color4f(vm, 9, ptr9); arg7 = *ptr9;

            if (!ok) { break; }
            cobj->drawCircle(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
            return 0;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "drawCircle", (int)argc, 8);
    return 0;
}
SQInteger squirrel_cocos2dx_DrawNode_drawQuadBezier(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::DrawNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_DrawNode_drawQuadBezier'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 5) 
    {
        cocos2d::Vec2 arg0;
        cocos2d::Vec2 arg1;
        cocos2d::Vec2 arg2;
        unsigned int arg3;
        cocos2d::Color4F arg4;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;

        cocos2d::Vec2* ptr3 = nullptr; ok &= sqval_to_vec2(vm, 3, ptr3); arg1 = *ptr3;

        cocos2d::Vec2* ptr4 = nullptr; ok &= sqval_to_vec2(vm, 4, ptr4); arg2 = *ptr4;

        ok &= sqval_to_uint32(vm, 5, &arg3);

        cocos2d::Color4F *ptr6 = nullptr; ok &=sqval_to_color4f(vm, 6, ptr6); arg4 = *ptr6;
        if (!ok)
            return 0;
        cobj->drawQuadBezier(arg0, arg1, arg2, arg3, arg4);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "drawQuadBezier", (int)argc, 5);
    return 0;
}
SQInteger squirrel_cocos2dx_DrawNode_onDrawGLLine(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::DrawNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_DrawNode_onDrawGLLine'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        cocos2d::Mat4 arg0;
        unsigned int arg1;

        cocos2d::Mat4 *ptr2 = nullptr; ok &= sqval_to_mat4(vm, 2, ptr2); arg0 = *ptr2;

        ok &= sqval_to_uint32(vm, 3, &arg1);
        if (!ok)
            return 0;
        cobj->onDrawGLLine(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "onDrawGLLine", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_DrawNode_drawSolidPoly(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::DrawNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_DrawNode_drawSolidPoly'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 3) 
    {
        const cocos2d::Vec2* arg0;
        unsigned int arg1;
        cocos2d::Color4F arg2;

        ok &= sqval_to_object<const cocos2d::Vec2>(vm, 2, &arg0);

        ok &= sqval_to_uint32(vm, 3, &arg1);

        cocos2d::Color4F *ptr4 = nullptr; ok &=sqval_to_color4f(vm, 4, ptr4); arg2 = *ptr4;
        if (!ok)
            return 0;
        cobj->drawSolidPoly(arg0, arg1, arg2);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "drawSolidPoly", (int)argc, 3);
    return 0;
}
SQInteger squirrel_cocos2dx_DrawNode_drawTriangle(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::DrawNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_DrawNode_drawTriangle'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 4) 
    {
        cocos2d::Vec2 arg0;
        cocos2d::Vec2 arg1;
        cocos2d::Vec2 arg2;
        cocos2d::Color4F arg3;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;

        cocos2d::Vec2* ptr3 = nullptr; ok &= sqval_to_vec2(vm, 3, ptr3); arg1 = *ptr3;

        cocos2d::Vec2* ptr4 = nullptr; ok &= sqval_to_vec2(vm, 4, ptr4); arg2 = *ptr4;

        cocos2d::Color4F *ptr5 = nullptr; ok &=sqval_to_color4f(vm, 5, ptr5); arg3 = *ptr5;
        if (!ok)
            return 0;
        cobj->drawTriangle(arg0, arg1, arg2, arg3);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "drawTriangle", (int)argc, 4);
    return 0;
}
SQInteger squirrel_cocos2dx_DrawNode_clear(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::DrawNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_DrawNode_clear'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->clear();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "clear", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_DrawNode_drawCardinalSpline(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::DrawNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_DrawNode_drawCardinalSpline'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 4) 
    {
        cocos2d::PointArray* arg0;
        float arg1;
        unsigned int arg2;
        cocos2d::Color4F arg3;

        ok &= sqval_to_object<cocos2d::PointArray>(vm, 2, &arg0);

        ok &= sqval_to_float(vm, 3, &arg1);

        ok &= sqval_to_uint32(vm, 4, &arg2);

        cocos2d::Color4F *ptr5 = nullptr; ok &=sqval_to_color4f(vm, 5, ptr5); arg3 = *ptr5;
        if (!ok)
            return 0;
        cobj->drawCardinalSpline(arg0, arg1, arg2, arg3);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "drawCardinalSpline", (int)argc, 4);
    return 0;
}
SQInteger squirrel_cocos2dx_DrawNode_drawSolidRect(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::DrawNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_DrawNode_drawSolidRect'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 3) 
    {
        cocos2d::Vec2 arg0;
        cocos2d::Vec2 arg1;
        cocos2d::Color4F arg2;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;

        cocos2d::Vec2* ptr3 = nullptr; ok &= sqval_to_vec2(vm, 3, ptr3); arg1 = *ptr3;

        cocos2d::Color4F *ptr4 = nullptr; ok &=sqval_to_color4f(vm, 4, ptr4); arg2 = *ptr4;
        if (!ok)
            return 0;
        cobj->drawSolidRect(arg0, arg1, arg2);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "drawSolidRect", (int)argc, 3);
    return 0;
}
SQInteger squirrel_cocos2dx_DrawNode_drawPoly(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::DrawNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_DrawNode_drawPoly'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 4) 
    {
        const cocos2d::Vec2* arg0;
        unsigned int arg1;
        bool arg2;
        cocos2d::Color4F arg3;

        ok &= sqval_to_object<const cocos2d::Vec2>(vm, 2, &arg0);

        ok &= sqval_to_uint32(vm, 3, &arg1);

        ok &= sqval_to_boolean(vm, 4, &arg2);

        cocos2d::Color4F *ptr5 = nullptr; ok &=sqval_to_color4f(vm, 5, ptr5); arg3 = *ptr5;
        if (!ok)
            return 0;
        cobj->drawPoly(arg0, arg1, arg2, arg3);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "drawPoly", (int)argc, 4);
    return 0;
}
SQInteger squirrel_cocos2dx_DrawNode_drawPoint(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::DrawNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_DrawNode_drawPoint'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 3) 
    {
        cocos2d::Vec2 arg0;
        float arg1;
        cocos2d::Color4F arg2;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;

        ok &= sqval_to_float(vm, 3, &arg1);

        cocos2d::Color4F *ptr4 = nullptr; ok &=sqval_to_color4f(vm, 4, ptr4); arg2 = *ptr4;
        if (!ok)
            return 0;
        cobj->drawPoint(arg0, arg1, arg2);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "drawPoint", (int)argc, 3);
    return 0;
}
SQInteger squirrel_cocos2dx_DrawNode_drawCubicBezier(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::DrawNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_DrawNode_drawCubicBezier'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 6) 
    {
        cocos2d::Vec2 arg0;
        cocos2d::Vec2 arg1;
        cocos2d::Vec2 arg2;
        cocos2d::Vec2 arg3;
        unsigned int arg4;
        cocos2d::Color4F arg5;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;

        cocos2d::Vec2* ptr3 = nullptr; ok &= sqval_to_vec2(vm, 3, ptr3); arg1 = *ptr3;

        cocos2d::Vec2* ptr4 = nullptr; ok &= sqval_to_vec2(vm, 4, ptr4); arg2 = *ptr4;

        cocos2d::Vec2* ptr5 = nullptr; ok &= sqval_to_vec2(vm, 5, ptr5); arg3 = *ptr5;

        ok &= sqval_to_uint32(vm, 6, &arg4);

        cocos2d::Color4F *ptr7 = nullptr; ok &=sqval_to_color4f(vm, 7, ptr7); arg5 = *ptr7;
        if (!ok)
            return 0;
        cobj->drawCubicBezier(arg0, arg1, arg2, arg3, arg4, arg5);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "drawCubicBezier", (int)argc, 6);
    return 0;
}
SQInteger squirrel_cocos2dx_DrawNode_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        cocos2d::DrawNode* ret = cocos2d::DrawNode::create();
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.DrawNode");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 0);
    return 0;
}

SQInteger squirrel_cocos2dx_DrawNode_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.DrawNode", -1);
    return 1;
}

void squirrel_cocos2dx_DrawNode_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::DrawNode", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_DrawNode(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("DrawNode"), -1);


    sq_pushstring(vm, _SC("Node"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "drawLine", squirrel_cocos2dx_DrawNode_drawLine);
    to_squirrel_function(vm, "drawPoints", squirrel_cocos2dx_DrawNode_drawPoints);
    to_squirrel_function(vm, "drawRect", squirrel_cocos2dx_DrawNode_drawRect);
    to_squirrel_function(vm, "drawSolidCircle", squirrel_cocos2dx_DrawNode_drawSolidCircle);
    to_squirrel_function(vm, "onDrawGLPoint", squirrel_cocos2dx_DrawNode_onDrawGLPoint);
    to_squirrel_function(vm, "drawDot", squirrel_cocos2dx_DrawNode_drawDot);
    to_squirrel_function(vm, "drawCatmullRom", squirrel_cocos2dx_DrawNode_drawCatmullRom);
    to_squirrel_function(vm, "drawSegment", squirrel_cocos2dx_DrawNode_drawSegment);
    to_squirrel_function(vm, "onDraw", squirrel_cocos2dx_DrawNode_onDraw);
    to_squirrel_function(vm, "drawCircle", squirrel_cocos2dx_DrawNode_drawCircle);
    to_squirrel_function(vm, "drawQuadBezier", squirrel_cocos2dx_DrawNode_drawQuadBezier);
    to_squirrel_function(vm, "onDrawGLLine", squirrel_cocos2dx_DrawNode_onDrawGLLine);
    to_squirrel_function(vm, "drawSolidPoly", squirrel_cocos2dx_DrawNode_drawSolidPoly);
    to_squirrel_function(vm, "drawTriangle", squirrel_cocos2dx_DrawNode_drawTriangle);
    to_squirrel_function(vm, "clear", squirrel_cocos2dx_DrawNode_clear);
    to_squirrel_function(vm, "drawCardinalSpline", squirrel_cocos2dx_DrawNode_drawCardinalSpline);
    to_squirrel_function(vm, "drawSolidRect", squirrel_cocos2dx_DrawNode_drawSolidRect);
    to_squirrel_function(vm, "drawPoly", squirrel_cocos2dx_DrawNode_drawPoly);
    to_squirrel_function(vm, "drawPoint", squirrel_cocos2dx_DrawNode_drawPoint);
    to_squirrel_function(vm, "drawCubicBezier", squirrel_cocos2dx_DrawNode_drawCubicBezier);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_DrawNode_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_DrawNode_typeof_meta);



    squirrel_cocos2dx_DrawNode_push_c_class(vm);

    std::string typeName = typeid(cocos2d::DrawNode).name();
    g_sqType[typeName] = "cc.DrawNode";

    return 1;
}
SQInteger squirrel_cocos2dx_TransitionFadeBL_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        float arg0;
        cocos2d::Scene* arg1;
        ok &= sqval_to_float(vm, 2, &arg0);
        ok &= sqval_to_object<cocos2d::Scene>(vm, 3, &arg1);
        if(!ok)
            return 0;
        cocos2d::TransitionFadeBL* ret = cocos2d::TransitionFadeBL::create(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.TransitionFadeBL");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_TransitionFadeBL_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.TransitionFadeBL", -1);
    return 1;
}

void squirrel_cocos2dx_TransitionFadeBL_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::TransitionFadeBL", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::TransitionFadeTR", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TransitionScene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Scene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TransitionEaseScene", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_TransitionFadeBL(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("TransitionFadeBL"), -1);


    sq_pushstring(vm, _SC("TransitionFadeTR"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_TransitionFadeBL_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_TransitionFadeBL_typeof_meta);



    squirrel_cocos2dx_TransitionFadeBL_push_c_class(vm);

    std::string typeName = typeid(cocos2d::TransitionFadeBL).name();
    g_sqType[typeName] = "cc.TransitionFadeBL";

    return 1;
}
SQInteger squirrel_cocos2dx_TargetedAction_getForcedTarget(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TargetedAction* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TargetedAction_getForcedTarget'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 0) {

            const cocos2d::Node* ret = cobj->getForcedTarget();
            object_to_sqval<cocos2d::Node>(vm, "cc.Node", (cocos2d::Node*)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 0) {

            cocos2d::Node* ret = cobj->getForcedTarget();
            object_to_sqval<cocos2d::Node>(vm, "cc.Node", (cocos2d::Node*)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getForcedTarget", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_TargetedAction_setForcedTarget(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TargetedAction* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TargetedAction_setForcedTarget'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Node* arg0;

        ok &= sqval_to_object<cocos2d::Node>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setForcedTarget(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setForcedTarget", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TargetedAction_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        cocos2d::Node* arg0;
        cocos2d::FiniteTimeAction* arg1;
        ok &= sqval_to_object<cocos2d::Node>(vm, 2, &arg0);
        ok &= sqval_to_object<cocos2d::FiniteTimeAction>(vm, 3, &arg1);
        if(!ok)
            return 0;
        cocos2d::TargetedAction* ret = cocos2d::TargetedAction::create(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.TargetedAction");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_TargetedAction_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.TargetedAction", -1);
    return 1;
}

void squirrel_cocos2dx_TargetedAction_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::TargetedAction", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_TargetedAction(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("TargetedAction"), -1);


    sq_pushstring(vm, _SC("ActionInterval"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "getForcedTarget", squirrel_cocos2dx_TargetedAction_getForcedTarget);
    to_squirrel_function(vm, "setForcedTarget", squirrel_cocos2dx_TargetedAction_setForcedTarget);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_TargetedAction_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_TargetedAction_typeof_meta);



    squirrel_cocos2dx_TargetedAction_push_c_class(vm);

    std::string typeName = typeid(cocos2d::TargetedAction).name();
    g_sqType[typeName] = "cc.TargetedAction";

    return 1;
}
SQInteger squirrel_cocos2dx_Quaternion_normalize(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Quaternion* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Quaternion_normalize'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->normalize();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "normalize", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Quaternion_toAxisAngle(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Quaternion* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Quaternion_toAxisAngle'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec3* arg0;

        ok &= sqval_to_object<cocos2d::Vec3>(vm, 2, &arg0);
        if (!ok)
            return 0;
        float ret = cobj->toAxisAngle(arg0);
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "toAxisAngle", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Quaternion_inverse(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Quaternion* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Quaternion_inverse'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->inverse();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "inverse", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Quaternion_getConjugated(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Quaternion* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Quaternion_getConjugated'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Quaternion ret = cobj->getConjugated();
        quaternion_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getConjugated", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Quaternion_multiply(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Quaternion* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Quaternion_multiply'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Quaternion arg0;

        cocos2d::Quaternion *ptr2 = nullptr; ok &= sqval_to_quaternion(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->multiply(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "multiply", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Quaternion_set(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Quaternion* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Quaternion_set'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_ARRAY) {
                break;
            }

            float* arg0;
            ok &= sqval_to_float_array(vm, 2, (const float **)&arg0);

            if (!ok) { break; }
            cobj->set(arg0);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 4) {
            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INTEGER && sq_gettype(vm, 5) != OT_FLOAT) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);

            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);

            if (!ok) { break; }
            float arg2;
            ok &= sqval_to_float(vm, 4, &arg2);

            if (!ok) { break; }
            float arg3;
            ok &= sqval_to_float(vm, 5, &arg3);

            if (!ok) { break; }
            cobj->set(arg0, arg1, arg2, arg3);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Mat4")) {
                break;
            }

            cocos2d::Mat4 arg0;
            cocos2d::Mat4 *ptr2 = nullptr; ok &= sqval_to_mat4(vm, 2, ptr2); arg0 = *ptr2;

            if (!ok) { break; }
            cobj->set(arg0);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Vec3")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }

            cocos2d::Vec3 arg0;
            cocos2d::Vec3* ptr2 = nullptr; ok &= sqval_to_vec3(vm, 2, ptr2); arg0 = *ptr2;

            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);

            if (!ok) { break; }
            cobj->set(arg0, arg1);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Quaternion")) {
                break;
            }

            cocos2d::Quaternion arg0;
            cocos2d::Quaternion *ptr2 = nullptr; ok &= sqval_to_quaternion(vm, 2, ptr2); arg0 = *ptr2;

            if (!ok) { break; }
            cobj->set(arg0);
            return 0;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "set", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Quaternion_isIdentity(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Quaternion* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Quaternion_isIdentity'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isIdentity();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isIdentity", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Quaternion_conjugate(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Quaternion* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Quaternion_conjugate'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->conjugate();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "conjugate", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Quaternion_isZero(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Quaternion* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Quaternion_isZero'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isZero();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isZero", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Quaternion_setIdentity(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Quaternion* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Quaternion_setIdentity'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->setIdentity();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setIdentity", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Quaternion_getNormalized(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Quaternion* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Quaternion_getNormalized'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Quaternion ret = cobj->getNormalized();
        quaternion_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getNormalized", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Quaternion_getInversed(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Quaternion* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Quaternion_getInversed'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Quaternion ret = cobj->getInversed();
        quaternion_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getInversed", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Quaternion_slerp_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 4)
    {
        cocos2d::Quaternion arg0;
        cocos2d::Quaternion arg1;
        float arg2;
        cocos2d::Quaternion* arg3;
        cocos2d::Quaternion *ptr2 = nullptr; ok &= sqval_to_quaternion(vm, 2, ptr2); arg0 = *ptr2;
        cocos2d::Quaternion *ptr3 = nullptr; ok &= sqval_to_quaternion(vm, 3, ptr3); arg1 = *ptr3;
        ok &= sqval_to_float(vm, 4, &arg2);
        ok &= sqval_to_quaternion(vm, 5, arg3);
        if(!ok)
            return 0;
        cocos2d::Quaternion::slerp(arg0, arg1, arg2, arg3);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "slerp", (int)argc, 4);
    return 0;
}
SQInteger squirrel_cocos2dx_Quaternion_createFromRotationMatrix_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        cocos2d::Mat4 arg0;
        cocos2d::Quaternion* arg1;
        cocos2d::Mat4 *ptr2 = nullptr; ok &= sqval_to_mat4(vm, 2, ptr2); arg0 = *ptr2;
        ok &= sqval_to_quaternion(vm, 3, arg1);
        if(!ok)
            return 0;
        cocos2d::Quaternion::createFromRotationMatrix(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "createFromRotationMatrix", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_Quaternion_lerp_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 4)
    {
        cocos2d::Quaternion arg0;
        cocos2d::Quaternion arg1;
        float arg2;
        cocos2d::Quaternion* arg3;
        cocos2d::Quaternion *ptr2 = nullptr; ok &= sqval_to_quaternion(vm, 2, ptr2); arg0 = *ptr2;
        cocos2d::Quaternion *ptr3 = nullptr; ok &= sqval_to_quaternion(vm, 3, ptr3); arg1 = *ptr3;
        ok &= sqval_to_float(vm, 4, &arg2);
        ok &= sqval_to_quaternion(vm, 5, arg3);
        if(!ok)
            return 0;
        cocos2d::Quaternion::lerp(arg0, arg1, arg2, arg3);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "lerp", (int)argc, 4);
    return 0;
}
SQInteger squirrel_cocos2dx_Quaternion_zero_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        const cocos2d::Quaternion& ret = cocos2d::Quaternion::zero();
        quaternion_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "zero", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Quaternion_createFromAxisAngle_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 3)
    {
        cocos2d::Vec3 arg0;
        float arg1;
        cocos2d::Quaternion* arg2;
        cocos2d::Vec3* ptr2 = nullptr; ok &= sqval_to_vec3(vm, 2, ptr2); arg0 = *ptr2;
        ok &= sqval_to_float(vm, 3, &arg1);
        ok &= sqval_to_quaternion(vm, 4, arg2);
        if(!ok)
            return 0;
        cocos2d::Quaternion::createFromAxisAngle(arg0, arg1, arg2);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "createFromAxisAngle", (int)argc, 3);
    return 0;
}
SQInteger squirrel_cocos2dx_Quaternion_multiply_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;

    if (sq_gettype(vm, 1) == OT_INSTANCE) {
        return squirrel_cocos2dx_Quaternion_multiply(vm);
    }

    argc = sq_gettop(vm) - 1;

    if (argc == 3)
    {
        cocos2d::Quaternion arg0;
        cocos2d::Quaternion arg1;
        cocos2d::Quaternion* arg2;
        cocos2d::Quaternion *ptr2 = nullptr; ok &= sqval_to_quaternion(vm, 2, ptr2); arg0 = *ptr2;
        cocos2d::Quaternion *ptr3 = nullptr; ok &= sqval_to_quaternion(vm, 3, ptr3); arg1 = *ptr3;
        ok &= sqval_to_quaternion(vm, 4, arg2);
        if(!ok)
            return 0;
        cocos2d::Quaternion::multiply(arg0, arg1, arg2);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "multiply", (int)argc, 3);
    return 0;
}
SQInteger squirrel_cocos2dx_Quaternion_squad_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 6)
    {
        cocos2d::Quaternion arg0;
        cocos2d::Quaternion arg1;
        cocos2d::Quaternion arg2;
        cocos2d::Quaternion arg3;
        float arg4;
        cocos2d::Quaternion* arg5;
        cocos2d::Quaternion *ptr2 = nullptr; ok &= sqval_to_quaternion(vm, 2, ptr2); arg0 = *ptr2;
        cocos2d::Quaternion *ptr3 = nullptr; ok &= sqval_to_quaternion(vm, 3, ptr3); arg1 = *ptr3;
        cocos2d::Quaternion *ptr4 = nullptr; ok &= sqval_to_quaternion(vm, 4, ptr4); arg2 = *ptr4;
        cocos2d::Quaternion *ptr5 = nullptr; ok &= sqval_to_quaternion(vm, 5, ptr5); arg3 = *ptr5;
        ok &= sqval_to_float(vm, 6, &arg4);
        ok &= sqval_to_quaternion(vm, 7, arg5);
        if(!ok)
            return 0;
        cocos2d::Quaternion::squad(arg0, arg1, arg2, arg3, arg4, arg5);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "squad", (int)argc, 6);
    return 0;
}
SQInteger squirrel_cocos2dx_Quaternion_identity_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        const cocos2d::Quaternion& ret = cocos2d::Quaternion::identity();
        quaternion_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "identity", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Quaternion_constructor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Quaternion* cobj = nullptr;
    bool ok  = true;

    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 4) {
            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INTEGER && sq_gettype(vm, 5) != OT_FLOAT) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);

            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);

            if (!ok) { break; }
            float arg2;
            ok &= sqval_to_float(vm, 4, &arg2);

            if (!ok) { break; }
            float arg3;
            ok &= sqval_to_float(vm, 5, &arg3);

            if (!ok) { break; }
            cobj = new cocos2d::Quaternion(arg0, arg1, arg2, arg3);
            sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
            sq_setreleasehook(vm, 1, squirrel_releasehook_Quaternion);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 0) {

            cobj = new cocos2d::Quaternion();
            sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
            sq_setreleasehook(vm, 1, squirrel_releasehook_Quaternion);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_ARRAY) {
                break;
            }

            float* arg0;
            ok &= sqval_to_float_array(vm, 2, (const float **)&arg0);

            if (!ok) { break; }
            cobj = new cocos2d::Quaternion(arg0);
            sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
            sq_setreleasehook(vm, 1, squirrel_releasehook_Quaternion);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Mat4")) {
                break;
            }

            cocos2d::Mat4 arg0;
            cocos2d::Mat4 *ptr2 = nullptr; ok &= sqval_to_mat4(vm, 2, ptr2); arg0 = *ptr2;

            if (!ok) { break; }
            cobj = new cocos2d::Quaternion(arg0);
            sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
            sq_setreleasehook(vm, 1, squirrel_releasehook_Quaternion);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Vec3")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }

            cocos2d::Vec3 arg0;
            cocos2d::Vec3* ptr2 = nullptr; ok &= sqval_to_vec3(vm, 2, ptr2); arg0 = *ptr2;

            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);

            if (!ok) { break; }
            cobj = new cocos2d::Quaternion(arg0, arg1);
            sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
            sq_setreleasehook(vm, 1, squirrel_releasehook_Quaternion);
            return 1;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "Quaternion", (int)argc, 2);
    return 0;
}


SQInteger squirrel_cocos2dx_Quaternion_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.Quaternion", -1);
    return 1;
}

SQInteger squirrel_cocos2dx_Quaternion_get_meta(HSQUIRRELVM vm)
{
    cocos2d::Quaternion *cobj = nullptr;
    if (SQ_FAILED(sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0))) {
        CCLOG("cocos2d::Quaternion sq_getinstanceup failed.");
        sq_pushnull(vm);
        return 1;
    }

    const char *varName = nullptr;
    sq_getstring(vm, 2, &varName);
    
    do {
        if (strcmp(varName, "x") == 0) {
            sq_pushfloat(vm, (SQFloat)cobj->x);
            break;
        }
        if (strcmp(varName, "y") == 0) {
            sq_pushfloat(vm, (SQFloat)cobj->y);
            break;
        }
        if (strcmp(varName, "z") == 0) {
            sq_pushfloat(vm, (SQFloat)cobj->z);
            break;
        }
        if (strcmp(varName, "w") == 0) {
            sq_pushfloat(vm, (SQFloat)cobj->w);
            break;
        }

        return 0;
        
    } while(0);

    return 1;
}

SQInteger squirrel_cocos2dx_Quaternion_set_meta(HSQUIRRELVM vm)
{
    cocos2d::Quaternion *cobj = nullptr;
    if (SQ_FAILED(sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0))) {
        CCLOG("cocos2d::Quaternion sq_getinstanceup failed.");
        return 0;
    }

    bool ok  = true;
    const char *varName = nullptr;
    sq_getstring(vm, 2, &varName);
    
    do {
        if (strcmp(varName, "x") == 0) {
            ok &= sqval_to_float(vm, 3, &cobj->x);
            if (! ok) {
                return 0;
            }
            break;
        }
        if (strcmp(varName, "y") == 0) {
            ok &= sqval_to_float(vm, 3, &cobj->y);
            if (! ok) {
                return 0;
            }
            break;
        }
        if (strcmp(varName, "z") == 0) {
            ok &= sqval_to_float(vm, 3, &cobj->z);
            if (! ok) {
                return 0;
            }
            break;
        }
        if (strcmp(varName, "w") == 0) {
            ok &= sqval_to_float(vm, 3, &cobj->w);
            if (! ok) {
                return 0;
            }
            break;
        }

        CCLOG("specified variable is not found in cocos2d::Quaternion");
    } while(0);

    return 0;
}

void squirrel_cocos2dx_Quaternion_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::Quaternion", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_Quaternion(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("Quaternion"), -1);

    sq_newclass(vm, SQFalse);

    to_squirrel_function(vm, "constructor", squirrel_cocos2dx_Quaternion_constructor);
    to_squirrel_function(vm, "normalize", squirrel_cocos2dx_Quaternion_normalize);
    to_squirrel_function(vm, "toAxisAngle", squirrel_cocos2dx_Quaternion_toAxisAngle);
    to_squirrel_function(vm, "inverse", squirrel_cocos2dx_Quaternion_inverse);
    to_squirrel_function(vm, "getConjugated", squirrel_cocos2dx_Quaternion_getConjugated);
    to_squirrel_function(vm, "set", squirrel_cocos2dx_Quaternion_set);
    to_squirrel_function(vm, "isIdentity", squirrel_cocos2dx_Quaternion_isIdentity);
    to_squirrel_function(vm, "conjugate", squirrel_cocos2dx_Quaternion_conjugate);
    to_squirrel_function(vm, "isZero", squirrel_cocos2dx_Quaternion_isZero);
    to_squirrel_function(vm, "setIdentity", squirrel_cocos2dx_Quaternion_setIdentity);
    to_squirrel_function(vm, "getNormalized", squirrel_cocos2dx_Quaternion_getNormalized);
    to_squirrel_function(vm, "getInversed", squirrel_cocos2dx_Quaternion_getInversed);
    to_squirrel_function(vm, "slerp", squirrel_cocos2dx_Quaternion_slerp_static, SQTrue);
    to_squirrel_function(vm, "createFromRotationMatrix", squirrel_cocos2dx_Quaternion_createFromRotationMatrix_static, SQTrue);
    to_squirrel_function(vm, "lerp", squirrel_cocos2dx_Quaternion_lerp_static, SQTrue);
    to_squirrel_function(vm, "zero", squirrel_cocos2dx_Quaternion_zero_static, SQTrue);
    to_squirrel_function(vm, "createFromAxisAngle", squirrel_cocos2dx_Quaternion_createFromAxisAngle_static, SQTrue);
    to_squirrel_function(vm, "multiply", squirrel_cocos2dx_Quaternion_multiply_static, SQTrue);
    to_squirrel_function(vm, "squad", squirrel_cocos2dx_Quaternion_squad_static, SQTrue);
    to_squirrel_function(vm, "identity", squirrel_cocos2dx_Quaternion_identity_static, SQTrue);

    to_squirrel_function(vm, "_get", squirrel_cocos2dx_Quaternion_get_meta);
    to_squirrel_function(vm, "_set", squirrel_cocos2dx_Quaternion_set_meta);
    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_Quaternion_typeof_meta);

    to_squirrel_variable_object(vm, "ZERO", (SQUserPointer)&cocos2d::Quaternion::ZERO, SQTrue);


    squirrel_cocos2dx_Quaternion_push_c_class(vm);

    std::string typeName = typeid(cocos2d::Quaternion).name();
    g_sqType[typeName] = "cc.Quaternion";

    return 1;
}
SQInteger squirrel_cocos2dx_Mesh_getMeshVertexAttribCount(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Mesh* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Mesh_getMeshVertexAttribCount'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        ssize_t ret = cobj->getMeshVertexAttribCount();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getMeshVertexAttribCount", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Mesh_setTexture(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Mesh* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Mesh_setTexture'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Texture2D")) {
                break;
            }

            cocos2d::Texture2D* arg0;
            ok &= sqval_to_object<cocos2d::Texture2D>(vm, 2, &arg0);

            if (!ok) { break; }
            cobj->setTexture(arg0);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);

            if (!ok) { break; }
            cobj->setTexture(arg0);
            return 0;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setTexture", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Mesh_getMeshIndexData(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Mesh* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Mesh_getMeshIndexData'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::MeshIndexData* ret = cobj->getMeshIndexData();
        object_to_sqval<cocos2d::MeshIndexData>(vm, "cc.MeshIndexData", (cocos2d::MeshIndexData*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getMeshIndexData", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Mesh_getTexture(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Mesh* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Mesh_getTexture'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Texture2D* ret = cobj->getTexture();
        object_to_sqval<cocos2d::Texture2D>(vm, "cc.Texture2D", (cocos2d::Texture2D*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getTexture", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Mesh_getSkin(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Mesh* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Mesh_getSkin'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::MeshSkin* ret = cobj->getSkin();
        object_to_sqval<cocos2d::MeshSkin>(vm, "cc.MeshSkin", (cocos2d::MeshSkin*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getSkin", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Mesh_getName(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Mesh* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Mesh_getName'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const std::string& ret = cobj->getName();
        sq_pushstring(vm, (const SQChar *)ret.c_str(), -1);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getName", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Mesh_setBlendFunc(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Mesh* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Mesh_setBlendFunc'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::BlendFunc arg0;

        cocos2d::BlendFunc *ptr2 = nullptr; ok &= sqval_to_blendfunc(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->setBlendFunc(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setBlendFunc", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Mesh_getIndexFormat(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Mesh* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Mesh_getIndexFormat'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        unsigned int ret = cobj->getIndexFormat();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getIndexFormat", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Mesh_getVertexSizeInBytes(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Mesh* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Mesh_getVertexSizeInBytes'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        int ret = cobj->getVertexSizeInBytes();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getVertexSizeInBytes", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Mesh_getBlendFunc(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Mesh* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Mesh_getBlendFunc'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::BlendFunc& ret = cobj->getBlendFunc();
        blendfunc_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getBlendFunc", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Mesh_getGLProgramState(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Mesh* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Mesh_getGLProgramState'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::GLProgramState* ret = cobj->getGLProgramState();
        object_to_sqval<cocos2d::GLProgramState>(vm, "cc.GLProgramState", (cocos2d::GLProgramState*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getGLProgramState", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Mesh_getIndexCount(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Mesh* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Mesh_getIndexCount'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        ssize_t ret = cobj->getIndexCount();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getIndexCount", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Mesh_getVertexBuffer(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Mesh* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Mesh_getVertexBuffer'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        unsigned int ret = cobj->getVertexBuffer();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getVertexBuffer", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Mesh_getMeshVertexAttribute(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Mesh* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Mesh_getMeshVertexAttribute'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        int arg0;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if (!ok)
            return 0;
        const cocos2d::MeshVertexAttrib& ret = cobj->getMeshVertexAttribute(arg0);
        mesh_vertex_attrib_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getMeshVertexAttribute", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Mesh_isVisible(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Mesh* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Mesh_isVisible'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isVisible();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isVisible", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Mesh_getIndexBuffer(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Mesh* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Mesh_getIndexBuffer'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        unsigned int ret = cobj->getIndexBuffer();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getIndexBuffer", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Mesh_hasVertexAttrib(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Mesh* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Mesh_hasVertexAttrib'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        int arg0;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if (!ok)
            return 0;
        bool ret = cobj->hasVertexAttrib(arg0);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "hasVertexAttrib", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Mesh_getPrimitiveType(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Mesh* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Mesh_getPrimitiveType'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        unsigned int ret = cobj->getPrimitiveType();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getPrimitiveType", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Mesh_setVisible(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Mesh* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Mesh_setVisible'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setVisible(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setVisible", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Mesh_getAABB(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Mesh* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Mesh_getAABB'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::AABB& ret = cobj->getAABB();
        aabb_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getAABB", (int)argc, 0);
    return 0;
}

SQInteger squirrel_cocos2dx_Mesh_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.Mesh", -1);
    return 1;
}

void squirrel_cocos2dx_Mesh_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::Mesh", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_Mesh(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("Mesh"), -1);


    sq_pushstring(vm, _SC("Ref"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "getMeshVertexAttribCount", squirrel_cocos2dx_Mesh_getMeshVertexAttribCount);
    to_squirrel_function(vm, "setTexture", squirrel_cocos2dx_Mesh_setTexture);
    to_squirrel_function(vm, "getMeshIndexData", squirrel_cocos2dx_Mesh_getMeshIndexData);
    to_squirrel_function(vm, "getTexture", squirrel_cocos2dx_Mesh_getTexture);
    to_squirrel_function(vm, "getSkin", squirrel_cocos2dx_Mesh_getSkin);
    to_squirrel_function(vm, "getName", squirrel_cocos2dx_Mesh_getName);
    to_squirrel_function(vm, "setBlendFunc", squirrel_cocos2dx_Mesh_setBlendFunc);
    to_squirrel_function(vm, "getIndexFormat", squirrel_cocos2dx_Mesh_getIndexFormat);
    to_squirrel_function(vm, "getVertexSizeInBytes", squirrel_cocos2dx_Mesh_getVertexSizeInBytes);
    to_squirrel_function(vm, "getBlendFunc", squirrel_cocos2dx_Mesh_getBlendFunc);
    to_squirrel_function(vm, "getGLProgramState", squirrel_cocos2dx_Mesh_getGLProgramState);
    to_squirrel_function(vm, "getIndexCount", squirrel_cocos2dx_Mesh_getIndexCount);
    to_squirrel_function(vm, "getVertexBuffer", squirrel_cocos2dx_Mesh_getVertexBuffer);
    to_squirrel_function(vm, "getMeshVertexAttribute", squirrel_cocos2dx_Mesh_getMeshVertexAttribute);
    to_squirrel_function(vm, "isVisible", squirrel_cocos2dx_Mesh_isVisible);
    to_squirrel_function(vm, "getIndexBuffer", squirrel_cocos2dx_Mesh_getIndexBuffer);
    to_squirrel_function(vm, "hasVertexAttrib", squirrel_cocos2dx_Mesh_hasVertexAttrib);
    to_squirrel_function(vm, "getPrimitiveType", squirrel_cocos2dx_Mesh_getPrimitiveType);
    to_squirrel_function(vm, "setVisible", squirrel_cocos2dx_Mesh_setVisible);
    to_squirrel_function(vm, "getAABB", squirrel_cocos2dx_Mesh_getAABB);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_Mesh_typeof_meta);



    squirrel_cocos2dx_Mesh_push_c_class(vm);

    std::string typeName = typeid(cocos2d::Mesh).name();
    g_sqType[typeName] = "cc.Mesh";

    return 1;
}
SQInteger squirrel_cocos2dx_TransitionTurnOffTiles_easeActionWithAction(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TransitionTurnOffTiles* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TransitionTurnOffTiles_easeActionWithAction'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::ActionInterval* arg0;

        ok &= sqval_to_object<cocos2d::ActionInterval>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cocos2d::ActionInterval* ret = cobj->easeActionWithAction(arg0);
        object_to_sqval<cocos2d::ActionInterval>(vm, "cc.ActionInterval", (cocos2d::ActionInterval*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "easeActionWithAction", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TransitionTurnOffTiles_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        float arg0;
        cocos2d::Scene* arg1;
        ok &= sqval_to_float(vm, 2, &arg0);
        ok &= sqval_to_object<cocos2d::Scene>(vm, 3, &arg1);
        if(!ok)
            return 0;
        cocos2d::TransitionTurnOffTiles* ret = cocos2d::TransitionTurnOffTiles::create(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.TransitionTurnOffTiles");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_TransitionTurnOffTiles_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.TransitionTurnOffTiles", -1);
    return 1;
}

void squirrel_cocos2dx_TransitionTurnOffTiles_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::TransitionTurnOffTiles", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::TransitionScene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Scene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TransitionEaseScene", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_TransitionTurnOffTiles(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("TransitionTurnOffTiles"), -1);


    sq_pushstring(vm, _SC("TransitionScene"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "easeActionWithAction", squirrel_cocos2dx_TransitionTurnOffTiles_easeActionWithAction);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_TransitionTurnOffTiles_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_TransitionTurnOffTiles_typeof_meta);



    squirrel_cocos2dx_TransitionTurnOffTiles_push_c_class(vm);

    std::string typeName = typeid(cocos2d::TransitionTurnOffTiles).name();
    g_sqType[typeName] = "cc.TransitionTurnOffTiles";

    return 1;
}
SQInteger squirrel_cocos2dx_RotateTo_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 2)
        {

            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);
            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);
            if (!ok) { break; }
            cocos2d::RotateTo* ret = cocos2d::RotateTo::create(arg0, arg1);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.RotateTo");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 3)
        {

            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);
            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);
            if (!ok) { break; }
            float arg2;
            ok &= sqval_to_float(vm, 4, &arg2);
            if (!ok) { break; }
            cocos2d::RotateTo* ret = cocos2d::RotateTo::create(arg0, arg1, arg2);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.RotateTo");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 2)
        {

            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Vec3")) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::Vec3 arg1;
            cocos2d::Vec3* ptr3 = nullptr; ok &= sqval_to_vec3(vm, 3, ptr3); arg1 = *ptr3;
            if (!ok) { break; }
            cocos2d::RotateTo* ret = cocos2d::RotateTo::create(arg0, arg1);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.RotateTo");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d", "create", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_RotateTo_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.RotateTo", -1);
    return 1;
}

void squirrel_cocos2dx_RotateTo_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::RotateTo", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_RotateTo(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("RotateTo"), -1);


    sq_pushstring(vm, _SC("ActionInterval"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_RotateTo_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_RotateTo_typeof_meta);



    squirrel_cocos2dx_RotateTo_push_c_class(vm);

    std::string typeName = typeid(cocos2d::RotateTo).name();
    g_sqType[typeName] = "cc.RotateTo";

    return 1;
}
SQInteger squirrel_cocos2dx_TransitionSplitRows_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        float arg0;
        cocos2d::Scene* arg1;
        ok &= sqval_to_float(vm, 2, &arg0);
        ok &= sqval_to_object<cocos2d::Scene>(vm, 3, &arg1);
        if(!ok)
            return 0;
        cocos2d::TransitionSplitRows* ret = cocos2d::TransitionSplitRows::create(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.TransitionSplitRows");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_TransitionSplitRows_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.TransitionSplitRows", -1);
    return 1;
}

void squirrel_cocos2dx_TransitionSplitRows_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::TransitionSplitRows", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::TransitionSplitCols", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TransitionScene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Scene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TransitionEaseScene", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_TransitionSplitRows(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("TransitionSplitRows"), -1);


    sq_pushstring(vm, _SC("TransitionSplitCols"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_TransitionSplitRows_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_TransitionSplitRows_typeof_meta);



    squirrel_cocos2dx_TransitionSplitRows_push_c_class(vm);

    std::string typeName = typeid(cocos2d::TransitionSplitRows).name();
    g_sqType[typeName] = "cc.TransitionSplitRows";

    return 1;
}
SQInteger squirrel_cocos2dx_TransitionProgressRadialCCW_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        float arg0;
        cocos2d::Scene* arg1;
        ok &= sqval_to_float(vm, 2, &arg0);
        ok &= sqval_to_object<cocos2d::Scene>(vm, 3, &arg1);
        if(!ok)
            return 0;
        cocos2d::TransitionProgressRadialCCW* ret = cocos2d::TransitionProgressRadialCCW::create(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.TransitionProgressRadialCCW");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_TransitionProgressRadialCCW_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.TransitionProgressRadialCCW", -1);
    return 1;
}

void squirrel_cocos2dx_TransitionProgressRadialCCW_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::TransitionProgressRadialCCW", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::TransitionProgress", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TransitionScene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Scene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_TransitionProgressRadialCCW(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("TransitionProgressRadialCCW"), -1);


    sq_pushstring(vm, _SC("TransitionProgress"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_TransitionProgressRadialCCW_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_TransitionProgressRadialCCW_typeof_meta);



    squirrel_cocos2dx_TransitionProgressRadialCCW_push_c_class(vm);

    std::string typeName = typeid(cocos2d::TransitionProgressRadialCCW).name();
    g_sqType[typeName] = "cc.TransitionProgressRadialCCW";

    return 1;
}
SQInteger squirrel_cocos2dx_EventListenerFocus_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        cocos2d::EventListenerFocus* ret = cocos2d::EventListenerFocus::create();
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.EventListenerFocus");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 0);
    return 0;
}

SQInteger squirrel_cocos2dx_EventListenerFocus_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.EventListenerFocus", -1);
    return 1;
}

SQInteger squirrel_cocos2dx_EventListenerFocus_get_meta(HSQUIRRELVM vm)
{
    cocos2d::EventListenerFocus *cobj = nullptr;
    if (SQ_FAILED(sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0))) {
        CCLOG("cocos2d::EventListenerFocus sq_getinstanceup failed.");
        sq_pushnull(vm);
        return 1;
    }

    const char *varName = nullptr;
    sq_getstring(vm, 2, &varName);
    
    do {
        if (strcmp(varName, "onFocusChanged") == 0) {
            ccfunction_to_sqval(vm, cobj, "onFocusChanged");
            break;
        }

        return 0;
        
    } while(0);

    return 1;
}

SQInteger squirrel_cocos2dx_EventListenerFocus_set_meta(HSQUIRRELVM vm)
{
    cocos2d::EventListenerFocus *cobj = nullptr;
    if (SQ_FAILED(sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0))) {
        CCLOG("cocos2d::EventListenerFocus sq_getinstanceup failed.");
        return 0;
    }

    bool ok  = true;
    const char *varName = nullptr;
    sq_getstring(vm, 2, &varName);
    
    do {
        if (strcmp(varName, "onFocusChanged") == 0) {
            HSQOBJECT callback3;
            sq_getstackobj(vm, 3, &callback3);
            do {
			    // Lambda binding for squirrel
			    cobj->onFocusChanged = [vm, callback3](cocos2d::ui::Widget* larg0, cocos2d::ui::Widget* larg1) -> void {
			        if (sq_getrefcount(vm, (HSQOBJECT *)&callback3) > 0) {
			            sq_pushobject(vm, callback3);
			            sq_push(vm, 1);
			            object_to_sqval<cocos2d::ui::Widget>(vm, "ccui.Widget", (cocos2d::ui::Widget*)larg0);
			            object_to_sqval<cocos2d::ui::Widget>(vm, "ccui.Widget", (cocos2d::ui::Widget*)larg1);
			            sq_call(vm, 3, SQFalse, SQTrue);
			            sq_poptop(vm);
			        }
			    };
			} while(0);
            if (! ok) {
                return 0;
            }
            _SquirrelObject *sqobj = (_SquirrelObject *)cobj->_scriptObject;
            sqobj->addClosure("onFocusChanged", callback3);
            break;
        }

        CCLOG("specified variable is not found in cocos2d::EventListenerFocus");
    } while(0);

    return 0;
}

void squirrel_cocos2dx_EventListenerFocus_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::EventListenerFocus", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::EventListener", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_EventListenerFocus(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("EventListenerFocus"), -1);


    sq_pushstring(vm, _SC("EventListener"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_EventListenerFocus_create_static, SQTrue);

    to_squirrel_function(vm, "_get", squirrel_cocos2dx_EventListenerFocus_get_meta);
    to_squirrel_function(vm, "_set", squirrel_cocos2dx_EventListenerFocus_set_meta);
    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_EventListenerFocus_typeof_meta);

    to_squirrel_variable_string(vm, "LISTENER_ID", cocos2d::EventListenerFocus::LISTENER_ID, SQTrue);


    squirrel_cocos2dx_EventListenerFocus_push_c_class(vm);

    std::string typeName = typeid(cocos2d::EventListenerFocus).name();
    g_sqType[typeName] = "cc.EventListenerFocus";

    return 1;
}
SQInteger squirrel_cocos2dx_TransitionPageTurn_actionWithSize(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TransitionPageTurn* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TransitionPageTurn_actionWithSize'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Size arg0;

        cocos2d::Size* ptr2 = nullptr; ok &= sqval_to_size(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cocos2d::ActionInterval* ret = cobj->actionWithSize(arg0);
        object_to_sqval<cocos2d::ActionInterval>(vm, "cc.ActionInterval", (cocos2d::ActionInterval*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "actionWithSize", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TransitionPageTurn_initWithDuration(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TransitionPageTurn* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TransitionPageTurn_initWithDuration'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 3) 
    {
        float arg0;
        cocos2d::Scene* arg1;
        bool arg2;

        ok &= sqval_to_float(vm, 2, &arg0);

        ok &= sqval_to_object<cocos2d::Scene>(vm, 3, &arg1);

        ok &= sqval_to_boolean(vm, 4, &arg2);
        if (!ok)
            return 0;
        bool ret = cobj->initWithDuration(arg0, arg1, arg2);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "initWithDuration", (int)argc, 3);
    return 0;
}
SQInteger squirrel_cocos2dx_TransitionPageTurn_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 3)
    {
        float arg0;
        cocos2d::Scene* arg1;
        bool arg2;
        ok &= sqval_to_float(vm, 2, &arg0);
        ok &= sqval_to_object<cocos2d::Scene>(vm, 3, &arg1);
        ok &= sqval_to_boolean(vm, 4, &arg2);
        if(!ok)
            return 0;
        cocos2d::TransitionPageTurn* ret = cocos2d::TransitionPageTurn::create(arg0, arg1, arg2);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.TransitionPageTurn");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 3);
    return 0;
}

SQInteger squirrel_cocos2dx_TransitionPageTurn_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.TransitionPageTurn", -1);
    return 1;
}

void squirrel_cocos2dx_TransitionPageTurn_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::TransitionPageTurn", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::TransitionScene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Scene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_TransitionPageTurn(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("TransitionPageTurn"), -1);


    sq_pushstring(vm, _SC("TransitionScene"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "actionWithSize", squirrel_cocos2dx_TransitionPageTurn_actionWithSize);
    to_squirrel_function(vm, "initWithDuration", squirrel_cocos2dx_TransitionPageTurn_initWithDuration);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_TransitionPageTurn_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_TransitionPageTurn_typeof_meta);



    squirrel_cocos2dx_TransitionPageTurn_push_c_class(vm);

    std::string typeName = typeid(cocos2d::TransitionPageTurn).name();
    g_sqType[typeName] = "cc.TransitionPageTurn";

    return 1;
}

SQInteger squirrel_cocos2dx_BezierTo_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.BezierTo", -1);
    return 1;
}

void squirrel_cocos2dx_BezierTo_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::BezierTo", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::BezierBy", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_BezierTo(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("BezierTo"), -1);


    sq_pushstring(vm, _SC("BezierBy"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }


    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_BezierTo_typeof_meta);



    squirrel_cocos2dx_BezierTo_push_c_class(vm);

    std::string typeName = typeid(cocos2d::BezierTo).name();
    g_sqType[typeName] = "cc.BezierTo";

    return 1;
}
SQInteger squirrel_cocos2dx_Menu_setEnabled(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Menu* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Menu_setEnabled'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setEnabled(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setEnabled", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Menu_alignItemsVertically(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Menu* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Menu_alignItemsVertically'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->alignItemsVertically();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "alignItemsVertically", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Menu_onTouchEnded(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Menu* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Menu_onTouchEnded'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        cocos2d::Touch* arg0;
        cocos2d::Event* arg1;

        ok &= sqval_to_object<cocos2d::Touch>(vm, 2, &arg0);

        ok &= sqval_to_object<cocos2d::Event>(vm, 3, &arg1);
        if (!ok)
            return 0;
        cobj->onTouchEnded(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "onTouchEnded", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_Menu_onTouchMoved(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Menu* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Menu_onTouchMoved'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        cocos2d::Touch* arg0;
        cocos2d::Event* arg1;

        ok &= sqval_to_object<cocos2d::Touch>(vm, 2, &arg0);

        ok &= sqval_to_object<cocos2d::Event>(vm, 3, &arg1);
        if (!ok)
            return 0;
        cobj->onTouchMoved(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "onTouchMoved", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_Menu_isEnabled(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Menu* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Menu_isEnabled'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isEnabled();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isEnabled", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Menu_onTouchCancelled(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Menu* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Menu_onTouchCancelled'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        cocos2d::Touch* arg0;
        cocos2d::Event* arg1;

        ok &= sqval_to_object<cocos2d::Touch>(vm, 2, &arg0);

        ok &= sqval_to_object<cocos2d::Event>(vm, 3, &arg1);
        if (!ok)
            return 0;
        cobj->onTouchCancelled(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "onTouchCancelled", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_Menu_onTouchBegan(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Menu* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Menu_onTouchBegan'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        cocos2d::Touch* arg0;
        cocos2d::Event* arg1;

        ok &= sqval_to_object<cocos2d::Touch>(vm, 2, &arg0);

        ok &= sqval_to_object<cocos2d::Event>(vm, 3, &arg1);
        if (!ok)
            return 0;
        bool ret = cobj->onTouchBegan(arg0, arg1);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "onTouchBegan", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_Menu_alignItemsHorizontally(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Menu* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Menu_alignItemsHorizontally'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->alignItemsHorizontally();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "alignItemsHorizontally", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Menu_alignItemsHorizontallyWithPadding(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Menu* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Menu_alignItemsHorizontallyWithPadding'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->alignItemsHorizontallyWithPadding(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "alignItemsHorizontallyWithPadding", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Menu_alignItemsVerticallyWithPadding(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Menu* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Menu_alignItemsVerticallyWithPadding'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->alignItemsVerticallyWithPadding(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "alignItemsVerticallyWithPadding", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Menu_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 1)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::MenuItem")) {
                break;
            }

            cocos2d::MenuItem* arg0;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::Menu* ret = cocos2d::Menu::create(arg0, NULL);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.Menu");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
        if (argc == 2)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::MenuItem")) {
                break;
            }

            cocos2d::MenuItem* arg0;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::MenuItem* arg1;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 3, &arg1);
            if (!ok) { break; }
            cocos2d::Menu* ret = cocos2d::Menu::create(arg0, arg1, NULL);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.Menu");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
        if (argc == 3)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INSTANCE || ! instanceof_cclass(vm, 4, "cocos2d::MenuItem")) {
                break;
            }

            cocos2d::MenuItem* arg0;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::MenuItem* arg1;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 3, &arg1);
            if (!ok) { break; }
            cocos2d::MenuItem* arg2;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 4, &arg2);
            if (!ok) { break; }
            cocos2d::Menu* ret = cocos2d::Menu::create(arg0, arg1, arg2, NULL);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.Menu");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
        if (argc == 4)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INSTANCE || ! instanceof_cclass(vm, 4, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INSTANCE || ! instanceof_cclass(vm, 5, "cocos2d::MenuItem")) {
                break;
            }

            cocos2d::MenuItem* arg0;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::MenuItem* arg1;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 3, &arg1);
            if (!ok) { break; }
            cocos2d::MenuItem* arg2;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 4, &arg2);
            if (!ok) { break; }
            cocos2d::MenuItem* arg3;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 5, &arg3);
            if (!ok) { break; }
            cocos2d::Menu* ret = cocos2d::Menu::create(arg0, arg1, arg2, arg3, NULL);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.Menu");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
        if (argc == 5)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INSTANCE || ! instanceof_cclass(vm, 4, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INSTANCE || ! instanceof_cclass(vm, 5, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 6) != OT_INSTANCE || ! instanceof_cclass(vm, 6, "cocos2d::MenuItem")) {
                break;
            }

            cocos2d::MenuItem* arg0;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::MenuItem* arg1;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 3, &arg1);
            if (!ok) { break; }
            cocos2d::MenuItem* arg2;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 4, &arg2);
            if (!ok) { break; }
            cocos2d::MenuItem* arg3;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 5, &arg3);
            if (!ok) { break; }
            cocos2d::MenuItem* arg4;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 6, &arg4);
            if (!ok) { break; }
            cocos2d::Menu* ret = cocos2d::Menu::create(arg0, arg1, arg2, arg3, arg4, NULL);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.Menu");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
        if (argc == 6)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INSTANCE || ! instanceof_cclass(vm, 4, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INSTANCE || ! instanceof_cclass(vm, 5, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 6) != OT_INSTANCE || ! instanceof_cclass(vm, 6, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 7) != OT_INSTANCE || ! instanceof_cclass(vm, 7, "cocos2d::MenuItem")) {
                break;
            }

            cocos2d::MenuItem* arg0;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::MenuItem* arg1;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 3, &arg1);
            if (!ok) { break; }
            cocos2d::MenuItem* arg2;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 4, &arg2);
            if (!ok) { break; }
            cocos2d::MenuItem* arg3;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 5, &arg3);
            if (!ok) { break; }
            cocos2d::MenuItem* arg4;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 6, &arg4);
            if (!ok) { break; }
            cocos2d::MenuItem* arg5;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 7, &arg5);
            if (!ok) { break; }
            cocos2d::Menu* ret = cocos2d::Menu::create(arg0, arg1, arg2, arg3, arg4, arg5, NULL);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.Menu");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
        if (argc == 7)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INSTANCE || ! instanceof_cclass(vm, 4, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INSTANCE || ! instanceof_cclass(vm, 5, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 6) != OT_INSTANCE || ! instanceof_cclass(vm, 6, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 7) != OT_INSTANCE || ! instanceof_cclass(vm, 7, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 8) != OT_INSTANCE || ! instanceof_cclass(vm, 8, "cocos2d::MenuItem")) {
                break;
            }

            cocos2d::MenuItem* arg0;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::MenuItem* arg1;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 3, &arg1);
            if (!ok) { break; }
            cocos2d::MenuItem* arg2;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 4, &arg2);
            if (!ok) { break; }
            cocos2d::MenuItem* arg3;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 5, &arg3);
            if (!ok) { break; }
            cocos2d::MenuItem* arg4;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 6, &arg4);
            if (!ok) { break; }
            cocos2d::MenuItem* arg5;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 7, &arg5);
            if (!ok) { break; }
            cocos2d::MenuItem* arg6;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 8, &arg6);
            if (!ok) { break; }
            cocos2d::Menu* ret = cocos2d::Menu::create(arg0, arg1, arg2, arg3, arg4, arg5, arg6, NULL);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.Menu");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
        if (argc == 8)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INSTANCE || ! instanceof_cclass(vm, 4, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INSTANCE || ! instanceof_cclass(vm, 5, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 6) != OT_INSTANCE || ! instanceof_cclass(vm, 6, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 7) != OT_INSTANCE || ! instanceof_cclass(vm, 7, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 8) != OT_INSTANCE || ! instanceof_cclass(vm, 8, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 9) != OT_INSTANCE || ! instanceof_cclass(vm, 9, "cocos2d::MenuItem")) {
                break;
            }

            cocos2d::MenuItem* arg0;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::MenuItem* arg1;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 3, &arg1);
            if (!ok) { break; }
            cocos2d::MenuItem* arg2;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 4, &arg2);
            if (!ok) { break; }
            cocos2d::MenuItem* arg3;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 5, &arg3);
            if (!ok) { break; }
            cocos2d::MenuItem* arg4;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 6, &arg4);
            if (!ok) { break; }
            cocos2d::MenuItem* arg5;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 7, &arg5);
            if (!ok) { break; }
            cocos2d::MenuItem* arg6;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 8, &arg6);
            if (!ok) { break; }
            cocos2d::MenuItem* arg7;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 9, &arg7);
            if (!ok) { break; }
            cocos2d::Menu* ret = cocos2d::Menu::create(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, NULL);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.Menu");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
        if (argc == 9)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INSTANCE || ! instanceof_cclass(vm, 4, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INSTANCE || ! instanceof_cclass(vm, 5, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 6) != OT_INSTANCE || ! instanceof_cclass(vm, 6, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 7) != OT_INSTANCE || ! instanceof_cclass(vm, 7, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 8) != OT_INSTANCE || ! instanceof_cclass(vm, 8, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 9) != OT_INSTANCE || ! instanceof_cclass(vm, 9, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 10) != OT_INSTANCE || ! instanceof_cclass(vm, 10, "cocos2d::MenuItem")) {
                break;
            }

            cocos2d::MenuItem* arg0;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::MenuItem* arg1;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 3, &arg1);
            if (!ok) { break; }
            cocos2d::MenuItem* arg2;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 4, &arg2);
            if (!ok) { break; }
            cocos2d::MenuItem* arg3;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 5, &arg3);
            if (!ok) { break; }
            cocos2d::MenuItem* arg4;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 6, &arg4);
            if (!ok) { break; }
            cocos2d::MenuItem* arg5;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 7, &arg5);
            if (!ok) { break; }
            cocos2d::MenuItem* arg6;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 8, &arg6);
            if (!ok) { break; }
            cocos2d::MenuItem* arg7;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 9, &arg7);
            if (!ok) { break; }
            cocos2d::MenuItem* arg8;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 10, &arg8);
            if (!ok) { break; }
            cocos2d::Menu* ret = cocos2d::Menu::create(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, NULL);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.Menu");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
        if (argc == 10)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INSTANCE || ! instanceof_cclass(vm, 4, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INSTANCE || ! instanceof_cclass(vm, 5, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 6) != OT_INSTANCE || ! instanceof_cclass(vm, 6, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 7) != OT_INSTANCE || ! instanceof_cclass(vm, 7, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 8) != OT_INSTANCE || ! instanceof_cclass(vm, 8, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 9) != OT_INSTANCE || ! instanceof_cclass(vm, 9, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 10) != OT_INSTANCE || ! instanceof_cclass(vm, 10, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 11) != OT_INSTANCE || ! instanceof_cclass(vm, 11, "cocos2d::MenuItem")) {
                break;
            }

            cocos2d::MenuItem* arg0;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::MenuItem* arg1;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 3, &arg1);
            if (!ok) { break; }
            cocos2d::MenuItem* arg2;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 4, &arg2);
            if (!ok) { break; }
            cocos2d::MenuItem* arg3;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 5, &arg3);
            if (!ok) { break; }
            cocos2d::MenuItem* arg4;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 6, &arg4);
            if (!ok) { break; }
            cocos2d::MenuItem* arg5;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 7, &arg5);
            if (!ok) { break; }
            cocos2d::MenuItem* arg6;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 8, &arg6);
            if (!ok) { break; }
            cocos2d::MenuItem* arg7;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 9, &arg7);
            if (!ok) { break; }
            cocos2d::MenuItem* arg8;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 10, &arg8);
            if (!ok) { break; }
            cocos2d::MenuItem* arg9;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 11, &arg9);
            if (!ok) { break; }
            cocos2d::Menu* ret = cocos2d::Menu::create(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, NULL);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.Menu");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 0)
        {


            cocos2d::Menu* ret = cocos2d::Menu::create();
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.Menu");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d", "create", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Menu_createWithArray_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        cocos2d::Vector<cocos2d::MenuItem *> arg0;
        ok &= sqval_to_ccvector(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::Menu* ret = cocos2d::Menu::createWithArray(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.Menu");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "createWithArray", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Menu_createWithItem_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        cocos2d::MenuItem* arg0;
        ok &= sqval_to_object<cocos2d::MenuItem>(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::Menu* ret = cocos2d::Menu::createWithItem(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.Menu");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "createWithItem", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_Menu_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.Menu", -1);
    return 1;
}

void squirrel_cocos2dx_Menu_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::Menu", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Layer", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_Menu(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("Menu"), -1);


    sq_pushstring(vm, _SC("Layer"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "setEnabled", squirrel_cocos2dx_Menu_setEnabled);
    to_squirrel_function(vm, "alignItemsVertically", squirrel_cocos2dx_Menu_alignItemsVertically);
    to_squirrel_function(vm, "onTouchEnded", squirrel_cocos2dx_Menu_onTouchEnded);
    to_squirrel_function(vm, "onTouchMoved", squirrel_cocos2dx_Menu_onTouchMoved);
    to_squirrel_function(vm, "isEnabled", squirrel_cocos2dx_Menu_isEnabled);
    to_squirrel_function(vm, "onTouchCancelled", squirrel_cocos2dx_Menu_onTouchCancelled);
    to_squirrel_function(vm, "onTouchBegan", squirrel_cocos2dx_Menu_onTouchBegan);
    to_squirrel_function(vm, "alignItemsHorizontally", squirrel_cocos2dx_Menu_alignItemsHorizontally);
    to_squirrel_function(vm, "alignItemsHorizontallyWithPadding", squirrel_cocos2dx_Menu_alignItemsHorizontallyWithPadding);
    to_squirrel_function(vm, "alignItemsVerticallyWithPadding", squirrel_cocos2dx_Menu_alignItemsVerticallyWithPadding);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_Menu_create_static, SQTrue);
    to_squirrel_function(vm, "createWithArray", squirrel_cocos2dx_Menu_createWithArray_static, SQTrue);
    to_squirrel_function(vm, "createWithItem", squirrel_cocos2dx_Menu_createWithItem_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_Menu_typeof_meta);


    sq_pushstring(vm, _SC("State"), -1);
    sq_newtable(vm);
    to_squirrel_variable_integer(vm, "WAITING", (SQInteger)cocos2d::Menu::State::WAITING, SQTrue);
    to_squirrel_variable_integer(vm, "TRACKING_TOUCH", (SQInteger)cocos2d::Menu::State::TRACKING_TOUCH, SQTrue);
    sq_newslot(vm, -3, SQTrue);

    squirrel_cocos2dx_Menu_push_c_class(vm);

    std::string typeName = typeid(cocos2d::Menu).name();
    g_sqType[typeName] = "cc.Menu";

    return 1;
}
SQInteger squirrel_cocos2dx_SpriteFrame_clone(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::SpriteFrame* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_SpriteFrame_clone'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::SpriteFrame* ret = cobj->clone();
        object_to_sqval<cocos2d::SpriteFrame>(vm, "cc.SpriteFrame", (cocos2d::SpriteFrame*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "clone", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_SpriteFrame_setRotated(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::SpriteFrame* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_SpriteFrame_setRotated'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setRotated(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setRotated", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_SpriteFrame_setTexture(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::SpriteFrame* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_SpriteFrame_setTexture'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Texture2D* arg0;

        ok &= sqval_to_object<cocos2d::Texture2D>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setTexture(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setTexture", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_SpriteFrame_getOffset(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::SpriteFrame* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_SpriteFrame_getOffset'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::Vec2& ret = cobj->getOffset();
        vec2_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getOffset", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_SpriteFrame_setRectInPixels(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::SpriteFrame* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_SpriteFrame_setRectInPixels'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Rect arg0;

        cocos2d::Rect* ptr2 = nullptr; ok &= sqval_to_rect(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->setRectInPixels(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setRectInPixels", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_SpriteFrame_getTexture(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::SpriteFrame* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_SpriteFrame_getTexture'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Texture2D* ret = cobj->getTexture();
        object_to_sqval<cocos2d::Texture2D>(vm, "cc.Texture2D", (cocos2d::Texture2D*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getTexture", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_SpriteFrame_getRect(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::SpriteFrame* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_SpriteFrame_getRect'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::Rect& ret = cobj->getRect();
        rect_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getRect", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_SpriteFrame_setOffsetInPixels(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::SpriteFrame* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_SpriteFrame_setOffsetInPixels'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec2 arg0;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->setOffsetInPixels(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setOffsetInPixels", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_SpriteFrame_getRectInPixels(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::SpriteFrame* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_SpriteFrame_getRectInPixels'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::Rect& ret = cobj->getRectInPixels();
        rect_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getRectInPixels", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_SpriteFrame_setOriginalSize(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::SpriteFrame* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_SpriteFrame_setOriginalSize'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Size arg0;

        cocos2d::Size* ptr2 = nullptr; ok &= sqval_to_size(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->setOriginalSize(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setOriginalSize", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_SpriteFrame_getOriginalSizeInPixels(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::SpriteFrame* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_SpriteFrame_getOriginalSizeInPixels'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::Size& ret = cobj->getOriginalSizeInPixels();
        size_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getOriginalSizeInPixels", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_SpriteFrame_setOriginalSizeInPixels(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::SpriteFrame* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_SpriteFrame_setOriginalSizeInPixels'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Size arg0;

        cocos2d::Size* ptr2 = nullptr; ok &= sqval_to_size(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->setOriginalSizeInPixels(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setOriginalSizeInPixels", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_SpriteFrame_setOffset(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::SpriteFrame* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_SpriteFrame_setOffset'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec2 arg0;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->setOffset(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setOffset", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_SpriteFrame_isRotated(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::SpriteFrame* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_SpriteFrame_isRotated'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isRotated();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isRotated", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_SpriteFrame_setRect(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::SpriteFrame* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_SpriteFrame_setRect'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Rect arg0;

        cocos2d::Rect* ptr2 = nullptr; ok &= sqval_to_rect(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->setRect(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setRect", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_SpriteFrame_getOffsetInPixels(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::SpriteFrame* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_SpriteFrame_getOffsetInPixels'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::Vec2& ret = cobj->getOffsetInPixels();
        vec2_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getOffsetInPixels", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_SpriteFrame_getOriginalSize(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::SpriteFrame* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_SpriteFrame_getOriginalSize'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::Size& ret = cobj->getOriginalSize();
        size_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getOriginalSize", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_SpriteFrame_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 5)
        {

            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Rect")) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_BOOL) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INSTANCE || ! instanceof_cclass(vm, 5, "cocos2d::Vec2")) {
                break;
            }
            if (sq_gettype(vm, 6) != OT_INSTANCE || ! instanceof_cclass(vm, 6, "cocos2d::Size")) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::Rect arg1;
            cocos2d::Rect* ptr3 = nullptr; ok &= sqval_to_rect(vm, 3, ptr3); arg1 = *ptr3;
            if (!ok) { break; }
            bool arg2;
            ok &= sqval_to_boolean(vm, 4, &arg2);
            if (!ok) { break; }
            cocos2d::Vec2 arg3;
            cocos2d::Vec2* ptr5 = nullptr; ok &= sqval_to_vec2(vm, 5, ptr5); arg3 = *ptr5;
            if (!ok) { break; }
            cocos2d::Size arg4;
            cocos2d::Size* ptr6 = nullptr; ok &= sqval_to_size(vm, 6, ptr6); arg4 = *ptr6;
            if (!ok) { break; }
            cocos2d::SpriteFrame* ret = cocos2d::SpriteFrame::create(arg0, arg1, arg2, arg3, arg4);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.SpriteFrame");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 2)
        {

            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Rect")) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::Rect arg1;
            cocos2d::Rect* ptr3 = nullptr; ok &= sqval_to_rect(vm, 3, ptr3); arg1 = *ptr3;
            if (!ok) { break; }
            cocos2d::SpriteFrame* ret = cocos2d::SpriteFrame::create(arg0, arg1);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.SpriteFrame");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d", "create", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_SpriteFrame_createWithTexture_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 5)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Texture2D")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Rect")) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_BOOL) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INSTANCE || ! instanceof_cclass(vm, 5, "cocos2d::Vec2")) {
                break;
            }
            if (sq_gettype(vm, 6) != OT_INSTANCE || ! instanceof_cclass(vm, 6, "cocos2d::Size")) {
                break;
            }

            cocos2d::Texture2D* arg0;
            ok &= sqval_to_object<cocos2d::Texture2D>(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::Rect arg1;
            cocos2d::Rect* ptr3 = nullptr; ok &= sqval_to_rect(vm, 3, ptr3); arg1 = *ptr3;
            if (!ok) { break; }
            bool arg2;
            ok &= sqval_to_boolean(vm, 4, &arg2);
            if (!ok) { break; }
            cocos2d::Vec2 arg3;
            cocos2d::Vec2* ptr5 = nullptr; ok &= sqval_to_vec2(vm, 5, ptr5); arg3 = *ptr5;
            if (!ok) { break; }
            cocos2d::Size arg4;
            cocos2d::Size* ptr6 = nullptr; ok &= sqval_to_size(vm, 6, ptr6); arg4 = *ptr6;
            if (!ok) { break; }
            cocos2d::SpriteFrame* ret = cocos2d::SpriteFrame::createWithTexture(arg0, arg1, arg2, arg3, arg4);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.SpriteFrame");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 2)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Texture2D")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Rect")) {
                break;
            }

            cocos2d::Texture2D* arg0;
            ok &= sqval_to_object<cocos2d::Texture2D>(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::Rect arg1;
            cocos2d::Rect* ptr3 = nullptr; ok &= sqval_to_rect(vm, 3, ptr3); arg1 = *ptr3;
            if (!ok) { break; }
            cocos2d::SpriteFrame* ret = cocos2d::SpriteFrame::createWithTexture(arg0, arg1);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.SpriteFrame");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d", "createWithTexture", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_SpriteFrame_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.SpriteFrame", -1);
    return 1;
}

void squirrel_cocos2dx_SpriteFrame_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::SpriteFrame", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_SpriteFrame(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("SpriteFrame"), -1);


    sq_pushstring(vm, _SC("Ref"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "clone", squirrel_cocos2dx_SpriteFrame_clone);
    to_squirrel_function(vm, "setRotated", squirrel_cocos2dx_SpriteFrame_setRotated);
    to_squirrel_function(vm, "setTexture", squirrel_cocos2dx_SpriteFrame_setTexture);
    to_squirrel_function(vm, "getOffset", squirrel_cocos2dx_SpriteFrame_getOffset);
    to_squirrel_function(vm, "setRectInPixels", squirrel_cocos2dx_SpriteFrame_setRectInPixels);
    to_squirrel_function(vm, "getTexture", squirrel_cocos2dx_SpriteFrame_getTexture);
    to_squirrel_function(vm, "getRect", squirrel_cocos2dx_SpriteFrame_getRect);
    to_squirrel_function(vm, "setOffsetInPixels", squirrel_cocos2dx_SpriteFrame_setOffsetInPixels);
    to_squirrel_function(vm, "getRectInPixels", squirrel_cocos2dx_SpriteFrame_getRectInPixels);
    to_squirrel_function(vm, "setOriginalSize", squirrel_cocos2dx_SpriteFrame_setOriginalSize);
    to_squirrel_function(vm, "getOriginalSizeInPixels", squirrel_cocos2dx_SpriteFrame_getOriginalSizeInPixels);
    to_squirrel_function(vm, "setOriginalSizeInPixels", squirrel_cocos2dx_SpriteFrame_setOriginalSizeInPixels);
    to_squirrel_function(vm, "setOffset", squirrel_cocos2dx_SpriteFrame_setOffset);
    to_squirrel_function(vm, "isRotated", squirrel_cocos2dx_SpriteFrame_isRotated);
    to_squirrel_function(vm, "setRect", squirrel_cocos2dx_SpriteFrame_setRect);
    to_squirrel_function(vm, "getOffsetInPixels", squirrel_cocos2dx_SpriteFrame_getOffsetInPixels);
    to_squirrel_function(vm, "getOriginalSize", squirrel_cocos2dx_SpriteFrame_getOriginalSize);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_SpriteFrame_create_static, SQTrue);
    to_squirrel_function(vm, "createWithTexture", squirrel_cocos2dx_SpriteFrame_createWithTexture_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_SpriteFrame_typeof_meta);



    squirrel_cocos2dx_SpriteFrame_push_c_class(vm);

    std::string typeName = typeid(cocos2d::SpriteFrame).name();
    g_sqType[typeName] = "cc.SpriteFrame";

    return 1;
}
SQInteger squirrel_cocos2dx_ActionManager_getActionByTag(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ActionManager* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ActionManager_getActionByTag'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        int arg0;
        const cocos2d::Node* arg1;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);

        ok &= sqval_to_object<const cocos2d::Node>(vm, 3, &arg1);
        if (!ok)
            return 0;
        cocos2d::Action* ret = cobj->getActionByTag(arg0, arg1);
        object_to_sqval<cocos2d::Action>(vm, "cc.Action", (cocos2d::Action*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getActionByTag", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_ActionManager_removeActionByTag(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ActionManager* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ActionManager_removeActionByTag'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        int arg0;
        cocos2d::Node* arg1;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);

        ok &= sqval_to_object<cocos2d::Node>(vm, 3, &arg1);
        if (!ok)
            return 0;
        cobj->removeActionByTag(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "removeActionByTag", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_ActionManager_removeAllActions(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ActionManager* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ActionManager_removeAllActions'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->removeAllActions();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "removeAllActions", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ActionManager_addAction(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ActionManager* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ActionManager_addAction'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 3) 
    {
        cocos2d::Action* arg0;
        cocos2d::Node* arg1;
        bool arg2;

        ok &= sqval_to_object<cocos2d::Action>(vm, 2, &arg0);

        ok &= sqval_to_object<cocos2d::Node>(vm, 3, &arg1);

        ok &= sqval_to_boolean(vm, 4, &arg2);
        if (!ok)
            return 0;
        cobj->addAction(arg0, arg1, arg2);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "addAction", (int)argc, 3);
    return 0;
}
SQInteger squirrel_cocos2dx_ActionManager_resumeTarget(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ActionManager* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ActionManager_resumeTarget'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Node* arg0;

        ok &= sqval_to_object<cocos2d::Node>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->resumeTarget(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "resumeTarget", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ActionManager_update(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ActionManager* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ActionManager_update'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->update(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "update", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ActionManager_pauseTarget(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ActionManager* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ActionManager_pauseTarget'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Node* arg0;

        ok &= sqval_to_object<cocos2d::Node>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->pauseTarget(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "pauseTarget", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ActionManager_getNumberOfRunningActionsInTarget(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ActionManager* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ActionManager_getNumberOfRunningActionsInTarget'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        const cocos2d::Node* arg0;

        ok &= sqval_to_object<const cocos2d::Node>(vm, 2, &arg0);
        if (!ok)
            return 0;
        ssize_t ret = cobj->getNumberOfRunningActionsInTarget(arg0);
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getNumberOfRunningActionsInTarget", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ActionManager_removeAllActionsFromTarget(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ActionManager* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ActionManager_removeAllActionsFromTarget'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Node* arg0;

        ok &= sqval_to_object<cocos2d::Node>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->removeAllActionsFromTarget(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "removeAllActionsFromTarget", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ActionManager_resumeTargets(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ActionManager* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ActionManager_resumeTargets'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vector<cocos2d::Node *> arg0;

        ok &= sqval_to_ccvector(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->resumeTargets(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "resumeTargets", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ActionManager_removeAction(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ActionManager* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ActionManager_removeAction'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Action* arg0;

        ok &= sqval_to_object<cocos2d::Action>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->removeAction(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "removeAction", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ActionManager_removeAllActionsByTag(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ActionManager* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ActionManager_removeAllActionsByTag'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        int arg0;
        cocos2d::Node* arg1;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);

        ok &= sqval_to_object<cocos2d::Node>(vm, 3, &arg1);
        if (!ok)
            return 0;
        cobj->removeAllActionsByTag(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "removeAllActionsByTag", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_ActionManager_pauseAllRunningActions(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ActionManager* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ActionManager_pauseAllRunningActions'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Vector<cocos2d::Node *> ret = cobj->pauseAllRunningActions();
        ccvector_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "pauseAllRunningActions", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ActionManager_constructor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ActionManager* cobj = nullptr;
    bool ok  = true;

    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj = new cocos2d::ActionManager();
        sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
        cobj->retain();
        sq_setreleasehook(vm, 1, squirrel_releasehook_Ref);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "ActionManager", (int)argc, 0);
    return 0;
}


SQInteger squirrel_cocos2dx_ActionManager_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.ActionManager", -1);
    return 1;
}

void squirrel_cocos2dx_ActionManager_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::ActionManager", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_ActionManager(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("ActionManager"), -1);


    sq_pushstring(vm, _SC("Ref"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "constructor", squirrel_cocos2dx_ActionManager_constructor);
    to_squirrel_function(vm, "getActionByTag", squirrel_cocos2dx_ActionManager_getActionByTag);
    to_squirrel_function(vm, "removeActionByTag", squirrel_cocos2dx_ActionManager_removeActionByTag);
    to_squirrel_function(vm, "removeAllActions", squirrel_cocos2dx_ActionManager_removeAllActions);
    to_squirrel_function(vm, "addAction", squirrel_cocos2dx_ActionManager_addAction);
    to_squirrel_function(vm, "resumeTarget", squirrel_cocos2dx_ActionManager_resumeTarget);
    to_squirrel_function(vm, "update", squirrel_cocos2dx_ActionManager_update);
    to_squirrel_function(vm, "pauseTarget", squirrel_cocos2dx_ActionManager_pauseTarget);
    to_squirrel_function(vm, "getNumberOfRunningActionsInTarget", squirrel_cocos2dx_ActionManager_getNumberOfRunningActionsInTarget);
    to_squirrel_function(vm, "removeAllActionsFromTarget", squirrel_cocos2dx_ActionManager_removeAllActionsFromTarget);
    to_squirrel_function(vm, "resumeTargets", squirrel_cocos2dx_ActionManager_resumeTargets);
    to_squirrel_function(vm, "removeAction", squirrel_cocos2dx_ActionManager_removeAction);
    to_squirrel_function(vm, "removeAllActionsByTag", squirrel_cocos2dx_ActionManager_removeAllActionsByTag);
    to_squirrel_function(vm, "pauseAllRunningActions", squirrel_cocos2dx_ActionManager_pauseAllRunningActions);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_ActionManager_typeof_meta);



    squirrel_cocos2dx_ActionManager_push_c_class(vm);

    std::string typeName = typeid(cocos2d::ActionManager).name();
    g_sqType[typeName] = "cc.ActionManager";

    return 1;
}
SQInteger squirrel_cocos2dx_UserDefault_setIntegerForKey(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::UserDefault* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_UserDefault_setIntegerForKey'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        const char* arg0;
        int arg1;

        std::string arg0_tmp; ok &= sqval_to_std_string(vm, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();

        ok &= sqval_to_int32(vm, 3, (int *)&arg1);
        if (!ok)
            return 0;
        cobj->setIntegerForKey(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setIntegerForKey", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_UserDefault_getFloatForKey(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::UserDefault* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_UserDefault_getFloatForKey'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }

            const char* arg0;
            std::string arg0_tmp; ok &= sqval_to_std_string(vm, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();

            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);

            if (!ok) { break; }
            float ret = cobj->getFloatForKey(arg0, arg1);
            sq_pushfloat(vm, (SQFloat)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }

            const char* arg0;
            std::string arg0_tmp; ok &= sqval_to_std_string(vm, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();

            if (!ok) { break; }
            float ret = cobj->getFloatForKey(arg0);
            sq_pushfloat(vm, (SQFloat)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getFloatForKey", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_UserDefault_getBoolForKey(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::UserDefault* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_UserDefault_getBoolForKey'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_BOOL) {
                break;
            }

            const char* arg0;
            std::string arg0_tmp; ok &= sqval_to_std_string(vm, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();

            if (!ok) { break; }
            bool arg1;
            ok &= sqval_to_boolean(vm, 3, &arg1);

            if (!ok) { break; }
            bool ret = cobj->getBoolForKey(arg0, arg1);
            sq_pushbool(vm, (SQBool)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }

            const char* arg0;
            std::string arg0_tmp; ok &= sqval_to_std_string(vm, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();

            if (!ok) { break; }
            bool ret = cobj->getBoolForKey(arg0);
            sq_pushbool(vm, (SQBool)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getBoolForKey", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_UserDefault_setDoubleForKey(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::UserDefault* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_UserDefault_setDoubleForKey'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        const char* arg0;
        double arg1;

        std::string arg0_tmp; ok &= sqval_to_std_string(vm, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();

        ok &= sqval_to_number(vm, 3, &arg1);
        if (!ok)
            return 0;
        cobj->setDoubleForKey(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setDoubleForKey", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_UserDefault_setFloatForKey(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::UserDefault* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_UserDefault_setFloatForKey'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        const char* arg0;
        float arg1;

        std::string arg0_tmp; ok &= sqval_to_std_string(vm, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();

        ok &= sqval_to_float(vm, 3, &arg1);
        if (!ok)
            return 0;
        cobj->setFloatForKey(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setFloatForKey", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_UserDefault_getStringForKey(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::UserDefault* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_UserDefault_getStringForKey'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_STRING) {
                break;
            }

            const char* arg0;
            std::string arg0_tmp; ok &= sqval_to_std_string(vm, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();

            if (!ok) { break; }
            std::string arg1;
            ok &= sqval_to_std_string(vm, 3, &arg1);

            if (!ok) { break; }
            std::string ret = cobj->getStringForKey(arg0, arg1);
            sq_pushstring(vm, (const SQChar *)ret.c_str(), -1);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }

            const char* arg0;
            std::string arg0_tmp; ok &= sqval_to_std_string(vm, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();

            if (!ok) { break; }
            std::string ret = cobj->getStringForKey(arg0);
            sq_pushstring(vm, (const SQChar *)ret.c_str(), -1);
            return 1;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getStringForKey", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_UserDefault_setStringForKey(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::UserDefault* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_UserDefault_setStringForKey'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        const char* arg0;
        std::string arg1;

        std::string arg0_tmp; ok &= sqval_to_std_string(vm, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();

        ok &= sqval_to_std_string(vm, 3, &arg1);
        if (!ok)
            return 0;
        cobj->setStringForKey(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setStringForKey", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_UserDefault_flush(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::UserDefault* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_UserDefault_flush'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->flush();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "flush", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_UserDefault_getIntegerForKey(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::UserDefault* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_UserDefault_getIntegerForKey'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }

            const char* arg0;
            std::string arg0_tmp; ok &= sqval_to_std_string(vm, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();

            if (!ok) { break; }
            int arg1;
            ok &= sqval_to_int32(vm, 3, (int *)&arg1);

            if (!ok) { break; }
            int ret = cobj->getIntegerForKey(arg0, arg1);
            sq_pushinteger(vm, (SQInteger)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }

            const char* arg0;
            std::string arg0_tmp; ok &= sqval_to_std_string(vm, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();

            if (!ok) { break; }
            int ret = cobj->getIntegerForKey(arg0);
            sq_pushinteger(vm, (SQInteger)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getIntegerForKey", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_UserDefault_getDoubleForKey(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::UserDefault* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_UserDefault_getDoubleForKey'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }

            const char* arg0;
            std::string arg0_tmp; ok &= sqval_to_std_string(vm, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();

            if (!ok) { break; }
            double arg1;
            ok &= sqval_to_number(vm, 3, &arg1);

            if (!ok) { break; }
            double ret = cobj->getDoubleForKey(arg0, arg1);
            sq_pushfloat(vm, (SQFloat)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }

            const char* arg0;
            std::string arg0_tmp; ok &= sqval_to_std_string(vm, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();

            if (!ok) { break; }
            double ret = cobj->getDoubleForKey(arg0);
            sq_pushfloat(vm, (SQFloat)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getDoubleForKey", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_UserDefault_setBoolForKey(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::UserDefault* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_UserDefault_setBoolForKey'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        const char* arg0;
        bool arg1;

        std::string arg0_tmp; ok &= sqval_to_std_string(vm, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();

        ok &= sqval_to_boolean(vm, 3, &arg1);
        if (!ok)
            return 0;
        cobj->setBoolForKey(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setBoolForKey", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_UserDefault_destroyInstance_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        cocos2d::UserDefault::destroyInstance();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "destroyInstance", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_UserDefault_getXMLFilePath_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        const std::string& ret = cocos2d::UserDefault::getXMLFilePath();
        sq_pushstring(vm, (const SQChar *)ret.c_str(), -1);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "getXMLFilePath", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_UserDefault_isXMLFileExist_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        bool ret = cocos2d::UserDefault::isXMLFileExist();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "isXMLFileExist", (int)argc, 0);
    return 0;
}

SQInteger squirrel_cocos2dx_UserDefault_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.UserDefault", -1);
    return 1;
}

void squirrel_cocos2dx_UserDefault_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::UserDefault", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_UserDefault(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("UserDefault"), -1);

    sq_newclass(vm, SQFalse);

    to_squirrel_function(vm, "setIntegerForKey", squirrel_cocos2dx_UserDefault_setIntegerForKey);
    to_squirrel_function(vm, "getFloatForKey", squirrel_cocos2dx_UserDefault_getFloatForKey);
    to_squirrel_function(vm, "getBoolForKey", squirrel_cocos2dx_UserDefault_getBoolForKey);
    to_squirrel_function(vm, "setDoubleForKey", squirrel_cocos2dx_UserDefault_setDoubleForKey);
    to_squirrel_function(vm, "setFloatForKey", squirrel_cocos2dx_UserDefault_setFloatForKey);
    to_squirrel_function(vm, "getStringForKey", squirrel_cocos2dx_UserDefault_getStringForKey);
    to_squirrel_function(vm, "setStringForKey", squirrel_cocos2dx_UserDefault_setStringForKey);
    to_squirrel_function(vm, "flush", squirrel_cocos2dx_UserDefault_flush);
    to_squirrel_function(vm, "getIntegerForKey", squirrel_cocos2dx_UserDefault_getIntegerForKey);
    to_squirrel_function(vm, "getDoubleForKey", squirrel_cocos2dx_UserDefault_getDoubleForKey);
    to_squirrel_function(vm, "setBoolForKey", squirrel_cocos2dx_UserDefault_setBoolForKey);
    to_squirrel_function(vm, "destroyInstance", squirrel_cocos2dx_UserDefault_destroyInstance_static, SQTrue);
    to_squirrel_function(vm, "getXMLFilePath", squirrel_cocos2dx_UserDefault_getXMLFilePath_static, SQTrue);
    to_squirrel_function(vm, "isXMLFileExist", squirrel_cocos2dx_UserDefault_isXMLFileExist_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_UserDefault_typeof_meta);



    squirrel_cocos2dx_UserDefault_push_c_class(vm);

    std::string typeName = typeid(cocos2d::UserDefault).name();
    g_sqType[typeName] = "cc.UserDefault";

    return 1;
}
SQInteger squirrel_cocos2dx_TransitionZoomFlipX_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 2)
        {

            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Scene")) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::Scene* arg1;
            ok &= sqval_to_object<cocos2d::Scene>(vm, 3, &arg1);
            if (!ok) { break; }
            cocos2d::TransitionZoomFlipX* ret = cocos2d::TransitionZoomFlipX::create(arg0, arg1);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.TransitionZoomFlipX");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 3)
        {

            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Scene")) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INSTANCE || ! instanceof_cclass(vm, 4, "cocos2d::TransitionScene::Orientation")) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::Scene* arg1;
            ok &= sqval_to_object<cocos2d::Scene>(vm, 3, &arg1);
            if (!ok) { break; }
            cocos2d::TransitionScene::Orientation arg2;
            ok &= sqval_to_int32(vm, 4, (int *)&arg2);
            if (!ok) { break; }
            cocos2d::TransitionZoomFlipX* ret = cocos2d::TransitionZoomFlipX::create(arg0, arg1, arg2);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.TransitionZoomFlipX");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d", "create", (int)argc, 3);
    return 0;
}

SQInteger squirrel_cocos2dx_TransitionZoomFlipX_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.TransitionZoomFlipX", -1);
    return 1;
}

void squirrel_cocos2dx_TransitionZoomFlipX_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::TransitionZoomFlipX", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::TransitionSceneOriented", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TransitionScene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Scene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_TransitionZoomFlipX(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("TransitionZoomFlipX"), -1);


    sq_pushstring(vm, _SC("TransitionSceneOriented"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_TransitionZoomFlipX_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_TransitionZoomFlipX_typeof_meta);



    squirrel_cocos2dx_TransitionZoomFlipX_push_c_class(vm);

    std::string typeName = typeid(cocos2d::TransitionZoomFlipX).name();
    g_sqType[typeName] = "cc.TransitionZoomFlipX";

    return 1;
}
SQInteger squirrel_cocos2dx_EventFocus_constructor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::EventFocus* cobj = nullptr;
    bool ok  = true;

    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        cocos2d::ui::Widget* arg0;
        cocos2d::ui::Widget* arg1;

        ok &= sqval_to_object<cocos2d::ui::Widget>(vm, 2, &arg0);

        ok &= sqval_to_object<cocos2d::ui::Widget>(vm, 3, &arg1);
        if (!ok)
            return 0;
        cobj = new cocos2d::EventFocus(arg0, arg1);
        sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
        cobj->retain();
        sq_setreleasehook(vm, 1, squirrel_releasehook_Ref);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "EventFocus", (int)argc, 2);
    return 0;
}


SQInteger squirrel_cocos2dx_EventFocus_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.EventFocus", -1);
    return 1;
}

void squirrel_cocos2dx_EventFocus_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::EventFocus", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Event", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_EventFocus(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("EventFocus"), -1);


    sq_pushstring(vm, _SC("Event"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "constructor", squirrel_cocos2dx_EventFocus_constructor);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_EventFocus_typeof_meta);



    squirrel_cocos2dx_EventFocus_push_c_class(vm);

    std::string typeName = typeid(cocos2d::EventFocus).name();
    g_sqType[typeName] = "cc.EventFocus";

    return 1;
}
SQInteger squirrel_cocos2dx_EventListener_setEnabled(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::EventListener* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_EventListener_setEnabled'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setEnabled(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setEnabled", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_EventListener_clone(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::EventListener* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_EventListener_clone'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::EventListener* ret = cobj->clone();
        object_to_sqval<cocos2d::EventListener>(vm, "cc.EventListener", (cocos2d::EventListener*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "clone", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_EventListener_isEnabled(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::EventListener* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_EventListener_isEnabled'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isEnabled();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isEnabled", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_EventListener_checkAvailable(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::EventListener* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_EventListener_checkAvailable'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->checkAvailable();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "checkAvailable", (int)argc, 0);
    return 0;
}

SQInteger squirrel_cocos2dx_EventListener_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.EventListener", -1);
    return 1;
}

void squirrel_cocos2dx_EventListener_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::EventListener", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_EventListener(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("EventListener"), -1);


    sq_pushstring(vm, _SC("Ref"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "setEnabled", squirrel_cocos2dx_EventListener_setEnabled);
    to_squirrel_function(vm, "clone", squirrel_cocos2dx_EventListener_clone);
    to_squirrel_function(vm, "isEnabled", squirrel_cocos2dx_EventListener_isEnabled);
    to_squirrel_function(vm, "checkAvailable", squirrel_cocos2dx_EventListener_checkAvailable);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_EventListener_typeof_meta);


    sq_pushstring(vm, _SC("Type"), -1);
    sq_newtable(vm);
    to_squirrel_variable_integer(vm, "UNKNOWN", (SQInteger)cocos2d::EventListener::Type::UNKNOWN, SQTrue);
    to_squirrel_variable_integer(vm, "TOUCH_ONE_BY_ONE", (SQInteger)cocos2d::EventListener::Type::TOUCH_ONE_BY_ONE, SQTrue);
    to_squirrel_variable_integer(vm, "TOUCH_ALL_AT_ONCE", (SQInteger)cocos2d::EventListener::Type::TOUCH_ALL_AT_ONCE, SQTrue);
    to_squirrel_variable_integer(vm, "KEYBOARD", (SQInteger)cocos2d::EventListener::Type::KEYBOARD, SQTrue);
    to_squirrel_variable_integer(vm, "MOUSE", (SQInteger)cocos2d::EventListener::Type::MOUSE, SQTrue);
    to_squirrel_variable_integer(vm, "ACCELERATION", (SQInteger)cocos2d::EventListener::Type::ACCELERATION, SQTrue);
    to_squirrel_variable_integer(vm, "FOCUS", (SQInteger)cocos2d::EventListener::Type::FOCUS, SQTrue);
    to_squirrel_variable_integer(vm, "GAME_CONTROLLER", (SQInteger)cocos2d::EventListener::Type::GAME_CONTROLLER, SQTrue);
    to_squirrel_variable_integer(vm, "CUSTOM", (SQInteger)cocos2d::EventListener::Type::CUSTOM, SQTrue);
    sq_newslot(vm, -3, SQTrue);

    squirrel_cocos2dx_EventListener_push_c_class(vm);

    std::string typeName = typeid(cocos2d::EventListener).name();
    g_sqType[typeName] = "cc.EventListener";

    return 1;
}
SQInteger squirrel_cocos2dx_EaseQuinticActionInOut_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        cocos2d::ActionInterval* arg0;
        ok &= sqval_to_object<cocos2d::ActionInterval>(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::EaseQuinticActionInOut* ret = cocos2d::EaseQuinticActionInOut::create(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.EaseQuinticActionInOut");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_EaseQuinticActionInOut_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.EaseQuinticActionInOut", -1);
    return 1;
}

void squirrel_cocos2dx_EaseQuinticActionInOut_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::EaseQuinticActionInOut", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionEase", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_EaseQuinticActionInOut(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("EaseQuinticActionInOut"), -1);


    sq_pushstring(vm, _SC("ActionEase"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_EaseQuinticActionInOut_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_EaseQuinticActionInOut_typeof_meta);



    squirrel_cocos2dx_EaseQuinticActionInOut_push_c_class(vm);

    std::string typeName = typeid(cocos2d::EaseQuinticActionInOut).name();
    g_sqType[typeName] = "cc.EaseQuinticActionInOut";

    return 1;
}
SQInteger squirrel_cocos2dx_SpriteFrameCache_getSpriteFrameByName(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::SpriteFrameCache* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_SpriteFrameCache_getSpriteFrameByName'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        cocos2d::SpriteFrame* ret = cobj->getSpriteFrameByName(arg0);
        object_to_sqval<cocos2d::SpriteFrame>(vm, "cc.SpriteFrame", (cocos2d::SpriteFrame*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getSpriteFrameByName", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_SpriteFrameCache_addSpriteFramesWithFileContent(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::SpriteFrameCache* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_SpriteFrameCache_addSpriteFramesWithFileContent'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        std::string arg0;
        cocos2d::Texture2D* arg1;

        ok &= sqval_to_std_string(vm, 2, &arg0);

        ok &= sqval_to_object<cocos2d::Texture2D>(vm, 3, &arg1);
        if (!ok)
            return 0;
        cobj->addSpriteFramesWithFileContent(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "addSpriteFramesWithFileContent", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_SpriteFrameCache_addSpriteFramesWithFile(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::SpriteFrameCache* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_SpriteFrameCache_addSpriteFramesWithFile'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_STRING) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);

            if (!ok) { break; }
            std::string arg1;
            ok &= sqval_to_std_string(vm, 3, &arg1);

            if (!ok) { break; }
            cobj->addSpriteFramesWithFile(arg0, arg1);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);

            if (!ok) { break; }
            cobj->addSpriteFramesWithFile(arg0);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Texture2D")) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);

            if (!ok) { break; }
            cocos2d::Texture2D* arg1;
            ok &= sqval_to_object<cocos2d::Texture2D>(vm, 3, &arg1);

            if (!ok) { break; }
            cobj->addSpriteFramesWithFile(arg0, arg1);
            return 0;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "addSpriteFramesWithFile", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_SpriteFrameCache_addSpriteFrame(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::SpriteFrameCache* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_SpriteFrameCache_addSpriteFrame'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        cocos2d::SpriteFrame* arg0;
        std::string arg1;

        ok &= sqval_to_object<cocos2d::SpriteFrame>(vm, 2, &arg0);

        ok &= sqval_to_std_string(vm, 3, &arg1);
        if (!ok)
            return 0;
        cobj->addSpriteFrame(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "addSpriteFrame", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_SpriteFrameCache_removeUnusedSpriteFrames(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::SpriteFrameCache* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_SpriteFrameCache_removeUnusedSpriteFrames'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->removeUnusedSpriteFrames();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "removeUnusedSpriteFrames", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_SpriteFrameCache_removeSpriteFramesFromFile(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::SpriteFrameCache* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_SpriteFrameCache_removeSpriteFramesFromFile'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->removeSpriteFramesFromFile(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "removeSpriteFramesFromFile", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_SpriteFrameCache_init(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::SpriteFrameCache* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_SpriteFrameCache_init'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->init();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "init", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_SpriteFrameCache_removeSpriteFrames(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::SpriteFrameCache* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_SpriteFrameCache_removeSpriteFrames'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->removeSpriteFrames();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "removeSpriteFrames", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_SpriteFrameCache_removeSpriteFramesFromTexture(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::SpriteFrameCache* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_SpriteFrameCache_removeSpriteFramesFromTexture'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Texture2D* arg0;

        ok &= sqval_to_object<cocos2d::Texture2D>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->removeSpriteFramesFromTexture(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "removeSpriteFramesFromTexture", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_SpriteFrameCache_removeSpriteFramesFromFileContent(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::SpriteFrameCache* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_SpriteFrameCache_removeSpriteFramesFromFileContent'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->removeSpriteFramesFromFileContent(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "removeSpriteFramesFromFileContent", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_SpriteFrameCache_removeSpriteFrameByName(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::SpriteFrameCache* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_SpriteFrameCache_removeSpriteFrameByName'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->removeSpriteFrameByName(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "removeSpriteFrameByName", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_SpriteFrameCache_destroyInstance_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        cocos2d::SpriteFrameCache::destroyInstance();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "destroyInstance", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_SpriteFrameCache_getInstance_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        cocos2d::SpriteFrameCache* ret = cocos2d::SpriteFrameCache::getInstance();
        object_to_sqval<cocos2d::SpriteFrameCache>(vm, "cc.SpriteFrameCache", (cocos2d::SpriteFrameCache*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "getInstance", (int)argc, 0);
    return 0;
}

SQInteger squirrel_cocos2dx_SpriteFrameCache_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.SpriteFrameCache", -1);
    return 1;
}

void squirrel_cocos2dx_SpriteFrameCache_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::SpriteFrameCache", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_SpriteFrameCache(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("SpriteFrameCache"), -1);


    sq_pushstring(vm, _SC("Ref"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "getSpriteFrameByName", squirrel_cocos2dx_SpriteFrameCache_getSpriteFrameByName);
    to_squirrel_function(vm, "addSpriteFramesWithFileContent", squirrel_cocos2dx_SpriteFrameCache_addSpriteFramesWithFileContent);
    to_squirrel_function(vm, "addSpriteFramesWithFile", squirrel_cocos2dx_SpriteFrameCache_addSpriteFramesWithFile);
    to_squirrel_function(vm, "addSpriteFrame", squirrel_cocos2dx_SpriteFrameCache_addSpriteFrame);
    to_squirrel_function(vm, "removeUnusedSpriteFrames", squirrel_cocos2dx_SpriteFrameCache_removeUnusedSpriteFrames);
    to_squirrel_function(vm, "removeSpriteFramesFromFile", squirrel_cocos2dx_SpriteFrameCache_removeSpriteFramesFromFile);
    to_squirrel_function(vm, "init", squirrel_cocos2dx_SpriteFrameCache_init);
    to_squirrel_function(vm, "removeSpriteFrames", squirrel_cocos2dx_SpriteFrameCache_removeSpriteFrames);
    to_squirrel_function(vm, "removeSpriteFramesFromTexture", squirrel_cocos2dx_SpriteFrameCache_removeSpriteFramesFromTexture);
    to_squirrel_function(vm, "removeSpriteFramesFromFileContent", squirrel_cocos2dx_SpriteFrameCache_removeSpriteFramesFromFileContent);
    to_squirrel_function(vm, "removeSpriteFrameByName", squirrel_cocos2dx_SpriteFrameCache_removeSpriteFrameByName);
    to_squirrel_function(vm, "destroyInstance", squirrel_cocos2dx_SpriteFrameCache_destroyInstance_static, SQTrue);
    to_squirrel_function(vm, "getInstance", squirrel_cocos2dx_SpriteFrameCache_getInstance_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_SpriteFrameCache_typeof_meta);



    squirrel_cocos2dx_SpriteFrameCache_push_c_class(vm);

    std::string typeName = typeid(cocos2d::SpriteFrameCache).name();
    g_sqType[typeName] = "cc.SpriteFrameCache";

    return 1;
}
SQInteger squirrel_cocos2dx_Skeleton3D_getBoneByName(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Skeleton3D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Skeleton3D_getBoneByName'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        cocos2d::Bone3D* ret = cobj->getBoneByName(arg0);
        object_to_sqval<cocos2d::Bone3D>(vm, "cc.Bone3D", (cocos2d::Bone3D*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getBoneByName", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Skeleton3D_getRootBone(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Skeleton3D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Skeleton3D_getRootBone'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        int arg0;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if (!ok)
            return 0;
        cocos2d::Bone3D* ret = cobj->getRootBone(arg0);
        object_to_sqval<cocos2d::Bone3D>(vm, "cc.Bone3D", (cocos2d::Bone3D*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getRootBone", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Skeleton3D_updateBoneMatrix(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Skeleton3D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Skeleton3D_updateBoneMatrix'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->updateBoneMatrix();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "updateBoneMatrix", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Skeleton3D_getBoneByIndex(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Skeleton3D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Skeleton3D_getBoneByIndex'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        unsigned int arg0;

        ok &= sqval_to_uint32(vm, 2, &arg0);
        if (!ok)
            return 0;
        cocos2d::Bone3D* ret = cobj->getBoneByIndex(arg0);
        object_to_sqval<cocos2d::Bone3D>(vm, "cc.Bone3D", (cocos2d::Bone3D*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getBoneByIndex", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Skeleton3D_getRootCount(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Skeleton3D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Skeleton3D_getRootCount'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        ssize_t ret = cobj->getRootCount();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getRootCount", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Skeleton3D_getBoneIndex(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Skeleton3D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Skeleton3D_getBoneIndex'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Bone3D* arg0;

        ok &= sqval_to_object<cocos2d::Bone3D>(vm, 2, &arg0);
        if (!ok)
            return 0;
        int ret = cobj->getBoneIndex(arg0);
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getBoneIndex", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Skeleton3D_getBoneCount(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Skeleton3D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Skeleton3D_getBoneCount'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        ssize_t ret = cobj->getBoneCount();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getBoneCount", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Skeleton3D_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        std::vector<cocos2d::NodeData *> arg0;
        ok &= sqval_to_ccvector_object<cocos2d::NodeData >(vm, 2, arg0);
        if(!ok)
            return 0;
        cocos2d::Skeleton3D* ret = cocos2d::Skeleton3D::create(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.Skeleton3D");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_Skeleton3D_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.Skeleton3D", -1);
    return 1;
}

void squirrel_cocos2dx_Skeleton3D_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::Skeleton3D", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_Skeleton3D(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("Skeleton3D"), -1);


    sq_pushstring(vm, _SC("Ref"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "getBoneByName", squirrel_cocos2dx_Skeleton3D_getBoneByName);
    to_squirrel_function(vm, "getRootBone", squirrel_cocos2dx_Skeleton3D_getRootBone);
    to_squirrel_function(vm, "updateBoneMatrix", squirrel_cocos2dx_Skeleton3D_updateBoneMatrix);
    to_squirrel_function(vm, "getBoneByIndex", squirrel_cocos2dx_Skeleton3D_getBoneByIndex);
    to_squirrel_function(vm, "getRootCount", squirrel_cocos2dx_Skeleton3D_getRootCount);
    to_squirrel_function(vm, "getBoneIndex", squirrel_cocos2dx_Skeleton3D_getBoneIndex);
    to_squirrel_function(vm, "getBoneCount", squirrel_cocos2dx_Skeleton3D_getBoneCount);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_Skeleton3D_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_Skeleton3D_typeof_meta);



    squirrel_cocos2dx_Skeleton3D_push_c_class(vm);

    std::string typeName = typeid(cocos2d::Skeleton3D).name();
    g_sqType[typeName] = "cc.Skeleton3D";

    return 1;
}
SQInteger squirrel_cocos2dx_TransitionCrossFade_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        float arg0;
        cocos2d::Scene* arg1;
        ok &= sqval_to_float(vm, 2, &arg0);
        ok &= sqval_to_object<cocos2d::Scene>(vm, 3, &arg1);
        if(!ok)
            return 0;
        cocos2d::TransitionCrossFade* ret = cocos2d::TransitionCrossFade::create(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.TransitionCrossFade");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_TransitionCrossFade_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.TransitionCrossFade", -1);
    return 1;
}

void squirrel_cocos2dx_TransitionCrossFade_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::TransitionCrossFade", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::TransitionScene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Scene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_TransitionCrossFade(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("TransitionCrossFade"), -1);


    sq_pushstring(vm, _SC("TransitionScene"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_TransitionCrossFade_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_TransitionCrossFade_typeof_meta);



    squirrel_cocos2dx_TransitionCrossFade_push_c_class(vm);

    std::string typeName = typeid(cocos2d::TransitionCrossFade).name();
    g_sqType[typeName] = "cc.TransitionCrossFade";

    return 1;
}
SQInteger squirrel_cocos2dx_Ripple3D_setAmplitudeRate(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Ripple3D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Ripple3D_setAmplitudeRate'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setAmplitudeRate(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setAmplitudeRate", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Ripple3D_getAmplitudeRate(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Ripple3D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Ripple3D_getAmplitudeRate'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getAmplitudeRate();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getAmplitudeRate", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Ripple3D_setAmplitude(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Ripple3D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Ripple3D_setAmplitude'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setAmplitude(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setAmplitude", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Ripple3D_getAmplitude(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Ripple3D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Ripple3D_getAmplitude'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getAmplitude();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getAmplitude", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Ripple3D_setPosition(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Ripple3D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Ripple3D_setPosition'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec2 arg0;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->setPosition(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setPosition", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Ripple3D_getPosition(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Ripple3D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Ripple3D_getPosition'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::Vec2& ret = cobj->getPosition();
        vec2_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getPosition", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Ripple3D_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 6)
    {
        float arg0;
        cocos2d::Size arg1;
        cocos2d::Vec2 arg2;
        float arg3;
        unsigned int arg4;
        float arg5;
        ok &= sqval_to_float(vm, 2, &arg0);
        cocos2d::Size* ptr3 = nullptr; ok &= sqval_to_size(vm, 3, ptr3); arg1 = *ptr3;
        cocos2d::Vec2* ptr4 = nullptr; ok &= sqval_to_vec2(vm, 4, ptr4); arg2 = *ptr4;
        ok &= sqval_to_float(vm, 5, &arg3);
        ok &= sqval_to_uint32(vm, 6, &arg4);
        ok &= sqval_to_float(vm, 7, &arg5);
        if(!ok)
            return 0;
        cocos2d::Ripple3D* ret = cocos2d::Ripple3D::create(arg0, arg1, arg2, arg3, arg4, arg5);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.Ripple3D");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 6);
    return 0;
}

SQInteger squirrel_cocos2dx_Ripple3D_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.Ripple3D", -1);
    return 1;
}

void squirrel_cocos2dx_Ripple3D_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::Ripple3D", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Grid3DAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::GridAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_Ripple3D(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("Ripple3D"), -1);


    sq_pushstring(vm, _SC("Grid3DAction"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "setAmplitudeRate", squirrel_cocos2dx_Ripple3D_setAmplitudeRate);
    to_squirrel_function(vm, "getAmplitudeRate", squirrel_cocos2dx_Ripple3D_getAmplitudeRate);
    to_squirrel_function(vm, "setAmplitude", squirrel_cocos2dx_Ripple3D_setAmplitude);
    to_squirrel_function(vm, "getAmplitude", squirrel_cocos2dx_Ripple3D_getAmplitude);
    to_squirrel_function(vm, "setPosition", squirrel_cocos2dx_Ripple3D_setPosition);
    to_squirrel_function(vm, "getPosition", squirrel_cocos2dx_Ripple3D_getPosition);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_Ripple3D_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_Ripple3D_typeof_meta);



    squirrel_cocos2dx_Ripple3D_push_c_class(vm);

    std::string typeName = typeid(cocos2d::Ripple3D).name();
    g_sqType[typeName] = "cc.Ripple3D";

    return 1;
}
SQInteger squirrel_cocos2dx_Action_startWithTarget(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Action* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Action_startWithTarget'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Node* arg0;

        ok &= sqval_to_object<cocos2d::Node>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->startWithTarget(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "startWithTarget", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Action_setOriginalTarget(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Action* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Action_setOriginalTarget'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Node* arg0;

        ok &= sqval_to_object<cocos2d::Node>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setOriginalTarget(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setOriginalTarget", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Action_clone(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Action* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Action_clone'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Action* ret = cobj->clone();
        object_to_sqval<cocos2d::Action>(vm, "cc.Action", (cocos2d::Action*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "clone", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Action_getOriginalTarget(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Action* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Action_getOriginalTarget'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Node* ret = cobj->getOriginalTarget();
        object_to_sqval<cocos2d::Node>(vm, "cc.Node", (cocos2d::Node*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getOriginalTarget", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Action_stop(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Action* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Action_stop'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->stop();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "stop", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Action_update(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Action* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Action_update'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->update(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "update", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Action_getTarget(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Action* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Action_getTarget'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Node* ret = cobj->getTarget();
        object_to_sqval<cocos2d::Node>(vm, "cc.Node", (cocos2d::Node*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getTarget", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Action_step(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Action* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Action_step'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->step(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "step", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Action_setTag(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Action* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Action_setTag'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        int arg0;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if (!ok)
            return 0;
        cobj->setTag(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setTag", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Action_getTag(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Action* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Action_getTag'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        int ret = cobj->getTag();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getTag", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Action_setTarget(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Action* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Action_setTarget'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Node* arg0;

        ok &= sqval_to_object<cocos2d::Node>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setTarget(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setTarget", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Action_isDone(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Action* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Action_isDone'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isDone();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isDone", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Action_reverse(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Action* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Action_reverse'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Action* ret = cobj->reverse();
        object_to_sqval<cocos2d::Action>(vm, "cc.Action", (cocos2d::Action*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "reverse", (int)argc, 0);
    return 0;
}

SQInteger squirrel_cocos2dx_Action_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.Action", -1);
    return 1;
}

void squirrel_cocos2dx_Action_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_Action(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("Action"), -1);


    sq_pushstring(vm, _SC("Ref"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "startWithTarget", squirrel_cocos2dx_Action_startWithTarget);
    to_squirrel_function(vm, "setOriginalTarget", squirrel_cocos2dx_Action_setOriginalTarget);
    to_squirrel_function(vm, "clone", squirrel_cocos2dx_Action_clone);
    to_squirrel_function(vm, "getOriginalTarget", squirrel_cocos2dx_Action_getOriginalTarget);
    to_squirrel_function(vm, "stop", squirrel_cocos2dx_Action_stop);
    to_squirrel_function(vm, "update", squirrel_cocos2dx_Action_update);
    to_squirrel_function(vm, "getTarget", squirrel_cocos2dx_Action_getTarget);
    to_squirrel_function(vm, "step", squirrel_cocos2dx_Action_step);
    to_squirrel_function(vm, "setTag", squirrel_cocos2dx_Action_setTag);
    to_squirrel_function(vm, "getTag", squirrel_cocos2dx_Action_getTag);
    to_squirrel_function(vm, "setTarget", squirrel_cocos2dx_Action_setTarget);
    to_squirrel_function(vm, "isDone", squirrel_cocos2dx_Action_isDone);
    to_squirrel_function(vm, "reverse", squirrel_cocos2dx_Action_reverse);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_Action_typeof_meta);

    to_squirrel_variable_integer(vm, "INVALID_TAG", (SQInteger)cocos2d::Action::INVALID_TAG, SQTrue);


    squirrel_cocos2dx_Action_push_c_class(vm);

    std::string typeName = typeid(cocos2d::Action).name();
    g_sqType[typeName] = "cc.Action";

    return 1;
}
SQInteger squirrel_cocos2dx_Lens3D_setPosition(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Lens3D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Lens3D_setPosition'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec2 arg0;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->setPosition(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setPosition", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Lens3D_setConcave(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Lens3D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Lens3D_setConcave'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setConcave(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setConcave", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Lens3D_setLensEffect(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Lens3D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Lens3D_setLensEffect'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setLensEffect(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setLensEffect", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Lens3D_getPosition(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Lens3D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Lens3D_getPosition'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::Vec2& ret = cobj->getPosition();
        vec2_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getPosition", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Lens3D_getLensEffect(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Lens3D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Lens3D_getLensEffect'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getLensEffect();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getLensEffect", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Lens3D_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 4)
    {
        float arg0;
        cocos2d::Size arg1;
        cocos2d::Vec2 arg2;
        float arg3;
        ok &= sqval_to_float(vm, 2, &arg0);
        cocos2d::Size* ptr3 = nullptr; ok &= sqval_to_size(vm, 3, ptr3); arg1 = *ptr3;
        cocos2d::Vec2* ptr4 = nullptr; ok &= sqval_to_vec2(vm, 4, ptr4); arg2 = *ptr4;
        ok &= sqval_to_float(vm, 5, &arg3);
        if(!ok)
            return 0;
        cocos2d::Lens3D* ret = cocos2d::Lens3D::create(arg0, arg1, arg2, arg3);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.Lens3D");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 4);
    return 0;
}

SQInteger squirrel_cocos2dx_Lens3D_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.Lens3D", -1);
    return 1;
}

void squirrel_cocos2dx_Lens3D_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::Lens3D", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Grid3DAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::GridAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_Lens3D(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("Lens3D"), -1);


    sq_pushstring(vm, _SC("Grid3DAction"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "setPosition", squirrel_cocos2dx_Lens3D_setPosition);
    to_squirrel_function(vm, "setConcave", squirrel_cocos2dx_Lens3D_setConcave);
    to_squirrel_function(vm, "setLensEffect", squirrel_cocos2dx_Lens3D_setLensEffect);
    to_squirrel_function(vm, "getPosition", squirrel_cocos2dx_Lens3D_getPosition);
    to_squirrel_function(vm, "getLensEffect", squirrel_cocos2dx_Lens3D_getLensEffect);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_Lens3D_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_Lens3D_typeof_meta);



    squirrel_cocos2dx_Lens3D_push_c_class(vm);

    std::string typeName = typeid(cocos2d::Lens3D).name();
    g_sqType[typeName] = "cc.Lens3D";

    return 1;
}
SQInteger squirrel_cocos2dx_GridBase_setGridSize(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GridBase* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GridBase_setGridSize'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Size arg0;

        cocos2d::Size* ptr2 = nullptr; ok &= sqval_to_size(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->setGridSize(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setGridSize", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_GridBase_afterBlit(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GridBase* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GridBase_afterBlit'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->afterBlit();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "afterBlit", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_GridBase_afterDraw(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GridBase* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GridBase_afterDraw'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Node* arg0;

        ok &= sqval_to_object<cocos2d::Node>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->afterDraw(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "afterDraw", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_GridBase_beforeDraw(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GridBase* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GridBase_beforeDraw'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->beforeDraw();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "beforeDraw", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_GridBase_calculateVertexPoints(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GridBase* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GridBase_calculateVertexPoints'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->calculateVertexPoints();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "calculateVertexPoints", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_GridBase_isTextureFlipped(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GridBase* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GridBase_isTextureFlipped'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isTextureFlipped();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isTextureFlipped", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_GridBase_getGridSize(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GridBase* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GridBase_getGridSize'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::Size& ret = cobj->getGridSize();
        size_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getGridSize", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_GridBase_getStep(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GridBase* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GridBase_getStep'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::Vec2& ret = cobj->getStep();
        vec2_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getStep", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_GridBase_set2DProjection(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GridBase* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GridBase_set2DProjection'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->set2DProjection();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "set2DProjection", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_GridBase_setStep(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GridBase* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GridBase_setStep'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec2 arg0;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->setStep(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setStep", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_GridBase_setTextureFlipped(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GridBase* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GridBase_setTextureFlipped'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setTextureFlipped(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setTextureFlipped", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_GridBase_blit(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GridBase* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GridBase_blit'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->blit();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "blit", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_GridBase_setActive(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GridBase* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GridBase_setActive'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setActive(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setActive", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_GridBase_getReuseGrid(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GridBase* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GridBase_getReuseGrid'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        int ret = cobj->getReuseGrid();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getReuseGrid", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_GridBase_initWithSize(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GridBase* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GridBase_initWithSize'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Size")) {
                break;
            }

            cocos2d::Size arg0;
            cocos2d::Size* ptr2 = nullptr; ok &= sqval_to_size(vm, 2, ptr2); arg0 = *ptr2;

            if (!ok) { break; }
            bool ret = cobj->initWithSize(arg0);
            sq_pushbool(vm, (SQBool)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 3) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Size")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Texture2D")) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_BOOL) {
                break;
            }

            cocos2d::Size arg0;
            cocos2d::Size* ptr2 = nullptr; ok &= sqval_to_size(vm, 2, ptr2); arg0 = *ptr2;

            if (!ok) { break; }
            cocos2d::Texture2D* arg1;
            ok &= sqval_to_object<cocos2d::Texture2D>(vm, 3, &arg1);

            if (!ok) { break; }
            bool arg2;
            ok &= sqval_to_boolean(vm, 4, &arg2);

            if (!ok) { break; }
            bool ret = cobj->initWithSize(arg0, arg1, arg2);
            sq_pushbool(vm, (SQBool)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "initWithSize", (int)argc, 3);
    return 0;
}
SQInteger squirrel_cocos2dx_GridBase_beforeBlit(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GridBase* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GridBase_beforeBlit'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->beforeBlit();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "beforeBlit", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_GridBase_setReuseGrid(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GridBase* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GridBase_setReuseGrid'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        int arg0;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if (!ok)
            return 0;
        cobj->setReuseGrid(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setReuseGrid", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_GridBase_isActive(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GridBase* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GridBase_isActive'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isActive();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isActive", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_GridBase_reuse(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GridBase* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GridBase_reuse'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->reuse();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "reuse", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_GridBase_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 1)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Size")) {
                break;
            }

            cocos2d::Size arg0;
            cocos2d::Size* ptr2 = nullptr; ok &= sqval_to_size(vm, 2, ptr2); arg0 = *ptr2;
            if (!ok) { break; }
            cocos2d::GridBase* ret = cocos2d::GridBase::create(arg0);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.GridBase");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 3)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Size")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Texture2D")) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_BOOL) {
                break;
            }

            cocos2d::Size arg0;
            cocos2d::Size* ptr2 = nullptr; ok &= sqval_to_size(vm, 2, ptr2); arg0 = *ptr2;
            if (!ok) { break; }
            cocos2d::Texture2D* arg1;
            ok &= sqval_to_object<cocos2d::Texture2D>(vm, 3, &arg1);
            if (!ok) { break; }
            bool arg2;
            ok &= sqval_to_boolean(vm, 4, &arg2);
            if (!ok) { break; }
            cocos2d::GridBase* ret = cocos2d::GridBase::create(arg0, arg1, arg2);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.GridBase");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d", "create", (int)argc, 3);
    return 0;
}

SQInteger squirrel_cocos2dx_GridBase_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.GridBase", -1);
    return 1;
}

void squirrel_cocos2dx_GridBase_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::GridBase", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_GridBase(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("GridBase"), -1);


    sq_pushstring(vm, _SC("Ref"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "setGridSize", squirrel_cocos2dx_GridBase_setGridSize);
    to_squirrel_function(vm, "afterBlit", squirrel_cocos2dx_GridBase_afterBlit);
    to_squirrel_function(vm, "afterDraw", squirrel_cocos2dx_GridBase_afterDraw);
    to_squirrel_function(vm, "beforeDraw", squirrel_cocos2dx_GridBase_beforeDraw);
    to_squirrel_function(vm, "calculateVertexPoints", squirrel_cocos2dx_GridBase_calculateVertexPoints);
    to_squirrel_function(vm, "isTextureFlipped", squirrel_cocos2dx_GridBase_isTextureFlipped);
    to_squirrel_function(vm, "getGridSize", squirrel_cocos2dx_GridBase_getGridSize);
    to_squirrel_function(vm, "getStep", squirrel_cocos2dx_GridBase_getStep);
    to_squirrel_function(vm, "set2DProjection", squirrel_cocos2dx_GridBase_set2DProjection);
    to_squirrel_function(vm, "setStep", squirrel_cocos2dx_GridBase_setStep);
    to_squirrel_function(vm, "setTextureFlipped", squirrel_cocos2dx_GridBase_setTextureFlipped);
    to_squirrel_function(vm, "blit", squirrel_cocos2dx_GridBase_blit);
    to_squirrel_function(vm, "setActive", squirrel_cocos2dx_GridBase_setActive);
    to_squirrel_function(vm, "getReuseGrid", squirrel_cocos2dx_GridBase_getReuseGrid);
    to_squirrel_function(vm, "initWithSize", squirrel_cocos2dx_GridBase_initWithSize);
    to_squirrel_function(vm, "beforeBlit", squirrel_cocos2dx_GridBase_beforeBlit);
    to_squirrel_function(vm, "setReuseGrid", squirrel_cocos2dx_GridBase_setReuseGrid);
    to_squirrel_function(vm, "isActive", squirrel_cocos2dx_GridBase_isActive);
    to_squirrel_function(vm, "reuse", squirrel_cocos2dx_GridBase_reuse);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_GridBase_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_GridBase_typeof_meta);



    squirrel_cocos2dx_GridBase_push_c_class(vm);

    std::string typeName = typeid(cocos2d::GridBase).name();
    g_sqType[typeName] = "cc.GridBase";

    return 1;
}
SQInteger squirrel_cocos2dx_ScaleTo_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 3)
        {

            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);
            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);
            if (!ok) { break; }
            float arg2;
            ok &= sqval_to_float(vm, 4, &arg2);
            if (!ok) { break; }
            cocos2d::ScaleTo* ret = cocos2d::ScaleTo::create(arg0, arg1, arg2);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.ScaleTo");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 2)
        {

            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);
            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);
            if (!ok) { break; }
            cocos2d::ScaleTo* ret = cocos2d::ScaleTo::create(arg0, arg1);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.ScaleTo");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 4)
        {

            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INTEGER && sq_gettype(vm, 5) != OT_FLOAT) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);
            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);
            if (!ok) { break; }
            float arg2;
            ok &= sqval_to_float(vm, 4, &arg2);
            if (!ok) { break; }
            float arg3;
            ok &= sqval_to_float(vm, 5, &arg3);
            if (!ok) { break; }
            cocos2d::ScaleTo* ret = cocos2d::ScaleTo::create(arg0, arg1, arg2, arg3);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.ScaleTo");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d", "create", (int)argc, 4);
    return 0;
}

SQInteger squirrel_cocos2dx_ScaleTo_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.ScaleTo", -1);
    return 1;
}

void squirrel_cocos2dx_ScaleTo_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::ScaleTo", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_ScaleTo(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("ScaleTo"), -1);


    sq_pushstring(vm, _SC("ActionInterval"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_ScaleTo_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_ScaleTo_typeof_meta);



    squirrel_cocos2dx_ScaleTo_push_c_class(vm);

    std::string typeName = typeid(cocos2d::ScaleTo).name();
    g_sqType[typeName] = "cc.ScaleTo";

    return 1;
}

SQInteger squirrel_cocos2dx_AnimationFrameData_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.AnimationFrameData", -1);
    return 1;
}

SQInteger squirrel_cocos2dx_AnimationFrameData_get_meta(HSQUIRRELVM vm)
{
    cocos2d::AnimationFrameData *cobj = nullptr;
    if (SQ_FAILED(sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0))) {
        CCLOG("cocos2d::AnimationFrameData sq_getinstanceup failed.");
        sq_pushnull(vm);
        return 1;
    }

    const char *varName = nullptr;
    sq_getstring(vm, 2, &varName);
    
    do {
        if (strcmp(varName, "texCoords") == 0) {
            t2fquad_to_sqval(vm, cobj->texCoords);
            break;
        }
        if (strcmp(varName, "delay") == 0) {
            sq_pushfloat(vm, (SQFloat)cobj->delay);
            break;
        }
        if (strcmp(varName, "size") == 0) {
            size_to_sqval(vm, cobj->size);
            break;
        }

        return 0;
        
    } while(0);

    return 1;
}

SQInteger squirrel_cocos2dx_AnimationFrameData_set_meta(HSQUIRRELVM vm)
{
    cocos2d::AnimationFrameData *cobj = nullptr;
    if (SQ_FAILED(sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0))) {
        CCLOG("cocos2d::AnimationFrameData sq_getinstanceup failed.");
        return 0;
    }

    bool ok  = true;
    const char *varName = nullptr;
    sq_getstring(vm, 2, &varName);
    
    do {
        if (strcmp(varName, "texCoords") == 0) {
            cocos2d::T2F_Quad *ptr3 = nullptr; ok &= sqval_to_t2fquad(vm, 3, ptr3); cobj->texCoords = *ptr3;
            if (! ok) {
                return 0;
            }
            break;
        }
        if (strcmp(varName, "delay") == 0) {
            ok &= sqval_to_float(vm, 3, &cobj->delay);
            if (! ok) {
                return 0;
            }
            break;
        }
        if (strcmp(varName, "size") == 0) {
            cocos2d::Size* ptr3 = nullptr; ok &= sqval_to_size(vm, 3, ptr3); cobj->size = *ptr3;
            if (! ok) {
                return 0;
            }
            break;
        }

        CCLOG("specified variable is not found in cocos2d::AnimationFrameData");
    } while(0);

    return 0;
}

void squirrel_cocos2dx_AnimationFrameData_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::AnimationFrameData", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_AnimationFrameData(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("AnimationFrameData"), -1);

    sq_newclass(vm, SQFalse);


    to_squirrel_function(vm, "_get", squirrel_cocos2dx_AnimationFrameData_get_meta);
    to_squirrel_function(vm, "_set", squirrel_cocos2dx_AnimationFrameData_set_meta);
    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_AnimationFrameData_typeof_meta);



    squirrel_cocos2dx_AnimationFrameData_push_c_class(vm);

    std::string typeName = typeid(cocos2d::AnimationFrameData).name();
    g_sqType[typeName] = "cc.AnimationFrameData";

    return 1;
}

SQInteger squirrel_cocos2dx_Spawn_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.Spawn", -1);
    return 1;
}

void squirrel_cocos2dx_Spawn_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::Spawn", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_Spawn(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("Spawn"), -1);


    sq_pushstring(vm, _SC("ActionInterval"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }


    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_Spawn_typeof_meta);



    squirrel_cocos2dx_Spawn_push_c_class(vm);

    std::string typeName = typeid(cocos2d::Spawn).name();
    g_sqType[typeName] = "cc.Spawn";

    return 1;
}

SQInteger squirrel_cocos2dx_BlendFunc_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.BlendFunc", -1);
    return 1;
}

SQInteger squirrel_cocos2dx_BlendFunc_get_meta(HSQUIRRELVM vm)
{
    cocos2d::BlendFunc *cobj = nullptr;
    if (SQ_FAILED(sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0))) {
        CCLOG("cocos2d::BlendFunc sq_getinstanceup failed.");
        sq_pushnull(vm);
        return 1;
    }

    const char *varName = nullptr;
    sq_getstring(vm, 2, &varName);
    
    do {
        if (strcmp(varName, "src") == 0) {
            sq_pushinteger(vm, (SQInteger)cobj->src);
            break;
        }
        if (strcmp(varName, "dst") == 0) {
            sq_pushinteger(vm, (SQInteger)cobj->dst);
            break;
        }

        return 0;
        
    } while(0);

    return 1;
}

SQInteger squirrel_cocos2dx_BlendFunc_set_meta(HSQUIRRELVM vm)
{
    cocos2d::BlendFunc *cobj = nullptr;
    if (SQ_FAILED(sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0))) {
        CCLOG("cocos2d::BlendFunc sq_getinstanceup failed.");
        return 0;
    }

    bool ok  = true;
    const char *varName = nullptr;
    sq_getstring(vm, 2, &varName);
    
    do {
        if (strcmp(varName, "src") == 0) {
            ok &= sqval_to_uint32(vm, 3, &cobj->src);
            if (! ok) {
                return 0;
            }
            break;
        }
        if (strcmp(varName, "dst") == 0) {
            ok &= sqval_to_uint32(vm, 3, &cobj->dst);
            if (! ok) {
                return 0;
            }
            break;
        }

        CCLOG("specified variable is not found in cocos2d::BlendFunc");
    } while(0);

    return 0;
}

void squirrel_cocos2dx_BlendFunc_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::BlendFunc", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_BlendFunc(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("BlendFunc"), -1);

    sq_newclass(vm, SQFalse);


    to_squirrel_function(vm, "_get", squirrel_cocos2dx_BlendFunc_get_meta);
    to_squirrel_function(vm, "_set", squirrel_cocos2dx_BlendFunc_set_meta);
    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_BlendFunc_typeof_meta);

    to_squirrel_variable_object(vm, "DISABLE", (SQUserPointer)&cocos2d::BlendFunc::DISABLE, SQTrue);
    to_squirrel_variable_object(vm, "ALPHA_PREMULTIPLIED", (SQUserPointer)&cocos2d::BlendFunc::ALPHA_PREMULTIPLIED, SQTrue);
    to_squirrel_variable_object(vm, "ALPHA_NON_PREMULTIPLIED", (SQUserPointer)&cocos2d::BlendFunc::ALPHA_NON_PREMULTIPLIED, SQTrue);
    to_squirrel_variable_object(vm, "ADDITIVE", (SQUserPointer)&cocos2d::BlendFunc::ADDITIVE, SQTrue);


    squirrel_cocos2dx_BlendFunc_push_c_class(vm);

    std::string typeName = typeid(cocos2d::BlendFunc).name();
    g_sqType[typeName] = "cc.BlendFunc";

    return 1;
}
SQInteger squirrel_cocos2dx_EaseQuarticActionInOut_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        cocos2d::ActionInterval* arg0;
        ok &= sqval_to_object<cocos2d::ActionInterval>(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::EaseQuarticActionInOut* ret = cocos2d::EaseQuarticActionInOut::create(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.EaseQuarticActionInOut");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_EaseQuarticActionInOut_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.EaseQuarticActionInOut", -1);
    return 1;
}

void squirrel_cocos2dx_EaseQuarticActionInOut_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::EaseQuarticActionInOut", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionEase", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_EaseQuarticActionInOut(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("EaseQuarticActionInOut"), -1);


    sq_pushstring(vm, _SC("ActionEase"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_EaseQuarticActionInOut_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_EaseQuarticActionInOut_typeof_meta);



    squirrel_cocos2dx_EaseQuarticActionInOut_push_c_class(vm);

    std::string typeName = typeid(cocos2d::EaseQuarticActionInOut).name();
    g_sqType[typeName] = "cc.EaseQuarticActionInOut";

    return 1;
}
SQInteger squirrel_cocos2dx_ShakyTiles3D_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 4)
    {
        float arg0;
        cocos2d::Size arg1;
        int arg2;
        bool arg3;
        ok &= sqval_to_float(vm, 2, &arg0);
        cocos2d::Size* ptr3 = nullptr; ok &= sqval_to_size(vm, 3, ptr3); arg1 = *ptr3;
        ok &= sqval_to_int32(vm, 4, (int *)&arg2);
        ok &= sqval_to_boolean(vm, 5, &arg3);
        if(!ok)
            return 0;
        cocos2d::ShakyTiles3D* ret = cocos2d::ShakyTiles3D::create(arg0, arg1, arg2, arg3);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.ShakyTiles3D");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 4);
    return 0;
}

SQInteger squirrel_cocos2dx_ShakyTiles3D_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.ShakyTiles3D", -1);
    return 1;
}

void squirrel_cocos2dx_ShakyTiles3D_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::ShakyTiles3D", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::TiledGrid3DAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::GridAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_ShakyTiles3D(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("ShakyTiles3D"), -1);


    sq_pushstring(vm, _SC("TiledGrid3DAction"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_ShakyTiles3D_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_ShakyTiles3D_typeof_meta);



    squirrel_cocos2dx_ShakyTiles3D_push_c_class(vm);

    std::string typeName = typeid(cocos2d::ShakyTiles3D).name();
    g_sqType[typeName] = "cc.ShakyTiles3D";

    return 1;
}
SQInteger squirrel_cocos2dx_Animation3D_getDuration(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Animation3D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Animation3D_getDuration'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getDuration();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getDuration", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Animation3D_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        std::string arg0;
        ok &= sqval_to_std_string(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::Animation3D* ret = cocos2d::Animation3D::create(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.Animation3D");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    if (argc == 2)
    {
        std::string arg0;
        std::string arg1;
        ok &= sqval_to_std_string(vm, 2, &arg0);
        ok &= sqval_to_std_string(vm, 3, &arg1);
        if(!ok)
            return 0;
        cocos2d::Animation3D* ret = cocos2d::Animation3D::create(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.Animation3D");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_Animation3D_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.Animation3D", -1);
    return 1;
}

void squirrel_cocos2dx_Animation3D_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::Animation3D", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_Animation3D(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("Animation3D"), -1);


    sq_pushstring(vm, _SC("Ref"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "getDuration", squirrel_cocos2dx_Animation3D_getDuration);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_Animation3D_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_Animation3D_typeof_meta);



    squirrel_cocos2dx_Animation3D_push_c_class(vm);

    std::string typeName = typeid(cocos2d::Animation3D).name();
    g_sqType[typeName] = "cc.Animation3D";

    return 1;
}
SQInteger squirrel_cocos2dx_PageTurn3D_getGrid(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::PageTurn3D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_PageTurn3D_getGrid'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::GridBase* ret = cobj->getGrid();
        object_to_sqval<cocos2d::GridBase>(vm, "cc.GridBase", (cocos2d::GridBase*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getGrid", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_PageTurn3D_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        float arg0;
        cocos2d::Size arg1;
        ok &= sqval_to_float(vm, 2, &arg0);
        cocos2d::Size* ptr3 = nullptr; ok &= sqval_to_size(vm, 3, ptr3); arg1 = *ptr3;
        if(!ok)
            return 0;
        cocos2d::PageTurn3D* ret = cocos2d::PageTurn3D::create(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.PageTurn3D");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_PageTurn3D_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.PageTurn3D", -1);
    return 1;
}

void squirrel_cocos2dx_PageTurn3D_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::PageTurn3D", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Grid3DAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::GridAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_PageTurn3D(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("PageTurn3D"), -1);


    sq_pushstring(vm, _SC("Grid3DAction"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "getGrid", squirrel_cocos2dx_PageTurn3D_getGrid);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_PageTurn3D_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_PageTurn3D_typeof_meta);



    squirrel_cocos2dx_PageTurn3D_push_c_class(vm);

    std::string typeName = typeid(cocos2d::PageTurn3D).name();
    g_sqType[typeName] = "cc.PageTurn3D";

    return 1;
}
SQInteger squirrel_cocos2dx_TransitionSlideInT_action(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TransitionSlideInT* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TransitionSlideInT_action'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::ActionInterval* ret = cobj->action();
        object_to_sqval<cocos2d::ActionInterval>(vm, "cc.ActionInterval", (cocos2d::ActionInterval*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "action", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_TransitionSlideInT_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        float arg0;
        cocos2d::Scene* arg1;
        ok &= sqval_to_float(vm, 2, &arg0);
        ok &= sqval_to_object<cocos2d::Scene>(vm, 3, &arg1);
        if(!ok)
            return 0;
        cocos2d::TransitionSlideInT* ret = cocos2d::TransitionSlideInT::create(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.TransitionSlideInT");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_TransitionSlideInT_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.TransitionSlideInT", -1);
    return 1;
}

void squirrel_cocos2dx_TransitionSlideInT_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::TransitionSlideInT", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::TransitionSlideInL", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TransitionScene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Scene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TransitionEaseScene", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_TransitionSlideInT(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("TransitionSlideInT"), -1);


    sq_pushstring(vm, _SC("TransitionSlideInL"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "action", squirrel_cocos2dx_TransitionSlideInT_action);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_TransitionSlideInT_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_TransitionSlideInT_typeof_meta);



    squirrel_cocos2dx_TransitionSlideInT_push_c_class(vm);

    std::string typeName = typeid(cocos2d::TransitionSlideInT).name();
    g_sqType[typeName] = "cc.TransitionSlideInT";

    return 1;
}
SQInteger squirrel_cocos2dx_Grid3D_getNeedDepthTestForBlit(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Grid3D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Grid3D_getNeedDepthTestForBlit'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->getNeedDepthTestForBlit();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getNeedDepthTestForBlit", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Grid3D_setNeedDepthTestForBlit(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Grid3D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Grid3D_setNeedDepthTestForBlit'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setNeedDepthTestForBlit(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setNeedDepthTestForBlit", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Grid3D_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 1)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Size")) {
                break;
            }

            cocos2d::Size arg0;
            cocos2d::Size* ptr2 = nullptr; ok &= sqval_to_size(vm, 2, ptr2); arg0 = *ptr2;
            if (!ok) { break; }
            cocos2d::Grid3D* ret = cocos2d::Grid3D::create(arg0);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.Grid3D");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 3)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Size")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Texture2D")) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_BOOL) {
                break;
            }

            cocos2d::Size arg0;
            cocos2d::Size* ptr2 = nullptr; ok &= sqval_to_size(vm, 2, ptr2); arg0 = *ptr2;
            if (!ok) { break; }
            cocos2d::Texture2D* arg1;
            ok &= sqval_to_object<cocos2d::Texture2D>(vm, 3, &arg1);
            if (!ok) { break; }
            bool arg2;
            ok &= sqval_to_boolean(vm, 4, &arg2);
            if (!ok) { break; }
            cocos2d::Grid3D* ret = cocos2d::Grid3D::create(arg0, arg1, arg2);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.Grid3D");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d", "create", (int)argc, 3);
    return 0;
}
SQInteger squirrel_cocos2dx_Grid3D_constructor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Grid3D* cobj = nullptr;
    bool ok  = true;

    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj = new cocos2d::Grid3D();
        sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
        cobj->retain();
        sq_setreleasehook(vm, 1, squirrel_releasehook_Ref);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "Grid3D", (int)argc, 0);
    return 0;
}


SQInteger squirrel_cocos2dx_Grid3D_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.Grid3D", -1);
    return 1;
}

void squirrel_cocos2dx_Grid3D_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::Grid3D", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::GridBase", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_Grid3D(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("Grid3D"), -1);


    sq_pushstring(vm, _SC("GridBase"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "constructor", squirrel_cocos2dx_Grid3D_constructor);
    to_squirrel_function(vm, "getNeedDepthTestForBlit", squirrel_cocos2dx_Grid3D_getNeedDepthTestForBlit);
    to_squirrel_function(vm, "setNeedDepthTestForBlit", squirrel_cocos2dx_Grid3D_setNeedDepthTestForBlit);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_Grid3D_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_Grid3D_typeof_meta);



    squirrel_cocos2dx_Grid3D_push_c_class(vm);

    std::string typeName = typeid(cocos2d::Grid3D).name();
    g_sqType[typeName] = "cc.Grid3D";

    return 1;
}
SQInteger squirrel_cocos2dx_ParticleSystemQuad_setDisplayFrame(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystemQuad* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystemQuad_setDisplayFrame'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::SpriteFrame* arg0;

        ok &= sqval_to_object<cocos2d::SpriteFrame>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setDisplayFrame(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setDisplayFrame", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystemQuad_setTextureWithRect(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystemQuad* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystemQuad_setTextureWithRect'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        cocos2d::Texture2D* arg0;
        cocos2d::Rect arg1;

        ok &= sqval_to_object<cocos2d::Texture2D>(vm, 2, &arg0);

        cocos2d::Rect* ptr3 = nullptr; ok &= sqval_to_rect(vm, 3, ptr3); arg1 = *ptr3;
        if (!ok)
            return 0;
        cobj->setTextureWithRect(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setTextureWithRect", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystemQuad_listenRendererRecreated(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParticleSystemQuad* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParticleSystemQuad_listenRendererRecreated'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::EventCustom* arg0;

        ok &= sqval_to_object<cocos2d::EventCustom>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->listenRendererRecreated(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "listenRendererRecreated", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystemQuad_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 1)
        {

            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::ParticleSystemQuad* ret = cocos2d::ParticleSystemQuad::create(arg0);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.ParticleSystemQuad");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 0)
        {


            cocos2d::ParticleSystemQuad* ret = cocos2d::ParticleSystemQuad::create();
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.ParticleSystemQuad");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 1)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::ValueMap")) {
                break;
            }

            cocos2d::ValueMap arg0;
            ok &= sqval_to_ccvaluemap(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::ParticleSystemQuad* ret = cocos2d::ParticleSystemQuad::create(arg0);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.ParticleSystemQuad");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d", "create", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleSystemQuad_createWithTotalParticles_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if(!ok)
            return 0;
        cocos2d::ParticleSystemQuad* ret = cocos2d::ParticleSystemQuad::createWithTotalParticles(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.ParticleSystemQuad");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "createWithTotalParticles", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_ParticleSystemQuad_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.ParticleSystemQuad", -1);
    return 1;
}

void squirrel_cocos2dx_ParticleSystemQuad_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::ParticleSystemQuad", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ParticleSystem", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TextureProtocol", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::BlendProtocol", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_ParticleSystemQuad(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("ParticleSystemQuad"), -1);


    sq_pushstring(vm, _SC("ParticleSystem"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "setDisplayFrame", squirrel_cocos2dx_ParticleSystemQuad_setDisplayFrame);
    to_squirrel_function(vm, "setTextureWithRect", squirrel_cocos2dx_ParticleSystemQuad_setTextureWithRect);
    to_squirrel_function(vm, "listenRendererRecreated", squirrel_cocos2dx_ParticleSystemQuad_listenRendererRecreated);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_ParticleSystemQuad_create_static, SQTrue);
    to_squirrel_function(vm, "createWithTotalParticles", squirrel_cocos2dx_ParticleSystemQuad_createWithTotalParticles_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_ParticleSystemQuad_typeof_meta);



    squirrel_cocos2dx_ParticleSystemQuad_push_c_class(vm);

    std::string typeName = typeid(cocos2d::ParticleSystemQuad).name();
    g_sqType[typeName] = "cc.ParticleSystemQuad";

    return 1;
}
SQInteger squirrel_cocos2dx_EaseCircleActionOut_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        cocos2d::ActionInterval* arg0;
        ok &= sqval_to_object<cocos2d::ActionInterval>(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::EaseCircleActionOut* ret = cocos2d::EaseCircleActionOut::create(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.EaseCircleActionOut");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_EaseCircleActionOut_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.EaseCircleActionOut", -1);
    return 1;
}

void squirrel_cocos2dx_EaseCircleActionOut_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::EaseCircleActionOut", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionEase", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_EaseCircleActionOut(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("EaseCircleActionOut"), -1);


    sq_pushstring(vm, _SC("ActionEase"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_EaseCircleActionOut_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_EaseCircleActionOut_typeof_meta);



    squirrel_cocos2dx_EaseCircleActionOut_push_c_class(vm);

    std::string typeName = typeid(cocos2d::EaseCircleActionOut).name();
    g_sqType[typeName] = "cc.EaseCircleActionOut";

    return 1;
}
SQInteger squirrel_cocos2dx_TransitionProgressInOut_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        float arg0;
        cocos2d::Scene* arg1;
        ok &= sqval_to_float(vm, 2, &arg0);
        ok &= sqval_to_object<cocos2d::Scene>(vm, 3, &arg1);
        if(!ok)
            return 0;
        cocos2d::TransitionProgressInOut* ret = cocos2d::TransitionProgressInOut::create(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.TransitionProgressInOut");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_TransitionProgressInOut_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.TransitionProgressInOut", -1);
    return 1;
}

void squirrel_cocos2dx_TransitionProgressInOut_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::TransitionProgressInOut", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::TransitionProgress", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TransitionScene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Scene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_TransitionProgressInOut(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("TransitionProgressInOut"), -1);


    sq_pushstring(vm, _SC("TransitionProgress"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_TransitionProgressInOut_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_TransitionProgressInOut_typeof_meta);



    squirrel_cocos2dx_TransitionProgressInOut_push_c_class(vm);

    std::string typeName = typeid(cocos2d::TransitionProgressInOut).name();
    g_sqType[typeName] = "cc.TransitionProgressInOut";

    return 1;
}
SQInteger squirrel_cocos2dx_EaseCubicActionInOut_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        cocos2d::ActionInterval* arg0;
        ok &= sqval_to_object<cocos2d::ActionInterval>(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::EaseCubicActionInOut* ret = cocos2d::EaseCubicActionInOut::create(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.EaseCubicActionInOut");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_EaseCubicActionInOut_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.EaseCubicActionInOut", -1);
    return 1;
}

void squirrel_cocos2dx_EaseCubicActionInOut_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::EaseCubicActionInOut", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionEase", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_EaseCubicActionInOut(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("EaseCubicActionInOut"), -1);


    sq_pushstring(vm, _SC("ActionEase"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_EaseCubicActionInOut_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_EaseCubicActionInOut_typeof_meta);



    squirrel_cocos2dx_EaseCubicActionInOut_push_c_class(vm);

    std::string typeName = typeid(cocos2d::EaseCubicActionInOut).name();
    g_sqType[typeName] = "cc.EaseCubicActionInOut";

    return 1;
}
SQInteger squirrel_cocos2dx_SkewTo_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 3)
    {
        float arg0;
        float arg1;
        float arg2;
        ok &= sqval_to_float(vm, 2, &arg0);
        ok &= sqval_to_float(vm, 3, &arg1);
        ok &= sqval_to_float(vm, 4, &arg2);
        if(!ok)
            return 0;
        cocos2d::SkewTo* ret = cocos2d::SkewTo::create(arg0, arg1, arg2);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.SkewTo");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 3);
    return 0;
}

SQInteger squirrel_cocos2dx_SkewTo_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.SkewTo", -1);
    return 1;
}

void squirrel_cocos2dx_SkewTo_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::SkewTo", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_SkewTo(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("SkewTo"), -1);


    sq_pushstring(vm, _SC("ActionInterval"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_SkewTo_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_SkewTo_typeof_meta);



    squirrel_cocos2dx_SkewTo_push_c_class(vm);

    std::string typeName = typeid(cocos2d::SkewTo).name();
    g_sqType[typeName] = "cc.SkewTo";

    return 1;
}
SQInteger squirrel_cocos2dx_EaseBackIn_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        cocos2d::ActionInterval* arg0;
        ok &= sqval_to_object<cocos2d::ActionInterval>(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::EaseBackIn* ret = cocos2d::EaseBackIn::create(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.EaseBackIn");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_EaseBackIn_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.EaseBackIn", -1);
    return 1;
}

void squirrel_cocos2dx_EaseBackIn_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::EaseBackIn", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionEase", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_EaseBackIn(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("EaseBackIn"), -1);


    sq_pushstring(vm, _SC("ActionEase"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_EaseBackIn_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_EaseBackIn_typeof_meta);



    squirrel_cocos2dx_EaseBackIn_push_c_class(vm);

    std::string typeName = typeid(cocos2d::EaseBackIn).name();
    g_sqType[typeName] = "cc.EaseBackIn";

    return 1;
}
SQInteger squirrel_cocos2dx_SplitRows_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        float arg0;
        unsigned int arg1;
        ok &= sqval_to_float(vm, 2, &arg0);
        ok &= sqval_to_uint32(vm, 3, &arg1);
        if(!ok)
            return 0;
        cocos2d::SplitRows* ret = cocos2d::SplitRows::create(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.SplitRows");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_SplitRows_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.SplitRows", -1);
    return 1;
}

void squirrel_cocos2dx_SplitRows_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::SplitRows", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::TiledGrid3DAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::GridAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_SplitRows(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("SplitRows"), -1);


    sq_pushstring(vm, _SC("TiledGrid3DAction"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_SplitRows_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_SplitRows_typeof_meta);



    squirrel_cocos2dx_SplitRows_push_c_class(vm);

    std::string typeName = typeid(cocos2d::SplitRows).name();
    g_sqType[typeName] = "cc.SplitRows";

    return 1;
}
SQInteger squirrel_cocos2dx_RenderTexture_setVirtualViewport(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::RenderTexture* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_RenderTexture_setVirtualViewport'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 3) 
    {
        cocos2d::Vec2 arg0;
        cocos2d::Rect arg1;
        cocos2d::Rect arg2;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;

        cocos2d::Rect* ptr3 = nullptr; ok &= sqval_to_rect(vm, 3, ptr3); arg1 = *ptr3;

        cocos2d::Rect* ptr4 = nullptr; ok &= sqval_to_rect(vm, 4, ptr4); arg2 = *ptr4;
        if (!ok)
            return 0;
        cobj->setVirtualViewport(arg0, arg1, arg2);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setVirtualViewport", (int)argc, 3);
    return 0;
}
SQInteger squirrel_cocos2dx_RenderTexture_clearStencil(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::RenderTexture* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_RenderTexture_clearStencil'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        int arg0;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if (!ok)
            return 0;
        cobj->clearStencil(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "clearStencil", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_RenderTexture_getClearDepth(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::RenderTexture* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_RenderTexture_getClearDepth'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getClearDepth();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getClearDepth", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_RenderTexture_getClearStencil(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::RenderTexture* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_RenderTexture_getClearStencil'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        int ret = cobj->getClearStencil();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getClearStencil", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_RenderTexture_end(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::RenderTexture* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_RenderTexture_end'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->end();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "end", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_RenderTexture_setClearStencil(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::RenderTexture* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_RenderTexture_setClearStencil'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        int arg0;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if (!ok)
            return 0;
        cobj->setClearStencil(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setClearStencil", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_RenderTexture_setSprite(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::RenderTexture* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_RenderTexture_setSprite'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Sprite* arg0;

        ok &= sqval_to_object<cocos2d::Sprite>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setSprite(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setSprite", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_RenderTexture_getSprite(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::RenderTexture* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_RenderTexture_getSprite'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Sprite* ret = cobj->getSprite();
        object_to_sqval<cocos2d::Sprite>(vm, "cc.Sprite", (cocos2d::Sprite*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getSprite", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_RenderTexture_isAutoDraw(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::RenderTexture* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_RenderTexture_isAutoDraw'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isAutoDraw();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isAutoDraw", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_RenderTexture_setKeepMatrix(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::RenderTexture* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_RenderTexture_setKeepMatrix'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setKeepMatrix(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setKeepMatrix", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_RenderTexture_setClearFlags(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::RenderTexture* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_RenderTexture_setClearFlags'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        unsigned int arg0;

        ok &= sqval_to_uint32(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setClearFlags(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setClearFlags", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_RenderTexture_begin(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::RenderTexture* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_RenderTexture_begin'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->begin();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "begin", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_RenderTexture_saveToFile(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::RenderTexture* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_RenderTexture_saveToFile'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Image::Format")) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);

            if (!ok) { break; }
            cocos2d::Image::Format arg1;
            ok &= sqval_to_int32(vm, 3, (int *)&arg1);

            if (!ok) { break; }
            bool ret = cobj->saveToFile(arg0, arg1);
            sq_pushbool(vm, (SQBool)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 3) {
            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Image::Format")) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_BOOL) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);

            if (!ok) { break; }
            cocos2d::Image::Format arg1;
            ok &= sqval_to_int32(vm, 3, (int *)&arg1);

            if (!ok) { break; }
            bool arg2;
            ok &= sqval_to_boolean(vm, 4, &arg2);

            if (!ok) { break; }
            bool ret = cobj->saveToFile(arg0, arg1, arg2);
            sq_pushbool(vm, (SQBool)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 4) {
            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Image::Format")) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_BOOL) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_CLOSURE) {
                break;
            }
            HSQOBJECT callback5;
            sq_getstackobj(vm, 5, &callback5);

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);

            if (!ok) { break; }
            cocos2d::Image::Format arg1;
            ok &= sqval_to_int32(vm, 3, (int *)&arg1);

            if (!ok) { break; }
            bool arg2;
            ok &= sqval_to_boolean(vm, 4, &arg2);

            if (!ok) { break; }
            std::function<void (cocos2d::RenderTexture *, const std::string &)> arg3;
            do {
			    // Lambda binding for squirrel
			    arg3 = [vm, callback5](cocos2d::RenderTexture* larg0, const std::string & larg1) -> void {
			        if (sq_getrefcount(vm, (HSQOBJECT *)&callback5) > 0) {
			            sq_pushobject(vm, callback5);
			            sq_push(vm, 1);
			            object_to_sqval<cocos2d::RenderTexture>(vm, "cc.RenderTexture", (cocos2d::RenderTexture*)larg0);
			            sq_pushstring(vm, (const SQChar *)larg1.c_str(), -1);
			            sq_call(vm, 3, SQFalse, SQTrue);
			            sq_poptop(vm);
			        }
			    };
			} while(0);

            if (!ok) { break; }
            bool ret = cobj->saveToFile(arg0, arg1, arg2, arg3);
            sq_pushbool(vm, (SQBool)ret);
            _SquirrelObject *sqobj = (_SquirrelObject *)cobj->_scriptObject;
            sqobj->addClosure("callback5", callback5);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);

            if (!ok) { break; }
            bool ret = cobj->saveToFile(arg0);
            sq_pushbool(vm, (SQBool)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_BOOL) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);

            if (!ok) { break; }
            bool arg1;
            ok &= sqval_to_boolean(vm, 3, &arg1);

            if (!ok) { break; }
            bool ret = cobj->saveToFile(arg0, arg1);
            sq_pushbool(vm, (SQBool)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 3) {
            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_BOOL) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_CLOSURE) {
                break;
            }
            HSQOBJECT callback4;
            sq_getstackobj(vm, 4, &callback4);

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);

            if (!ok) { break; }
            bool arg1;
            ok &= sqval_to_boolean(vm, 3, &arg1);

            if (!ok) { break; }
            std::function<void (cocos2d::RenderTexture *, const std::string &)> arg2;
            do {
			    // Lambda binding for squirrel
			    arg2 = [vm, callback4](cocos2d::RenderTexture* larg0, const std::string & larg1) -> void {
			        if (sq_getrefcount(vm, (HSQOBJECT *)&callback4) > 0) {
			            sq_pushobject(vm, callback4);
			            sq_push(vm, 1);
			            object_to_sqval<cocos2d::RenderTexture>(vm, "cc.RenderTexture", (cocos2d::RenderTexture*)larg0);
			            sq_pushstring(vm, (const SQChar *)larg1.c_str(), -1);
			            sq_call(vm, 3, SQFalse, SQTrue);
			            sq_poptop(vm);
			        }
			    };
			} while(0);

            if (!ok) { break; }
            bool ret = cobj->saveToFile(arg0, arg1, arg2);
            sq_pushbool(vm, (SQBool)ret);
            _SquirrelObject *sqobj = (_SquirrelObject *)cobj->_scriptObject;
            sqobj->addClosure("callback4", callback4);
            return 1;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "saveToFile", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_RenderTexture_setAutoDraw(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::RenderTexture* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_RenderTexture_setAutoDraw'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setAutoDraw(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setAutoDraw", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_RenderTexture_setClearColor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::RenderTexture* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_RenderTexture_setClearColor'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Color4F arg0;

        cocos2d::Color4F *ptr2 = nullptr; ok &=sqval_to_color4f(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->setClearColor(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setClearColor", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_RenderTexture_endToLua(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::RenderTexture* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_RenderTexture_endToLua'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->endToLua();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "endToLua", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_RenderTexture_beginWithClear(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::RenderTexture* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_RenderTexture_beginWithClear'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 5) {
            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INTEGER && sq_gettype(vm, 5) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 6) != OT_INTEGER && sq_gettype(vm, 6) != OT_FLOAT) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);

            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);

            if (!ok) { break; }
            float arg2;
            ok &= sqval_to_float(vm, 4, &arg2);

            if (!ok) { break; }
            float arg3;
            ok &= sqval_to_float(vm, 5, &arg3);

            if (!ok) { break; }
            float arg4;
            ok &= sqval_to_float(vm, 6, &arg4);

            if (!ok) { break; }
            cobj->beginWithClear(arg0, arg1, arg2, arg3, arg4);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 4) {
            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INTEGER && sq_gettype(vm, 5) != OT_FLOAT) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);

            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);

            if (!ok) { break; }
            float arg2;
            ok &= sqval_to_float(vm, 4, &arg2);

            if (!ok) { break; }
            float arg3;
            ok &= sqval_to_float(vm, 5, &arg3);

            if (!ok) { break; }
            cobj->beginWithClear(arg0, arg1, arg2, arg3);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 6) {
            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INTEGER && sq_gettype(vm, 5) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 6) != OT_INTEGER && sq_gettype(vm, 6) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 7) != OT_INTEGER && sq_gettype(vm, 7) != OT_FLOAT) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);

            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);

            if (!ok) { break; }
            float arg2;
            ok &= sqval_to_float(vm, 4, &arg2);

            if (!ok) { break; }
            float arg3;
            ok &= sqval_to_float(vm, 5, &arg3);

            if (!ok) { break; }
            float arg4;
            ok &= sqval_to_float(vm, 6, &arg4);

            if (!ok) { break; }
            int arg5;
            ok &= sqval_to_int32(vm, 7, (int *)&arg5);

            if (!ok) { break; }
            cobj->beginWithClear(arg0, arg1, arg2, arg3, arg4, arg5);
            return 0;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "beginWithClear", (int)argc, 6);
    return 0;
}
SQInteger squirrel_cocos2dx_RenderTexture_clearDepth(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::RenderTexture* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_RenderTexture_clearDepth'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->clearDepth(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "clearDepth", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_RenderTexture_getClearColor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::RenderTexture* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_RenderTexture_getClearColor'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::Color4F& ret = cobj->getClearColor();
        color4f_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getClearColor", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_RenderTexture_clear(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::RenderTexture* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_RenderTexture_clear'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 4) 
    {
        float arg0;
        float arg1;
        float arg2;
        float arg3;

        ok &= sqval_to_float(vm, 2, &arg0);

        ok &= sqval_to_float(vm, 3, &arg1);

        ok &= sqval_to_float(vm, 4, &arg2);

        ok &= sqval_to_float(vm, 5, &arg3);
        if (!ok)
            return 0;
        cobj->clear(arg0, arg1, arg2, arg3);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "clear", (int)argc, 4);
    return 0;
}
SQInteger squirrel_cocos2dx_RenderTexture_getClearFlags(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::RenderTexture* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_RenderTexture_getClearFlags'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        unsigned int ret = cobj->getClearFlags();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getClearFlags", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_RenderTexture_newImage(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::RenderTexture* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_RenderTexture_newImage'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Image* ret = cobj->newImage();
        object_to_sqval<cocos2d::Image>(vm, "cc.Image", (cocos2d::Image*)ret);
        return 1;
    }
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cocos2d::Image* ret = cobj->newImage(arg0);
        object_to_sqval<cocos2d::Image>(vm, "cc.Image", (cocos2d::Image*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "newImage", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_RenderTexture_setClearDepth(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::RenderTexture* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_RenderTexture_setClearDepth'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setClearDepth(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setClearDepth", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_RenderTexture_initWithWidthAndHeight(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::RenderTexture* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_RenderTexture_initWithWidthAndHeight'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 4) {
            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INSTANCE || ! instanceof_cclass(vm, 4, "cocos2d::Texture2D::PixelFormat")) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INTEGER && sq_gettype(vm, 5) != OT_FLOAT) {
                break;
            }

            int arg0;
            ok &= sqval_to_int32(vm, 2, (int *)&arg0);

            if (!ok) { break; }
            int arg1;
            ok &= sqval_to_int32(vm, 3, (int *)&arg1);

            if (!ok) { break; }
            cocos2d::Texture2D::PixelFormat arg2;
            ok &= sqval_to_int32(vm, 4, (int *)&arg2);

            if (!ok) { break; }
            unsigned int arg3;
            ok &= sqval_to_uint32(vm, 5, &arg3);

            if (!ok) { break; }
            bool ret = cobj->initWithWidthAndHeight(arg0, arg1, arg2, arg3);
            sq_pushbool(vm, (SQBool)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 3) {
            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INSTANCE || ! instanceof_cclass(vm, 4, "cocos2d::Texture2D::PixelFormat")) {
                break;
            }

            int arg0;
            ok &= sqval_to_int32(vm, 2, (int *)&arg0);

            if (!ok) { break; }
            int arg1;
            ok &= sqval_to_int32(vm, 3, (int *)&arg1);

            if (!ok) { break; }
            cocos2d::Texture2D::PixelFormat arg2;
            ok &= sqval_to_int32(vm, 4, (int *)&arg2);

            if (!ok) { break; }
            bool ret = cobj->initWithWidthAndHeight(arg0, arg1, arg2);
            sq_pushbool(vm, (SQBool)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "initWithWidthAndHeight", (int)argc, 3);
    return 0;
}
SQInteger squirrel_cocos2dx_RenderTexture_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 3)
        {

            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INSTANCE || ! instanceof_cclass(vm, 4, "cocos2d::Texture2D::PixelFormat")) {
                break;
            }

            int arg0;
            ok &= sqval_to_int32(vm, 2, (int *)&arg0);
            if (!ok) { break; }
            int arg1;
            ok &= sqval_to_int32(vm, 3, (int *)&arg1);
            if (!ok) { break; }
            cocos2d::Texture2D::PixelFormat arg2;
            ok &= sqval_to_int32(vm, 4, (int *)&arg2);
            if (!ok) { break; }
            cocos2d::RenderTexture* ret = cocos2d::RenderTexture::create(arg0, arg1, arg2);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.RenderTexture");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 4)
        {

            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INSTANCE || ! instanceof_cclass(vm, 4, "cocos2d::Texture2D::PixelFormat")) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INTEGER && sq_gettype(vm, 5) != OT_FLOAT) {
                break;
            }

            int arg0;
            ok &= sqval_to_int32(vm, 2, (int *)&arg0);
            if (!ok) { break; }
            int arg1;
            ok &= sqval_to_int32(vm, 3, (int *)&arg1);
            if (!ok) { break; }
            cocos2d::Texture2D::PixelFormat arg2;
            ok &= sqval_to_int32(vm, 4, (int *)&arg2);
            if (!ok) { break; }
            unsigned int arg3;
            ok &= sqval_to_uint32(vm, 5, &arg3);
            if (!ok) { break; }
            cocos2d::RenderTexture* ret = cocos2d::RenderTexture::create(arg0, arg1, arg2, arg3);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.RenderTexture");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 2)
        {

            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }

            int arg0;
            ok &= sqval_to_int32(vm, 2, (int *)&arg0);
            if (!ok) { break; }
            int arg1;
            ok &= sqval_to_int32(vm, 3, (int *)&arg1);
            if (!ok) { break; }
            cocos2d::RenderTexture* ret = cocos2d::RenderTexture::create(arg0, arg1);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.RenderTexture");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d", "create", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_RenderTexture_constructor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::RenderTexture* cobj = nullptr;
    bool ok  = true;

    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj = new cocos2d::RenderTexture();
        sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
        cobj->retain();
        sq_setreleasehook(vm, 1, squirrel_releasehook_Ref);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "RenderTexture", (int)argc, 0);
    return 0;
}


SQInteger squirrel_cocos2dx_RenderTexture_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.RenderTexture", -1);
    return 1;
}

void squirrel_cocos2dx_RenderTexture_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::RenderTexture", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_RenderTexture(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("RenderTexture"), -1);


    sq_pushstring(vm, _SC("Node"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "constructor", squirrel_cocos2dx_RenderTexture_constructor);
    to_squirrel_function(vm, "setVirtualViewport", squirrel_cocos2dx_RenderTexture_setVirtualViewport);
    to_squirrel_function(vm, "clearStencil", squirrel_cocos2dx_RenderTexture_clearStencil);
    to_squirrel_function(vm, "getClearDepth", squirrel_cocos2dx_RenderTexture_getClearDepth);
    to_squirrel_function(vm, "getClearStencil", squirrel_cocos2dx_RenderTexture_getClearStencil);
    to_squirrel_function(vm, "end", squirrel_cocos2dx_RenderTexture_end);
    to_squirrel_function(vm, "setClearStencil", squirrel_cocos2dx_RenderTexture_setClearStencil);
    to_squirrel_function(vm, "setSprite", squirrel_cocos2dx_RenderTexture_setSprite);
    to_squirrel_function(vm, "getSprite", squirrel_cocos2dx_RenderTexture_getSprite);
    to_squirrel_function(vm, "isAutoDraw", squirrel_cocos2dx_RenderTexture_isAutoDraw);
    to_squirrel_function(vm, "setKeepMatrix", squirrel_cocos2dx_RenderTexture_setKeepMatrix);
    to_squirrel_function(vm, "setClearFlags", squirrel_cocos2dx_RenderTexture_setClearFlags);
    to_squirrel_function(vm, "begin", squirrel_cocos2dx_RenderTexture_begin);
    to_squirrel_function(vm, "saveToFile", squirrel_cocos2dx_RenderTexture_saveToFile);
    to_squirrel_function(vm, "setAutoDraw", squirrel_cocos2dx_RenderTexture_setAutoDraw);
    to_squirrel_function(vm, "setClearColor", squirrel_cocos2dx_RenderTexture_setClearColor);
    to_squirrel_function(vm, "endToLua", squirrel_cocos2dx_RenderTexture_endToLua);
    to_squirrel_function(vm, "beginWithClear", squirrel_cocos2dx_RenderTexture_beginWithClear);
    to_squirrel_function(vm, "clearDepth", squirrel_cocos2dx_RenderTexture_clearDepth);
    to_squirrel_function(vm, "getClearColor", squirrel_cocos2dx_RenderTexture_getClearColor);
    to_squirrel_function(vm, "clear", squirrel_cocos2dx_RenderTexture_clear);
    to_squirrel_function(vm, "getClearFlags", squirrel_cocos2dx_RenderTexture_getClearFlags);
    to_squirrel_function(vm, "newImage", squirrel_cocos2dx_RenderTexture_newImage);
    to_squirrel_function(vm, "setClearDepth", squirrel_cocos2dx_RenderTexture_setClearDepth);
    to_squirrel_function(vm, "initWithWidthAndHeight", squirrel_cocos2dx_RenderTexture_initWithWidthAndHeight);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_RenderTexture_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_RenderTexture_typeof_meta);



    squirrel_cocos2dx_RenderTexture_push_c_class(vm);

    std::string typeName = typeid(cocos2d::RenderTexture).name();
    g_sqType[typeName] = "cc.RenderTexture";

    return 1;
}
SQInteger squirrel_cocos2dx_Follow_setBoundarySet(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Follow* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Follow_setBoundarySet'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setBoundarySet(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setBoundarySet", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Follow_isBoundarySet(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Follow* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Follow_isBoundarySet'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isBoundarySet();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isBoundarySet", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Follow_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        cocos2d::Node* arg0;
        ok &= sqval_to_object<cocos2d::Node>(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::Follow* ret = cocos2d::Follow::create(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.Follow");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    if (argc == 2)
    {
        cocos2d::Node* arg0;
        cocos2d::Rect arg1;
        ok &= sqval_to_object<cocos2d::Node>(vm, 2, &arg0);
        cocos2d::Rect* ptr3 = nullptr; ok &= sqval_to_rect(vm, 3, ptr3); arg1 = *ptr3;
        if(!ok)
            return 0;
        cocos2d::Follow* ret = cocos2d::Follow::create(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.Follow");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_Follow_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.Follow", -1);
    return 1;
}

void squirrel_cocos2dx_Follow_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::Follow", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_Follow(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("Follow"), -1);


    sq_pushstring(vm, _SC("Action"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "setBoundarySet", squirrel_cocos2dx_Follow_setBoundarySet);
    to_squirrel_function(vm, "isBoundarySet", squirrel_cocos2dx_Follow_isBoundarySet);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_Follow_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_Follow_typeof_meta);



    squirrel_cocos2dx_Follow_push_c_class(vm);

    std::string typeName = typeid(cocos2d::Follow).name();
    g_sqType[typeName] = "cc.Follow";

    return 1;
}
SQInteger squirrel_cocos2dx_Animate_getAnimation(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Animate* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Animate_getAnimation'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 0) {

            const cocos2d::Animation* ret = cobj->getAnimation();
            object_to_sqval<cocos2d::Animation>(vm, "cc.Animation", (cocos2d::Animation*)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 0) {

            cocos2d::Animation* ret = cobj->getAnimation();
            object_to_sqval<cocos2d::Animation>(vm, "cc.Animation", (cocos2d::Animation*)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getAnimation", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Animate_setAnimation(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Animate* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Animate_setAnimation'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Animation* arg0;

        ok &= sqval_to_object<cocos2d::Animation>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setAnimation(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setAnimation", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Animate_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        cocos2d::Animation* arg0;
        ok &= sqval_to_object<cocos2d::Animation>(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::Animate* ret = cocos2d::Animate::create(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.Animate");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_Animate_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.Animate", -1);
    return 1;
}

void squirrel_cocos2dx_Animate_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::Animate", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_Animate(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("Animate"), -1);


    sq_pushstring(vm, _SC("ActionInterval"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "getAnimation", squirrel_cocos2dx_Animate_getAnimation);
    to_squirrel_function(vm, "setAnimation", squirrel_cocos2dx_Animate_setAnimation);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_Animate_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_Animate_typeof_meta);



    squirrel_cocos2dx_Animate_push_c_class(vm);

    std::string typeName = typeid(cocos2d::Animate).name();
    g_sqType[typeName] = "cc.Animate";

    return 1;
}
SQInteger squirrel_cocos2dx_ActionInterval_getAmplitudeRate(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ActionInterval* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ActionInterval_getAmplitudeRate'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getAmplitudeRate();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getAmplitudeRate", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ActionInterval_setAmplitudeRate(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ActionInterval* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ActionInterval_setAmplitudeRate'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setAmplitudeRate(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setAmplitudeRate", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ActionInterval_getElapsed(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ActionInterval* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ActionInterval_getElapsed'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getElapsed();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getElapsed", (int)argc, 0);
    return 0;
}

SQInteger squirrel_cocos2dx_ActionInterval_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.ActionInterval", -1);
    return 1;
}

void squirrel_cocos2dx_ActionInterval_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_ActionInterval(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("ActionInterval"), -1);


    sq_pushstring(vm, _SC("FiniteTimeAction"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "getAmplitudeRate", squirrel_cocos2dx_ActionInterval_getAmplitudeRate);
    to_squirrel_function(vm, "setAmplitudeRate", squirrel_cocos2dx_ActionInterval_setAmplitudeRate);
    to_squirrel_function(vm, "getElapsed", squirrel_cocos2dx_ActionInterval_getElapsed);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_ActionInterval_typeof_meta);



    squirrel_cocos2dx_ActionInterval_push_c_class(vm);

    std::string typeName = typeid(cocos2d::ActionInterval).name();
    g_sqType[typeName] = "cc.ActionInterval";

    return 1;
}
SQInteger squirrel_cocos2dx_ShuffleTiles_getDelta(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ShuffleTiles* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ShuffleTiles_getDelta'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Size arg0;

        cocos2d::Size* ptr2 = nullptr; ok &= sqval_to_size(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cocos2d::Size ret = cobj->getDelta(arg0);
        size_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getDelta", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ShuffleTiles_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 3)
    {
        float arg0;
        cocos2d::Size arg1;
        unsigned int arg2;
        ok &= sqval_to_float(vm, 2, &arg0);
        cocos2d::Size* ptr3 = nullptr; ok &= sqval_to_size(vm, 3, ptr3); arg1 = *ptr3;
        ok &= sqval_to_uint32(vm, 4, &arg2);
        if(!ok)
            return 0;
        cocos2d::ShuffleTiles* ret = cocos2d::ShuffleTiles::create(arg0, arg1, arg2);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.ShuffleTiles");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 3);
    return 0;
}

SQInteger squirrel_cocos2dx_ShuffleTiles_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.ShuffleTiles", -1);
    return 1;
}

void squirrel_cocos2dx_ShuffleTiles_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::ShuffleTiles", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::TiledGrid3DAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::GridAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_ShuffleTiles(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("ShuffleTiles"), -1);


    sq_pushstring(vm, _SC("TiledGrid3DAction"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "getDelta", squirrel_cocos2dx_ShuffleTiles_getDelta);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_ShuffleTiles_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_ShuffleTiles_typeof_meta);



    squirrel_cocos2dx_ShuffleTiles_push_c_class(vm);

    std::string typeName = typeid(cocos2d::ShuffleTiles).name();
    g_sqType[typeName] = "cc.ShuffleTiles";

    return 1;
}
SQInteger squirrel_cocos2dx_Size_equals(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Size* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Size_equals'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Size arg0;

        cocos2d::Size* ptr2 = nullptr; ok &= sqval_to_size(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        bool ret = cobj->equals(arg0);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "equals", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Size_setSize(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Size* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Size_setSize'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        float arg0;
        float arg1;

        ok &= sqval_to_float(vm, 2, &arg0);

        ok &= sqval_to_float(vm, 3, &arg1);
        if (!ok)
            return 0;
        cobj->setSize(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setSize", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_Size_constructor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Size* cobj = nullptr;
    bool ok  = true;

    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);

            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);

            if (!ok) { break; }
            cobj = new cocos2d::Size(arg0, arg1);
            sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
            sq_setreleasehook(vm, 1, squirrel_releasehook_Size);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 0) {

            cobj = new cocos2d::Size();
            sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
            sq_setreleasehook(vm, 1, squirrel_releasehook_Size);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Vec2")) {
                break;
            }

            cocos2d::Vec2 arg0;
            cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;

            if (!ok) { break; }
            cobj = new cocos2d::Size(arg0);
            sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
            sq_setreleasehook(vm, 1, squirrel_releasehook_Size);
            return 1;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "Size", (int)argc, 1);
    return 0;
}


SQInteger squirrel_cocos2dx_Size_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.Size", -1);
    return 1;
}

SQInteger squirrel_cocos2dx_Size_get_meta(HSQUIRRELVM vm)
{
    cocos2d::Size *cobj = nullptr;
    if (SQ_FAILED(sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0))) {
        CCLOG("cocos2d::Size sq_getinstanceup failed.");
        sq_pushnull(vm);
        return 1;
    }

    const char *varName = nullptr;
    sq_getstring(vm, 2, &varName);
    
    do {
        if (strcmp(varName, "width") == 0) {
            sq_pushfloat(vm, (SQFloat)cobj->width);
            break;
        }
        if (strcmp(varName, "height") == 0) {
            sq_pushfloat(vm, (SQFloat)cobj->height);
            break;
        }

        return 0;
        
    } while(0);

    return 1;
}

SQInteger squirrel_cocos2dx_Size_set_meta(HSQUIRRELVM vm)
{
    cocos2d::Size *cobj = nullptr;
    if (SQ_FAILED(sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0))) {
        CCLOG("cocos2d::Size sq_getinstanceup failed.");
        return 0;
    }

    bool ok  = true;
    const char *varName = nullptr;
    sq_getstring(vm, 2, &varName);
    
    do {
        if (strcmp(varName, "width") == 0) {
            ok &= sqval_to_float(vm, 3, &cobj->width);
            if (! ok) {
                return 0;
            }
            break;
        }
        if (strcmp(varName, "height") == 0) {
            ok &= sqval_to_float(vm, 3, &cobj->height);
            if (! ok) {
                return 0;
            }
            break;
        }

        CCLOG("specified variable is not found in cocos2d::Size");
    } while(0);

    return 0;
}

void squirrel_cocos2dx_Size_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::Size", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_Size(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("Size"), -1);

    sq_newclass(vm, SQFalse);

    to_squirrel_function(vm, "constructor", squirrel_cocos2dx_Size_constructor);
    to_squirrel_function(vm, "equals", squirrel_cocos2dx_Size_equals);
    to_squirrel_function(vm, "setSize", squirrel_cocos2dx_Size_setSize);

    to_squirrel_function(vm, "_get", squirrel_cocos2dx_Size_get_meta);
    to_squirrel_function(vm, "_set", squirrel_cocos2dx_Size_set_meta);
    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_Size_typeof_meta);

    to_squirrel_variable_object(vm, "ZERO", (SQUserPointer)&cocos2d::Size::ZERO, SQTrue);


    squirrel_cocos2dx_Size_push_c_class(vm);

    std::string typeName = typeid(cocos2d::Size).name();
    g_sqType[typeName] = "cc.Size";

    return 1;
}
SQInteger squirrel_cocos2dx_ParticleMeteor_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        cocos2d::ParticleMeteor* ret = cocos2d::ParticleMeteor::create();
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.ParticleMeteor");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleMeteor_createWithTotalParticles_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if(!ok)
            return 0;
        cocos2d::ParticleMeteor* ret = cocos2d::ParticleMeteor::createWithTotalParticles(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.ParticleMeteor");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "createWithTotalParticles", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_ParticleMeteor_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.ParticleMeteor", -1);
    return 1;
}

void squirrel_cocos2dx_ParticleMeteor_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::ParticleMeteor", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ParticleSystemQuad", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ParticleSystem", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TextureProtocol", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::BlendProtocol", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_ParticleMeteor(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("ParticleMeteor"), -1);


    sq_pushstring(vm, _SC("ParticleSystemQuad"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_ParticleMeteor_create_static, SQTrue);
    to_squirrel_function(vm, "createWithTotalParticles", squirrel_cocos2dx_ParticleMeteor_createWithTotalParticles_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_ParticleMeteor_typeof_meta);



    squirrel_cocos2dx_ParticleMeteor_push_c_class(vm);

    std::string typeName = typeid(cocos2d::ParticleMeteor).name();
    g_sqType[typeName] = "cc.ParticleMeteor";

    return 1;
}
SQInteger squirrel_cocos2dx_EaseQuarticActionIn_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        cocos2d::ActionInterval* arg0;
        ok &= sqval_to_object<cocos2d::ActionInterval>(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::EaseQuarticActionIn* ret = cocos2d::EaseQuarticActionIn::create(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.EaseQuarticActionIn");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_EaseQuarticActionIn_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.EaseQuarticActionIn", -1);
    return 1;
}

void squirrel_cocos2dx_EaseQuarticActionIn_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::EaseQuarticActionIn", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionEase", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_EaseQuarticActionIn(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("EaseQuarticActionIn"), -1);


    sq_pushstring(vm, _SC("ActionEase"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_EaseQuarticActionIn_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_EaseQuarticActionIn_typeof_meta);



    squirrel_cocos2dx_EaseQuarticActionIn_push_c_class(vm);

    std::string typeName = typeid(cocos2d::EaseQuarticActionIn).name();
    g_sqType[typeName] = "cc.EaseQuarticActionIn";

    return 1;
}
SQInteger squirrel_cocos2dx_TransitionFadeTR_easeActionWithAction(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TransitionFadeTR* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TransitionFadeTR_easeActionWithAction'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::ActionInterval* arg0;

        ok &= sqval_to_object<cocos2d::ActionInterval>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cocos2d::ActionInterval* ret = cobj->easeActionWithAction(arg0);
        object_to_sqval<cocos2d::ActionInterval>(vm, "cc.ActionInterval", (cocos2d::ActionInterval*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "easeActionWithAction", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TransitionFadeTR_actionWithSize(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TransitionFadeTR* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TransitionFadeTR_actionWithSize'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Size arg0;

        cocos2d::Size* ptr2 = nullptr; ok &= sqval_to_size(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cocos2d::ActionInterval* ret = cobj->actionWithSize(arg0);
        object_to_sqval<cocos2d::ActionInterval>(vm, "cc.ActionInterval", (cocos2d::ActionInterval*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "actionWithSize", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TransitionFadeTR_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        float arg0;
        cocos2d::Scene* arg1;
        ok &= sqval_to_float(vm, 2, &arg0);
        ok &= sqval_to_object<cocos2d::Scene>(vm, 3, &arg1);
        if(!ok)
            return 0;
        cocos2d::TransitionFadeTR* ret = cocos2d::TransitionFadeTR::create(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.TransitionFadeTR");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_TransitionFadeTR_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.TransitionFadeTR", -1);
    return 1;
}

void squirrel_cocos2dx_TransitionFadeTR_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::TransitionFadeTR", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::TransitionScene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Scene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TransitionEaseScene", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_TransitionFadeTR(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("TransitionFadeTR"), -1);


    sq_pushstring(vm, _SC("TransitionScene"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "easeActionWithAction", squirrel_cocos2dx_TransitionFadeTR_easeActionWithAction);
    to_squirrel_function(vm, "actionWithSize", squirrel_cocos2dx_TransitionFadeTR_actionWithSize);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_TransitionFadeTR_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_TransitionFadeTR_typeof_meta);



    squirrel_cocos2dx_TransitionFadeTR_push_c_class(vm);

    std::string typeName = typeid(cocos2d::TransitionFadeTR).name();
    g_sqType[typeName] = "cc.TransitionFadeTR";

    return 1;
}
SQInteger squirrel_cocos2dx_EaseInOut_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        cocos2d::ActionInterval* arg0;
        float arg1;
        ok &= sqval_to_object<cocos2d::ActionInterval>(vm, 2, &arg0);
        ok &= sqval_to_float(vm, 3, &arg1);
        if(!ok)
            return 0;
        cocos2d::EaseInOut* ret = cocos2d::EaseInOut::create(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.EaseInOut");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_EaseInOut_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.EaseInOut", -1);
    return 1;
}

void squirrel_cocos2dx_EaseInOut_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::EaseInOut", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::EaseRateAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionEase", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_EaseInOut(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("EaseInOut"), -1);


    sq_pushstring(vm, _SC("EaseRateAction"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_EaseInOut_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_EaseInOut_typeof_meta);



    squirrel_cocos2dx_EaseInOut_push_c_class(vm);

    std::string typeName = typeid(cocos2d::EaseInOut).name();
    g_sqType[typeName] = "cc.EaseInOut";

    return 1;
}
SQInteger squirrel_cocos2dx_TransitionZoomFlipY_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 2)
        {

            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Scene")) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::Scene* arg1;
            ok &= sqval_to_object<cocos2d::Scene>(vm, 3, &arg1);
            if (!ok) { break; }
            cocos2d::TransitionZoomFlipY* ret = cocos2d::TransitionZoomFlipY::create(arg0, arg1);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.TransitionZoomFlipY");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 3)
        {

            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Scene")) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INSTANCE || ! instanceof_cclass(vm, 4, "cocos2d::TransitionScene::Orientation")) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::Scene* arg1;
            ok &= sqval_to_object<cocos2d::Scene>(vm, 3, &arg1);
            if (!ok) { break; }
            cocos2d::TransitionScene::Orientation arg2;
            ok &= sqval_to_int32(vm, 4, (int *)&arg2);
            if (!ok) { break; }
            cocos2d::TransitionZoomFlipY* ret = cocos2d::TransitionZoomFlipY::create(arg0, arg1, arg2);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.TransitionZoomFlipY");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d", "create", (int)argc, 3);
    return 0;
}

SQInteger squirrel_cocos2dx_TransitionZoomFlipY_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.TransitionZoomFlipY", -1);
    return 1;
}

void squirrel_cocos2dx_TransitionZoomFlipY_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::TransitionZoomFlipY", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::TransitionSceneOriented", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TransitionScene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Scene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_TransitionZoomFlipY(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("TransitionZoomFlipY"), -1);


    sq_pushstring(vm, _SC("TransitionSceneOriented"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_TransitionZoomFlipY_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_TransitionZoomFlipY_typeof_meta);



    squirrel_cocos2dx_TransitionZoomFlipY_push_c_class(vm);

    std::string typeName = typeid(cocos2d::TransitionZoomFlipY).name();
    g_sqType[typeName] = "cc.TransitionZoomFlipY";

    return 1;
}
SQInteger squirrel_cocos2dx_ScaleBy_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 3)
        {

            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);
            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);
            if (!ok) { break; }
            float arg2;
            ok &= sqval_to_float(vm, 4, &arg2);
            if (!ok) { break; }
            cocos2d::ScaleBy* ret = cocos2d::ScaleBy::create(arg0, arg1, arg2);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.ScaleBy");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 2)
        {

            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);
            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);
            if (!ok) { break; }
            cocos2d::ScaleBy* ret = cocos2d::ScaleBy::create(arg0, arg1);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.ScaleBy");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 4)
        {

            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INTEGER && sq_gettype(vm, 5) != OT_FLOAT) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);
            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);
            if (!ok) { break; }
            float arg2;
            ok &= sqval_to_float(vm, 4, &arg2);
            if (!ok) { break; }
            float arg3;
            ok &= sqval_to_float(vm, 5, &arg3);
            if (!ok) { break; }
            cocos2d::ScaleBy* ret = cocos2d::ScaleBy::create(arg0, arg1, arg2, arg3);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.ScaleBy");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d", "create", (int)argc, 4);
    return 0;
}

SQInteger squirrel_cocos2dx_ScaleBy_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.ScaleBy", -1);
    return 1;
}

void squirrel_cocos2dx_ScaleBy_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::ScaleBy", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ScaleTo", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_ScaleBy(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("ScaleBy"), -1);


    sq_pushstring(vm, _SC("ScaleTo"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_ScaleBy_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_ScaleBy_typeof_meta);



    squirrel_cocos2dx_ScaleBy_push_c_class(vm);

    std::string typeName = typeid(cocos2d::ScaleBy).name();
    g_sqType[typeName] = "cc.ScaleBy";

    return 1;
}
SQInteger squirrel_cocos2dx_EventTouch_getEventCode(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::EventTouch* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_EventTouch_getEventCode'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        int ret = (int)cobj->getEventCode();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getEventCode", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_EventTouch_setEventCode(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::EventTouch* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_EventTouch_setEventCode'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::EventTouch::EventCode arg0;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if (!ok)
            return 0;
        cobj->setEventCode(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setEventCode", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_EventTouch_constructor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::EventTouch* cobj = nullptr;
    bool ok  = true;

    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj = new cocos2d::EventTouch();
        sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
        cobj->retain();
        sq_setreleasehook(vm, 1, squirrel_releasehook_Ref);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "EventTouch", (int)argc, 0);
    return 0;
}


SQInteger squirrel_cocos2dx_EventTouch_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.EventTouch", -1);
    return 1;
}

void squirrel_cocos2dx_EventTouch_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::EventTouch", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Event", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_EventTouch(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("EventTouch"), -1);


    sq_pushstring(vm, _SC("Event"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "constructor", squirrel_cocos2dx_EventTouch_constructor);
    to_squirrel_function(vm, "getEventCode", squirrel_cocos2dx_EventTouch_getEventCode);
    to_squirrel_function(vm, "setEventCode", squirrel_cocos2dx_EventTouch_setEventCode);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_EventTouch_typeof_meta);

    to_squirrel_variable_integer(vm, "MAX_TOUCHES", (SQInteger)cocos2d::EventTouch::MAX_TOUCHES, SQTrue);

    sq_pushstring(vm, _SC("EventCode"), -1);
    sq_newtable(vm);
    to_squirrel_variable_integer(vm, "BEGAN", (SQInteger)cocos2d::EventTouch::EventCode::BEGAN, SQTrue);
    to_squirrel_variable_integer(vm, "MOVED", (SQInteger)cocos2d::EventTouch::EventCode::MOVED, SQTrue);
    to_squirrel_variable_integer(vm, "ENDED", (SQInteger)cocos2d::EventTouch::EventCode::ENDED, SQTrue);
    to_squirrel_variable_integer(vm, "CANCELLED", (SQInteger)cocos2d::EventTouch::EventCode::CANCELLED, SQTrue);
    sq_newslot(vm, -3, SQTrue);

    squirrel_cocos2dx_EventTouch_push_c_class(vm);

    std::string typeName = typeid(cocos2d::EventTouch).name();
    g_sqType[typeName] = "cc.EventTouch";

    return 1;
}
SQInteger squirrel_cocos2dx_Animation_getLoops(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Animation* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Animation_getLoops'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        unsigned int ret = cobj->getLoops();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getLoops", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Animation_addSpriteFrame(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Animation* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Animation_addSpriteFrame'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::SpriteFrame* arg0;

        ok &= sqval_to_object<cocos2d::SpriteFrame>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->addSpriteFrame(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "addSpriteFrame", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Animation_setRestoreOriginalFrame(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Animation* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Animation_setRestoreOriginalFrame'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setRestoreOriginalFrame(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setRestoreOriginalFrame", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Animation_clone(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Animation* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Animation_clone'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Animation* ret = cobj->clone();
        object_to_sqval<cocos2d::Animation>(vm, "cc.Animation", (cocos2d::Animation*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "clone", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Animation_getDuration(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Animation* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Animation_getDuration'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getDuration();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getDuration", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Animation_setFrames(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Animation* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Animation_setFrames'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vector<cocos2d::AnimationFrame *> arg0;

        ok &= sqval_to_ccvector(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setFrames(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setFrames", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Animation_getFrames(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Animation* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Animation_getFrames'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::Vector<cocos2d::AnimationFrame *>& ret = cobj->getFrames();
        ccvector_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getFrames", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Animation_setLoops(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Animation* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Animation_setLoops'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        unsigned int arg0;

        ok &= sqval_to_uint32(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setLoops(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setLoops", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Animation_setDelayPerUnit(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Animation* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Animation_setDelayPerUnit'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setDelayPerUnit(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setDelayPerUnit", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Animation_addSpriteFrameWithFile(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Animation* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Animation_addSpriteFrameWithFile'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->addSpriteFrameWithFile(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "addSpriteFrameWithFile", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Animation_getTotalDelayUnits(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Animation* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Animation_getTotalDelayUnits'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getTotalDelayUnits();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getTotalDelayUnits", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Animation_getDelayPerUnit(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Animation* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Animation_getDelayPerUnit'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getDelayPerUnit();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getDelayPerUnit", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Animation_getRestoreOriginalFrame(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Animation* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Animation_getRestoreOriginalFrame'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->getRestoreOriginalFrame();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getRestoreOriginalFrame", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Animation_addSpriteFrameWithTexture(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Animation* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Animation_addSpriteFrameWithTexture'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        cocos2d::Texture2D* arg0;
        cocos2d::Rect arg1;

        ok &= sqval_to_object<cocos2d::Texture2D>(vm, 2, &arg0);

        cocos2d::Rect* ptr3 = nullptr; ok &= sqval_to_rect(vm, 3, ptr3); arg1 = *ptr3;
        if (!ok)
            return 0;
        cobj->addSpriteFrameWithTexture(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "addSpriteFrameWithTexture", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_Animation_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 2)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Vector<cocos2d::AnimationFrame >")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }

            cocos2d::Vector<cocos2d::AnimationFrame *> arg0;
            ok &= sqval_to_ccvector(vm, 2, &arg0);
            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);
            if (!ok) { break; }
            cocos2d::Animation* ret = cocos2d::Animation::create(arg0, arg1);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.Animation");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 3)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Vector<cocos2d::AnimationFrame >")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }

            cocos2d::Vector<cocos2d::AnimationFrame *> arg0;
            ok &= sqval_to_ccvector(vm, 2, &arg0);
            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);
            if (!ok) { break; }
            unsigned int arg2;
            ok &= sqval_to_uint32(vm, 4, &arg2);
            if (!ok) { break; }
            cocos2d::Animation* ret = cocos2d::Animation::create(arg0, arg1, arg2);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.Animation");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 0)
        {


            cocos2d::Animation* ret = cocos2d::Animation::create();
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.Animation");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d", "create", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Animation_createWithSpriteFrames_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        cocos2d::Vector<cocos2d::SpriteFrame *> arg0;
        ok &= sqval_to_ccvector(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::Animation* ret = cocos2d::Animation::createWithSpriteFrames(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.Animation");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    if (argc == 2)
    {
        cocos2d::Vector<cocos2d::SpriteFrame *> arg0;
        float arg1;
        ok &= sqval_to_ccvector(vm, 2, &arg0);
        ok &= sqval_to_float(vm, 3, &arg1);
        if(!ok)
            return 0;
        cocos2d::Animation* ret = cocos2d::Animation::createWithSpriteFrames(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.Animation");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    if (argc == 3)
    {
        cocos2d::Vector<cocos2d::SpriteFrame *> arg0;
        float arg1;
        unsigned int arg2;
        ok &= sqval_to_ccvector(vm, 2, &arg0);
        ok &= sqval_to_float(vm, 3, &arg1);
        ok &= sqval_to_uint32(vm, 4, &arg2);
        if(!ok)
            return 0;
        cocos2d::Animation* ret = cocos2d::Animation::createWithSpriteFrames(arg0, arg1, arg2);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.Animation");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "createWithSpriteFrames", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_Animation_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.Animation", -1);
    return 1;
}

void squirrel_cocos2dx_Animation_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::Animation", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_Animation(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("Animation"), -1);


    sq_pushstring(vm, _SC("Ref"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "getLoops", squirrel_cocos2dx_Animation_getLoops);
    to_squirrel_function(vm, "addSpriteFrame", squirrel_cocos2dx_Animation_addSpriteFrame);
    to_squirrel_function(vm, "setRestoreOriginalFrame", squirrel_cocos2dx_Animation_setRestoreOriginalFrame);
    to_squirrel_function(vm, "clone", squirrel_cocos2dx_Animation_clone);
    to_squirrel_function(vm, "getDuration", squirrel_cocos2dx_Animation_getDuration);
    to_squirrel_function(vm, "setFrames", squirrel_cocos2dx_Animation_setFrames);
    to_squirrel_function(vm, "getFrames", squirrel_cocos2dx_Animation_getFrames);
    to_squirrel_function(vm, "setLoops", squirrel_cocos2dx_Animation_setLoops);
    to_squirrel_function(vm, "setDelayPerUnit", squirrel_cocos2dx_Animation_setDelayPerUnit);
    to_squirrel_function(vm, "addSpriteFrameWithFile", squirrel_cocos2dx_Animation_addSpriteFrameWithFile);
    to_squirrel_function(vm, "getTotalDelayUnits", squirrel_cocos2dx_Animation_getTotalDelayUnits);
    to_squirrel_function(vm, "getDelayPerUnit", squirrel_cocos2dx_Animation_getDelayPerUnit);
    to_squirrel_function(vm, "getRestoreOriginalFrame", squirrel_cocos2dx_Animation_getRestoreOriginalFrame);
    to_squirrel_function(vm, "addSpriteFrameWithTexture", squirrel_cocos2dx_Animation_addSpriteFrameWithTexture);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_Animation_create_static, SQTrue);
    to_squirrel_function(vm, "createWithSpriteFrames", squirrel_cocos2dx_Animation_createWithSpriteFrames_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_Animation_typeof_meta);



    squirrel_cocos2dx_Animation_push_c_class(vm);

    std::string typeName = typeid(cocos2d::Animation).name();
    g_sqType[typeName] = "cc.Animation";

    return 1;
}
SQInteger squirrel_cocos2dx_CardinalSplineTo_getPoints(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::CardinalSplineTo* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_CardinalSplineTo_getPoints'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::PointArray* ret = cobj->getPoints();
        object_to_sqval<cocos2d::PointArray>(vm, "cc.PointArray", (cocos2d::PointArray*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getPoints", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_CardinalSplineTo_updatePosition(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::CardinalSplineTo* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_CardinalSplineTo_updatePosition'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec2 arg0;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->updatePosition(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "updatePosition", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_CardinalSplineTo_initWithDuration(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::CardinalSplineTo* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_CardinalSplineTo_initWithDuration'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 3) 
    {
        float arg0;
        cocos2d::PointArray* arg1;
        float arg2;

        ok &= sqval_to_float(vm, 2, &arg0);

        ok &= sqval_to_object<cocos2d::PointArray>(vm, 3, &arg1);

        ok &= sqval_to_float(vm, 4, &arg2);
        if (!ok)
            return 0;
        bool ret = cobj->initWithDuration(arg0, arg1, arg2);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "initWithDuration", (int)argc, 3);
    return 0;
}
SQInteger squirrel_cocos2dx_CardinalSplineTo_constructor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::CardinalSplineTo* cobj = nullptr;
    bool ok  = true;

    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj = new cocos2d::CardinalSplineTo();
        sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
        cobj->retain();
        sq_setreleasehook(vm, 1, squirrel_releasehook_Ref);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "CardinalSplineTo", (int)argc, 0);
    return 0;
}


SQInteger squirrel_cocos2dx_CardinalSplineTo_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.CardinalSplineTo", -1);
    return 1;
}

void squirrel_cocos2dx_CardinalSplineTo_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::CardinalSplineTo", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_CardinalSplineTo(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("CardinalSplineTo"), -1);


    sq_pushstring(vm, _SC("ActionInterval"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "constructor", squirrel_cocos2dx_CardinalSplineTo_constructor);
    to_squirrel_function(vm, "getPoints", squirrel_cocos2dx_CardinalSplineTo_getPoints);
    to_squirrel_function(vm, "updatePosition", squirrel_cocos2dx_CardinalSplineTo_updatePosition);
    to_squirrel_function(vm, "initWithDuration", squirrel_cocos2dx_CardinalSplineTo_initWithDuration);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_CardinalSplineTo_typeof_meta);



    squirrel_cocos2dx_CardinalSplineTo_push_c_class(vm);

    std::string typeName = typeid(cocos2d::CardinalSplineTo).name();
    g_sqType[typeName] = "cc.CardinalSplineTo";

    return 1;
}
SQInteger squirrel_cocos2dx_TMXMapInfo_setObjectGroups(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TMXMapInfo* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXMapInfo_setObjectGroups'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vector<cocos2d::TMXObjectGroup *> arg0;

        ok &= sqval_to_ccvector(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setObjectGroups(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setObjectGroups", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXMapInfo_setTileSize(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TMXMapInfo* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXMapInfo_setTileSize'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Size arg0;

        cocos2d::Size* ptr2 = nullptr; ok &= sqval_to_size(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->setTileSize(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setTileSize", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXMapInfo_initWithTMXFile(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TMXMapInfo* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXMapInfo_initWithTMXFile'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        bool ret = cobj->initWithTMXFile(arg0);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "initWithTMXFile", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXMapInfo_getOrientation(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TMXMapInfo* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXMapInfo_getOrientation'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        int ret = cobj->getOrientation();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getOrientation", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXMapInfo_isStoringCharacters(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TMXMapInfo* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXMapInfo_isStoringCharacters'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isStoringCharacters();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isStoringCharacters", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXMapInfo_setLayers(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TMXMapInfo* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXMapInfo_setLayers'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vector<cocos2d::TMXLayerInfo *> arg0;

        ok &= sqval_to_ccvector(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setLayers(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setLayers", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXMapInfo_parseXMLFile(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TMXMapInfo* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXMapInfo_parseXMLFile'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        bool ret = cobj->parseXMLFile(arg0);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "parseXMLFile", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXMapInfo_getParentElement(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TMXMapInfo* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXMapInfo_getParentElement'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        int ret = cobj->getParentElement();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getParentElement", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXMapInfo_setTMXFileName(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TMXMapInfo* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXMapInfo_setTMXFileName'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setTMXFileName(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setTMXFileName", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXMapInfo_parseXMLString(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TMXMapInfo* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXMapInfo_parseXMLString'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        bool ret = cobj->parseXMLString(arg0);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "parseXMLString", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXMapInfo_getLayers(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TMXMapInfo* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXMapInfo_getLayers'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 0) {

            cocos2d::Vector<cocos2d::TMXLayerInfo *>& ret = cobj->getLayers();
            ccvector_to_sqval(vm, ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 0) {

            const cocos2d::Vector<cocos2d::TMXLayerInfo *>& ret = cobj->getLayers();
            ccvector_to_sqval(vm, ret);
            return 1;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getLayers", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXMapInfo_getTilesets(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TMXMapInfo* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXMapInfo_getTilesets'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 0) {

            cocos2d::Vector<cocos2d::TMXTilesetInfo *>& ret = cobj->getTilesets();
            ccvector_to_sqval(vm, ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 0) {

            const cocos2d::Vector<cocos2d::TMXTilesetInfo *>& ret = cobj->getTilesets();
            ccvector_to_sqval(vm, ret);
            return 1;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getTilesets", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXMapInfo_getParentGID(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TMXMapInfo* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXMapInfo_getParentGID'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        int ret = cobj->getParentGID();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getParentGID", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXMapInfo_setParentElement(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TMXMapInfo* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXMapInfo_setParentElement'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        int arg0;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if (!ok)
            return 0;
        cobj->setParentElement(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setParentElement", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXMapInfo_initWithXML(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TMXMapInfo* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXMapInfo_initWithXML'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        std::string arg0;
        std::string arg1;

        ok &= sqval_to_std_string(vm, 2, &arg0);

        ok &= sqval_to_std_string(vm, 3, &arg1);
        if (!ok)
            return 0;
        bool ret = cobj->initWithXML(arg0, arg1);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "initWithXML", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXMapInfo_setParentGID(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TMXMapInfo* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXMapInfo_setParentGID'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        int arg0;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if (!ok)
            return 0;
        cobj->setParentGID(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setParentGID", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXMapInfo_getLayerAttribs(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TMXMapInfo* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXMapInfo_getLayerAttribs'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        int ret = cobj->getLayerAttribs();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getLayerAttribs", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXMapInfo_getTileSize(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TMXMapInfo* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXMapInfo_getTileSize'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::Size& ret = cobj->getTileSize();
        size_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getTileSize", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXMapInfo_getTileProperties(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TMXMapInfo* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXMapInfo_getTileProperties'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::ValueMapIntKey& ret = cobj->getTileProperties();
        ccvaluemapintkey_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getTileProperties", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXMapInfo_getObjectGroups(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TMXMapInfo* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXMapInfo_getObjectGroups'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 0) {

            cocos2d::Vector<cocos2d::TMXObjectGroup *>& ret = cobj->getObjectGroups();
            ccvector_to_sqval(vm, ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 0) {

            const cocos2d::Vector<cocos2d::TMXObjectGroup *>& ret = cobj->getObjectGroups();
            ccvector_to_sqval(vm, ret);
            return 1;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getObjectGroups", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXMapInfo_getTMXFileName(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TMXMapInfo* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXMapInfo_getTMXFileName'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const std::string& ret = cobj->getTMXFileName();
        sq_pushstring(vm, (const SQChar *)ret.c_str(), -1);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getTMXFileName", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXMapInfo_setCurrentString(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TMXMapInfo* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXMapInfo_setCurrentString'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setCurrentString(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setCurrentString", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXMapInfo_setProperties(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TMXMapInfo* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXMapInfo_setProperties'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::ValueMap arg0;

        ok &= sqval_to_ccvaluemap(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setProperties(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setProperties", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXMapInfo_setOrientation(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TMXMapInfo* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXMapInfo_setOrientation'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        int arg0;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if (!ok)
            return 0;
        cobj->setOrientation(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setOrientation", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXMapInfo_setTileProperties(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TMXMapInfo* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXMapInfo_setTileProperties'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::ValueMapIntKey arg0;

        ok &= sqval_to_ccvaluemapintkey(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setTileProperties(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setTileProperties", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXMapInfo_setMapSize(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TMXMapInfo* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXMapInfo_setMapSize'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Size arg0;

        cocos2d::Size* ptr2 = nullptr; ok &= sqval_to_size(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->setMapSize(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setMapSize", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXMapInfo_setStoringCharacters(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TMXMapInfo* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXMapInfo_setStoringCharacters'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setStoringCharacters(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setStoringCharacters", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXMapInfo_getMapSize(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TMXMapInfo* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXMapInfo_getMapSize'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::Size& ret = cobj->getMapSize();
        size_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getMapSize", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXMapInfo_setTilesets(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TMXMapInfo* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXMapInfo_setTilesets'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vector<cocos2d::TMXTilesetInfo *> arg0;

        ok &= sqval_to_ccvector(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setTilesets(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setTilesets", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXMapInfo_getProperties(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TMXMapInfo* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXMapInfo_getProperties'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 0) {

            cocos2d::ValueMap& ret = cobj->getProperties();
            ccvaluemap_to_sqval(vm, ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 0) {

            const cocos2d::ValueMap& ret = cobj->getProperties();
            ccvaluemap_to_sqval(vm, ret);
            return 1;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getProperties", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXMapInfo_getCurrentString(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TMXMapInfo* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXMapInfo_getCurrentString'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const std::string& ret = cobj->getCurrentString();
        sq_pushstring(vm, (const SQChar *)ret.c_str(), -1);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getCurrentString", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXMapInfo_setLayerAttribs(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TMXMapInfo* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TMXMapInfo_setLayerAttribs'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        int arg0;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if (!ok)
            return 0;
        cobj->setLayerAttribs(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setLayerAttribs", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXMapInfo_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        std::string arg0;
        ok &= sqval_to_std_string(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::TMXMapInfo* ret = cocos2d::TMXMapInfo::create(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.TMXMapInfo");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXMapInfo_createWithXML_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        std::string arg0;
        std::string arg1;
        ok &= sqval_to_std_string(vm, 2, &arg0);
        ok &= sqval_to_std_string(vm, 3, &arg1);
        if(!ok)
            return 0;
        cocos2d::TMXMapInfo* ret = cocos2d::TMXMapInfo::createWithXML(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.TMXMapInfo");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "createWithXML", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_TMXMapInfo_constructor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TMXMapInfo* cobj = nullptr;
    bool ok  = true;

    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj = new cocos2d::TMXMapInfo();
        sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
        cobj->retain();
        sq_setreleasehook(vm, 1, squirrel_releasehook_Ref);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "TMXMapInfo", (int)argc, 0);
    return 0;
}


SQInteger squirrel_cocos2dx_TMXMapInfo_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.TMXMapInfo", -1);
    return 1;
}

void squirrel_cocos2dx_TMXMapInfo_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::TMXMapInfo", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_TMXMapInfo(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("TMXMapInfo"), -1);

    sq_newclass(vm, SQFalse);

    to_squirrel_function(vm, "constructor", squirrel_cocos2dx_TMXMapInfo_constructor);
    to_squirrel_function(vm, "setObjectGroups", squirrel_cocos2dx_TMXMapInfo_setObjectGroups);
    to_squirrel_function(vm, "setTileSize", squirrel_cocos2dx_TMXMapInfo_setTileSize);
    to_squirrel_function(vm, "initWithTMXFile", squirrel_cocos2dx_TMXMapInfo_initWithTMXFile);
    to_squirrel_function(vm, "getOrientation", squirrel_cocos2dx_TMXMapInfo_getOrientation);
    to_squirrel_function(vm, "isStoringCharacters", squirrel_cocos2dx_TMXMapInfo_isStoringCharacters);
    to_squirrel_function(vm, "setLayers", squirrel_cocos2dx_TMXMapInfo_setLayers);
    to_squirrel_function(vm, "parseXMLFile", squirrel_cocos2dx_TMXMapInfo_parseXMLFile);
    to_squirrel_function(vm, "getParentElement", squirrel_cocos2dx_TMXMapInfo_getParentElement);
    to_squirrel_function(vm, "setTMXFileName", squirrel_cocos2dx_TMXMapInfo_setTMXFileName);
    to_squirrel_function(vm, "parseXMLString", squirrel_cocos2dx_TMXMapInfo_parseXMLString);
    to_squirrel_function(vm, "getLayers", squirrel_cocos2dx_TMXMapInfo_getLayers);
    to_squirrel_function(vm, "getTilesets", squirrel_cocos2dx_TMXMapInfo_getTilesets);
    to_squirrel_function(vm, "getParentGID", squirrel_cocos2dx_TMXMapInfo_getParentGID);
    to_squirrel_function(vm, "setParentElement", squirrel_cocos2dx_TMXMapInfo_setParentElement);
    to_squirrel_function(vm, "initWithXML", squirrel_cocos2dx_TMXMapInfo_initWithXML);
    to_squirrel_function(vm, "setParentGID", squirrel_cocos2dx_TMXMapInfo_setParentGID);
    to_squirrel_function(vm, "getLayerAttribs", squirrel_cocos2dx_TMXMapInfo_getLayerAttribs);
    to_squirrel_function(vm, "getTileSize", squirrel_cocos2dx_TMXMapInfo_getTileSize);
    to_squirrel_function(vm, "getTileProperties", squirrel_cocos2dx_TMXMapInfo_getTileProperties);
    to_squirrel_function(vm, "getObjectGroups", squirrel_cocos2dx_TMXMapInfo_getObjectGroups);
    to_squirrel_function(vm, "getTMXFileName", squirrel_cocos2dx_TMXMapInfo_getTMXFileName);
    to_squirrel_function(vm, "setCurrentString", squirrel_cocos2dx_TMXMapInfo_setCurrentString);
    to_squirrel_function(vm, "setProperties", squirrel_cocos2dx_TMXMapInfo_setProperties);
    to_squirrel_function(vm, "setOrientation", squirrel_cocos2dx_TMXMapInfo_setOrientation);
    to_squirrel_function(vm, "setTileProperties", squirrel_cocos2dx_TMXMapInfo_setTileProperties);
    to_squirrel_function(vm, "setMapSize", squirrel_cocos2dx_TMXMapInfo_setMapSize);
    to_squirrel_function(vm, "setStoringCharacters", squirrel_cocos2dx_TMXMapInfo_setStoringCharacters);
    to_squirrel_function(vm, "getMapSize", squirrel_cocos2dx_TMXMapInfo_getMapSize);
    to_squirrel_function(vm, "setTilesets", squirrel_cocos2dx_TMXMapInfo_setTilesets);
    to_squirrel_function(vm, "getProperties", squirrel_cocos2dx_TMXMapInfo_getProperties);
    to_squirrel_function(vm, "getCurrentString", squirrel_cocos2dx_TMXMapInfo_getCurrentString);
    to_squirrel_function(vm, "setLayerAttribs", squirrel_cocos2dx_TMXMapInfo_setLayerAttribs);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_TMXMapInfo_create_static, SQTrue);
    to_squirrel_function(vm, "createWithXML", squirrel_cocos2dx_TMXMapInfo_createWithXML_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_TMXMapInfo_typeof_meta);



    squirrel_cocos2dx_TMXMapInfo_push_c_class(vm);

    std::string typeName = typeid(cocos2d::TMXMapInfo).name();
    g_sqType[typeName] = "cc.TMXMapInfo";

    return 1;
}
SQInteger squirrel_cocos2dx_EaseExponentialIn_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        cocos2d::ActionInterval* arg0;
        ok &= sqval_to_object<cocos2d::ActionInterval>(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::EaseExponentialIn* ret = cocos2d::EaseExponentialIn::create(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.EaseExponentialIn");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_EaseExponentialIn_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.EaseExponentialIn", -1);
    return 1;
}

void squirrel_cocos2dx_EaseExponentialIn_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::EaseExponentialIn", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionEase", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_EaseExponentialIn(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("EaseExponentialIn"), -1);


    sq_pushstring(vm, _SC("ActionEase"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_EaseExponentialIn_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_EaseExponentialIn_typeof_meta);



    squirrel_cocos2dx_EaseExponentialIn_push_c_class(vm);

    std::string typeName = typeid(cocos2d::EaseExponentialIn).name();
    g_sqType[typeName] = "cc.EaseExponentialIn";

    return 1;
}
SQInteger squirrel_cocos2dx_ReuseGrid_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if(!ok)
            return 0;
        cocos2d::ReuseGrid* ret = cocos2d::ReuseGrid::create(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.ReuseGrid");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_ReuseGrid_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.ReuseGrid", -1);
    return 1;
}

void squirrel_cocos2dx_ReuseGrid_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::ReuseGrid", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionInstant", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_ReuseGrid(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("ReuseGrid"), -1);


    sq_pushstring(vm, _SC("ActionInstant"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_ReuseGrid_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_ReuseGrid_typeof_meta);



    squirrel_cocos2dx_ReuseGrid_push_c_class(vm);

    std::string typeName = typeid(cocos2d::ReuseGrid).name();
    g_sqType[typeName] = "cc.ReuseGrid";

    return 1;
}
SQInteger squirrel_cocos2dx_MenuItemAtlasFont_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 6)
        {

            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INTEGER && sq_gettype(vm, 5) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 6) != OT_INTEGER && sq_gettype(vm, 6) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 7) != OT_CLOSURE) {
                break;
            }
            HSQOBJECT callback7;
            sq_getstackobj(vm, 7, &callback7);

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);
            if (!ok) { break; }
            std::string arg1;
            ok &= sqval_to_std_string(vm, 3, &arg1);
            if (!ok) { break; }
            int arg2;
            ok &= sqval_to_int32(vm, 4, (int *)&arg2);
            if (!ok) { break; }
            int arg3;
            ok &= sqval_to_int32(vm, 5, (int *)&arg3);
            if (!ok) { break; }
            int32_t arg4;
            ok &= sqval_to_int32(vm, 6, &arg4);
            if (!ok) { break; }
            std::function<void (cocos2d::Ref *)> arg5;
            do {
			    // Lambda binding for squirrel
			    arg5 = [vm, callback7](cocos2d::Ref* larg0) -> void {
			        if (sq_getrefcount(vm, (HSQOBJECT *)&callback7) > 0) {
			            sq_pushobject(vm, callback7);
			            sq_push(vm, 1);
			            object_to_sqval<cocos2d::Ref>(vm, "cc.Ref", (cocos2d::Ref*)larg0);
			            sq_call(vm, 2, SQFalse, SQTrue);
			            sq_poptop(vm);
			        }
			    };
			} while(0);
            if (!ok) { break; }
            cocos2d::MenuItemAtlasFont* ret = cocos2d::MenuItemAtlasFont::create(arg0, arg1, arg2, arg3, arg4, arg5);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.MenuItemAtlasFont");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            _SquirrelObject *sqobj = (_SquirrelObject *)ret->_scriptObject;
            sqobj->addClosure("callback7", callback7);
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 5)
        {

            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INTEGER && sq_gettype(vm, 5) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 6) != OT_INTEGER && sq_gettype(vm, 6) != OT_FLOAT) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);
            if (!ok) { break; }
            std::string arg1;
            ok &= sqval_to_std_string(vm, 3, &arg1);
            if (!ok) { break; }
            int arg2;
            ok &= sqval_to_int32(vm, 4, (int *)&arg2);
            if (!ok) { break; }
            int arg3;
            ok &= sqval_to_int32(vm, 5, (int *)&arg3);
            if (!ok) { break; }
            int32_t arg4;
            ok &= sqval_to_int32(vm, 6, &arg4);
            if (!ok) { break; }
            cocos2d::MenuItemAtlasFont* ret = cocos2d::MenuItemAtlasFont::create(arg0, arg1, arg2, arg3, arg4);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.MenuItemAtlasFont");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d", "create", (int)argc, 5);
    return 0;
}

SQInteger squirrel_cocos2dx_MenuItemAtlasFont_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.MenuItemAtlasFont", -1);
    return 1;
}

void squirrel_cocos2dx_MenuItemAtlasFont_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::MenuItemAtlasFont", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::MenuItemLabel", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::MenuItem", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_MenuItemAtlasFont(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("MenuItemAtlasFont"), -1);


    sq_pushstring(vm, _SC("MenuItemLabel"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_MenuItemAtlasFont_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_MenuItemAtlasFont_typeof_meta);



    squirrel_cocos2dx_MenuItemAtlasFont_push_c_class(vm);

    std::string typeName = typeid(cocos2d::MenuItemAtlasFont).name();
    g_sqType[typeName] = "cc.MenuItemAtlasFont";

    return 1;
}
SQInteger squirrel_cocos2dx_EaseQuinticActionOut_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        cocos2d::ActionInterval* arg0;
        ok &= sqval_to_object<cocos2d::ActionInterval>(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::EaseQuinticActionOut* ret = cocos2d::EaseQuinticActionOut::create(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.EaseQuinticActionOut");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_EaseQuinticActionOut_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.EaseQuinticActionOut", -1);
    return 1;
}

void squirrel_cocos2dx_EaseQuinticActionOut_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::EaseQuinticActionOut", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionEase", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_EaseQuinticActionOut(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("EaseQuinticActionOut"), -1);


    sq_pushstring(vm, _SC("ActionEase"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_EaseQuinticActionOut_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_EaseQuinticActionOut_typeof_meta);



    squirrel_cocos2dx_EaseQuinticActionOut_push_c_class(vm);

    std::string typeName = typeid(cocos2d::EaseQuinticActionOut).name();
    g_sqType[typeName] = "cc.EaseQuinticActionOut";

    return 1;
}
SQInteger squirrel_cocos2dx_EventDispatcher_pauseEventListenersForTarget(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::EventDispatcher* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_EventDispatcher_pauseEventListenersForTarget'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Node* arg0;

        ok &= sqval_to_object<cocos2d::Node>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->pauseEventListenersForTarget(arg0);
        return 0;
    }
    if (argc == 2) 
    {
        cocos2d::Node* arg0;
        bool arg1;

        ok &= sqval_to_object<cocos2d::Node>(vm, 2, &arg0);

        ok &= sqval_to_boolean(vm, 3, &arg1);
        if (!ok)
            return 0;
        cobj->pauseEventListenersForTarget(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "pauseEventListenersForTarget", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_EventDispatcher_addEventListenerWithSceneGraphPriority(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::EventDispatcher* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_EventDispatcher_addEventListenerWithSceneGraphPriority'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        cocos2d::EventListener* arg0;
        cocos2d::Node* arg1;

        ok &= sqval_to_object<cocos2d::EventListener>(vm, 2, &arg0);

        ok &= sqval_to_object<cocos2d::Node>(vm, 3, &arg1);
        if (!ok)
            return 0;
        cobj->addEventListenerWithSceneGraphPriority(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "addEventListenerWithSceneGraphPriority", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_EventDispatcher_setEnabled(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::EventDispatcher* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_EventDispatcher_setEnabled'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setEnabled(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setEnabled", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_EventDispatcher_addEventListenerWithFixedPriority(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::EventDispatcher* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_EventDispatcher_addEventListenerWithFixedPriority'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        cocos2d::EventListener* arg0;
        int arg1;

        ok &= sqval_to_object<cocos2d::EventListener>(vm, 2, &arg0);

        ok &= sqval_to_int32(vm, 3, (int *)&arg1);
        if (!ok)
            return 0;
        cobj->addEventListenerWithFixedPriority(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "addEventListenerWithFixedPriority", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_EventDispatcher_removeEventListener(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::EventDispatcher* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_EventDispatcher_removeEventListener'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::EventListener* arg0;

        ok &= sqval_to_object<cocos2d::EventListener>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->removeEventListener(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "removeEventListener", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_EventDispatcher_resumeEventListenersForTarget(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::EventDispatcher* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_EventDispatcher_resumeEventListenersForTarget'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Node* arg0;

        ok &= sqval_to_object<cocos2d::Node>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->resumeEventListenersForTarget(arg0);
        return 0;
    }
    if (argc == 2) 
    {
        cocos2d::Node* arg0;
        bool arg1;

        ok &= sqval_to_object<cocos2d::Node>(vm, 2, &arg0);

        ok &= sqval_to_boolean(vm, 3, &arg1);
        if (!ok)
            return 0;
        cobj->resumeEventListenersForTarget(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "resumeEventListenersForTarget", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_EventDispatcher_removeEventListenersForTarget(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::EventDispatcher* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_EventDispatcher_removeEventListenersForTarget'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Node* arg0;

        ok &= sqval_to_object<cocos2d::Node>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->removeEventListenersForTarget(arg0);
        return 0;
    }
    if (argc == 2) 
    {
        cocos2d::Node* arg0;
        bool arg1;

        ok &= sqval_to_object<cocos2d::Node>(vm, 2, &arg0);

        ok &= sqval_to_boolean(vm, 3, &arg1);
        if (!ok)
            return 0;
        cobj->removeEventListenersForTarget(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "removeEventListenersForTarget", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_EventDispatcher_setPriority(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::EventDispatcher* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_EventDispatcher_setPriority'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        cocos2d::EventListener* arg0;
        int arg1;

        ok &= sqval_to_object<cocos2d::EventListener>(vm, 2, &arg0);

        ok &= sqval_to_int32(vm, 3, (int *)&arg1);
        if (!ok)
            return 0;
        cobj->setPriority(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setPriority", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_EventDispatcher_addCustomEventListener(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::EventDispatcher* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_EventDispatcher_addCustomEventListener'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        std::string arg0;
        std::function<void (cocos2d::EventCustom *)> arg1;
        HSQOBJECT callback3;
        sq_getstackobj(vm, 3, &callback3);

        ok &= sqval_to_std_string(vm, 2, &arg0);

        do {
			    // Lambda binding for squirrel
			    arg1 = [vm, callback3](cocos2d::EventCustom* larg0) -> void {
			        if (sq_getrefcount(vm, (HSQOBJECT *)&callback3) > 0) {
			            sq_pushobject(vm, callback3);
			            sq_push(vm, 1);
			            object_to_sqval<cocos2d::EventCustom>(vm, "cc.EventCustom", (cocos2d::EventCustom*)larg0);
			            sq_call(vm, 2, SQFalse, SQTrue);
			            sq_poptop(vm);
			        }
			    };
			} while(0);
        if (!ok)
            return 0;
        cocos2d::EventListenerCustom* ret = cobj->addCustomEventListener(arg0, arg1);
        object_to_sqval<cocos2d::EventListenerCustom>(vm, "cc.EventListenerCustom", (cocos2d::EventListenerCustom*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "addCustomEventListener", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_EventDispatcher_dispatchEvent(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::EventDispatcher* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_EventDispatcher_dispatchEvent'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Event* arg0;

        ok &= sqval_to_object<cocos2d::Event>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->dispatchEvent(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "dispatchEvent", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_EventDispatcher_removeAllEventListeners(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::EventDispatcher* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_EventDispatcher_removeAllEventListeners'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->removeAllEventListeners();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "removeAllEventListeners", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_EventDispatcher_removeCustomEventListeners(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::EventDispatcher* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_EventDispatcher_removeCustomEventListeners'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->removeCustomEventListeners(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "removeCustomEventListeners", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_EventDispatcher_isEnabled(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::EventDispatcher* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_EventDispatcher_isEnabled'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isEnabled();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isEnabled", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_EventDispatcher_removeEventListenersForType(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::EventDispatcher* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_EventDispatcher_removeEventListenersForType'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::EventListener::Type arg0;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if (!ok)
            return 0;
        cobj->removeEventListenersForType(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "removeEventListenersForType", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_EventDispatcher_constructor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::EventDispatcher* cobj = nullptr;
    bool ok  = true;

    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj = new cocos2d::EventDispatcher();
        sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
        cobj->retain();
        sq_setreleasehook(vm, 1, squirrel_releasehook_Ref);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "EventDispatcher", (int)argc, 0);
    return 0;
}


SQInteger squirrel_cocos2dx_EventDispatcher_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.EventDispatcher", -1);
    return 1;
}

void squirrel_cocos2dx_EventDispatcher_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::EventDispatcher", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_EventDispatcher(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("EventDispatcher"), -1);


    sq_pushstring(vm, _SC("Ref"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "constructor", squirrel_cocos2dx_EventDispatcher_constructor);
    to_squirrel_function(vm, "pauseEventListenersForTarget", squirrel_cocos2dx_EventDispatcher_pauseEventListenersForTarget);
    to_squirrel_function(vm, "addEventListenerWithSceneGraphPriority", squirrel_cocos2dx_EventDispatcher_addEventListenerWithSceneGraphPriority);
    to_squirrel_function(vm, "setEnabled", squirrel_cocos2dx_EventDispatcher_setEnabled);
    to_squirrel_function(vm, "addEventListenerWithFixedPriority", squirrel_cocos2dx_EventDispatcher_addEventListenerWithFixedPriority);
    to_squirrel_function(vm, "removeEventListener", squirrel_cocos2dx_EventDispatcher_removeEventListener);
    to_squirrel_function(vm, "resumeEventListenersForTarget", squirrel_cocos2dx_EventDispatcher_resumeEventListenersForTarget);
    to_squirrel_function(vm, "removeEventListenersForTarget", squirrel_cocos2dx_EventDispatcher_removeEventListenersForTarget);
    to_squirrel_function(vm, "setPriority", squirrel_cocos2dx_EventDispatcher_setPriority);
    to_squirrel_function(vm, "addCustomEventListener", squirrel_cocos2dx_EventDispatcher_addCustomEventListener);
    to_squirrel_function(vm, "dispatchEvent", squirrel_cocos2dx_EventDispatcher_dispatchEvent);
    to_squirrel_function(vm, "removeAllEventListeners", squirrel_cocos2dx_EventDispatcher_removeAllEventListeners);
    to_squirrel_function(vm, "removeCustomEventListeners", squirrel_cocos2dx_EventDispatcher_removeCustomEventListeners);
    to_squirrel_function(vm, "isEnabled", squirrel_cocos2dx_EventDispatcher_isEnabled);
    to_squirrel_function(vm, "removeEventListenersForType", squirrel_cocos2dx_EventDispatcher_removeEventListenersForType);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_EventDispatcher_typeof_meta);



    squirrel_cocos2dx_EventDispatcher_push_c_class(vm);

    std::string typeName = typeid(cocos2d::EventDispatcher).name();
    g_sqType[typeName] = "cc.EventDispatcher";

    return 1;
}
SQInteger squirrel_cocos2dx_Liquid_getAmplitudeRate(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Liquid* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Liquid_getAmplitudeRate'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getAmplitudeRate();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getAmplitudeRate", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Liquid_setAmplitude(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Liquid* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Liquid_setAmplitude'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setAmplitude(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setAmplitude", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Liquid_setAmplitudeRate(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Liquid* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Liquid_setAmplitudeRate'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setAmplitudeRate(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setAmplitudeRate", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Liquid_getAmplitude(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Liquid* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Liquid_getAmplitude'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getAmplitude();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getAmplitude", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Liquid_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 4)
    {
        float arg0;
        cocos2d::Size arg1;
        unsigned int arg2;
        float arg3;
        ok &= sqval_to_float(vm, 2, &arg0);
        cocos2d::Size* ptr3 = nullptr; ok &= sqval_to_size(vm, 3, ptr3); arg1 = *ptr3;
        ok &= sqval_to_uint32(vm, 4, &arg2);
        ok &= sqval_to_float(vm, 5, &arg3);
        if(!ok)
            return 0;
        cocos2d::Liquid* ret = cocos2d::Liquid::create(arg0, arg1, arg2, arg3);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.Liquid");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 4);
    return 0;
}

SQInteger squirrel_cocos2dx_Liquid_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.Liquid", -1);
    return 1;
}

void squirrel_cocos2dx_Liquid_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::Liquid", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Grid3DAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::GridAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_Liquid(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("Liquid"), -1);


    sq_pushstring(vm, _SC("Grid3DAction"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "getAmplitudeRate", squirrel_cocos2dx_Liquid_getAmplitudeRate);
    to_squirrel_function(vm, "setAmplitude", squirrel_cocos2dx_Liquid_setAmplitude);
    to_squirrel_function(vm, "setAmplitudeRate", squirrel_cocos2dx_Liquid_setAmplitudeRate);
    to_squirrel_function(vm, "getAmplitude", squirrel_cocos2dx_Liquid_getAmplitude);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_Liquid_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_Liquid_typeof_meta);



    squirrel_cocos2dx_Liquid_push_c_class(vm);

    std::string typeName = typeid(cocos2d::Liquid).name();
    g_sqType[typeName] = "cc.Liquid";

    return 1;
}
SQInteger squirrel_cocos2dx_OrbitCamera_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 7)
    {
        float arg0;
        float arg1;
        float arg2;
        float arg3;
        float arg4;
        float arg5;
        float arg6;
        ok &= sqval_to_float(vm, 2, &arg0);
        ok &= sqval_to_float(vm, 3, &arg1);
        ok &= sqval_to_float(vm, 4, &arg2);
        ok &= sqval_to_float(vm, 5, &arg3);
        ok &= sqval_to_float(vm, 6, &arg4);
        ok &= sqval_to_float(vm, 7, &arg5);
        ok &= sqval_to_float(vm, 8, &arg6);
        if(!ok)
            return 0;
        cocos2d::OrbitCamera* ret = cocos2d::OrbitCamera::create(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.OrbitCamera");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 7);
    return 0;
}

SQInteger squirrel_cocos2dx_OrbitCamera_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.OrbitCamera", -1);
    return 1;
}

void squirrel_cocos2dx_OrbitCamera_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::OrbitCamera", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionCamera", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_OrbitCamera(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("OrbitCamera"), -1);


    sq_pushstring(vm, _SC("ActionCamera"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_OrbitCamera_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_OrbitCamera_typeof_meta);



    squirrel_cocos2dx_OrbitCamera_push_c_class(vm);

    std::string typeName = typeid(cocos2d::OrbitCamera).name();
    g_sqType[typeName] = "cc.OrbitCamera";

    return 1;
}
SQInteger squirrel_cocos2dx_ParallaxNode_addChild(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ParallaxNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ParallaxNode_addChild'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 4) 
    {
        cocos2d::Node* arg0;
        int arg1;
        cocos2d::Vec2 arg2;
        cocos2d::Vec2 arg3;

        ok &= sqval_to_object<cocos2d::Node>(vm, 2, &arg0);

        ok &= sqval_to_int32(vm, 3, (int *)&arg1);

        cocos2d::Vec2* ptr4 = nullptr; ok &= sqval_to_vec2(vm, 4, ptr4); arg2 = *ptr4;

        cocos2d::Vec2* ptr5 = nullptr; ok &= sqval_to_vec2(vm, 5, ptr5); arg3 = *ptr5;
        if (!ok)
            return 0;
        cobj->addChild(arg0, arg1, arg2, arg3);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "addChild", (int)argc, 4);
    return 0;
}
SQInteger squirrel_cocos2dx_ParallaxNode_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        cocos2d::ParallaxNode* ret = cocos2d::ParallaxNode::create();
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.ParallaxNode");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 0);
    return 0;
}

SQInteger squirrel_cocos2dx_ParallaxNode_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.ParallaxNode", -1);
    return 1;
}

void squirrel_cocos2dx_ParallaxNode_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::ParallaxNode", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_ParallaxNode(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("ParallaxNode"), -1);


    sq_pushstring(vm, _SC("Node"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "addChild", squirrel_cocos2dx_ParallaxNode_addChild);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_ParallaxNode_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_ParallaxNode_typeof_meta);



    squirrel_cocos2dx_ParallaxNode_push_c_class(vm);

    std::string typeName = typeid(cocos2d::ParallaxNode).name();
    g_sqType[typeName] = "cc.ParallaxNode";

    return 1;
}
SQInteger squirrel_cocos2dx_EventCustom_getEventName(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::EventCustom* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_EventCustom_getEventName'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const std::string& ret = cobj->getEventName();
        sq_pushstring(vm, (const SQChar *)ret.c_str(), -1);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getEventName", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_EventCustom_constructor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::EventCustom* cobj = nullptr;
    bool ok  = true;

    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj = new cocos2d::EventCustom(arg0);
        sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
        cobj->retain();
        sq_setreleasehook(vm, 1, squirrel_releasehook_Ref);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "EventCustom", (int)argc, 1);
    return 0;
}


SQInteger squirrel_cocos2dx_EventCustom_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.EventCustom", -1);
    return 1;
}

void squirrel_cocos2dx_EventCustom_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::EventCustom", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Event", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_EventCustom(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("EventCustom"), -1);


    sq_pushstring(vm, _SC("Event"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "constructor", squirrel_cocos2dx_EventCustom_constructor);
    to_squirrel_function(vm, "getEventName", squirrel_cocos2dx_EventCustom_getEventName);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_EventCustom_typeof_meta);



    squirrel_cocos2dx_EventCustom_push_c_class(vm);

    std::string typeName = typeid(cocos2d::EventCustom).name();
    g_sqType[typeName] = "cc.EventCustom";

    return 1;
}
SQInteger squirrel_cocos2dx_TransitionFade_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 2)
        {

            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Scene")) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::Scene* arg1;
            ok &= sqval_to_object<cocos2d::Scene>(vm, 3, &arg1);
            if (!ok) { break; }
            cocos2d::TransitionFade* ret = cocos2d::TransitionFade::create(arg0, arg1);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.TransitionFade");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 3)
        {

            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Scene")) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INSTANCE || ! instanceof_cclass(vm, 4, "cocos2d::Color3B")) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::Scene* arg1;
            ok &= sqval_to_object<cocos2d::Scene>(vm, 3, &arg1);
            if (!ok) { break; }
            cocos2d::Color3B arg2;
            cocos2d::Color3B *ptr4 = nullptr; ok &= sqval_to_color3b(vm, 4, ptr4); arg2 = *ptr4;
            if (!ok) { break; }
            cocos2d::TransitionFade* ret = cocos2d::TransitionFade::create(arg0, arg1, arg2);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.TransitionFade");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d", "create", (int)argc, 3);
    return 0;
}

SQInteger squirrel_cocos2dx_TransitionFade_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.TransitionFade", -1);
    return 1;
}

void squirrel_cocos2dx_TransitionFade_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::TransitionFade", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::TransitionScene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Scene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_TransitionFade(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("TransitionFade"), -1);


    sq_pushstring(vm, _SC("TransitionScene"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_TransitionFade_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_TransitionFade_typeof_meta);



    squirrel_cocos2dx_TransitionFade_push_c_class(vm);

    std::string typeName = typeid(cocos2d::TransitionFade).name();
    g_sqType[typeName] = "cc.TransitionFade";

    return 1;
}
SQInteger squirrel_cocos2dx_Component_setEnabled(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Component* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Component_setEnabled'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setEnabled(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setEnabled", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Component_setName(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Component* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Component_setName'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setName(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setName", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Component_isEnabled(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Component* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Component_isEnabled'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isEnabled();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isEnabled", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Component_update(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Component* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Component_update'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->update(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "update", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Component_getOwner(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Component* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Component_getOwner'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Node* ret = cobj->getOwner();
        object_to_sqval<cocos2d::Node>(vm, "cc.Node", (cocos2d::Node*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getOwner", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Component_init(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Component* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Component_init'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->init();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "init", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Component_setOwner(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Component* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Component_setOwner'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Node* arg0;

        ok &= sqval_to_object<cocos2d::Node>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setOwner(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setOwner", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Component_getName(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Component* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Component_getName'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const std::string& ret = cobj->getName();
        sq_pushstring(vm, (const SQChar *)ret.c_str(), -1);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getName", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Component_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        cocos2d::Component* ret = cocos2d::Component::create();
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.Component");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 0);
    return 0;
}

SQInteger squirrel_cocos2dx_Component_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.Component", -1);
    return 1;
}

void squirrel_cocos2dx_Component_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::Component", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_Component(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("Component"), -1);


    sq_pushstring(vm, _SC("Ref"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "setEnabled", squirrel_cocos2dx_Component_setEnabled);
    to_squirrel_function(vm, "setName", squirrel_cocos2dx_Component_setName);
    to_squirrel_function(vm, "isEnabled", squirrel_cocos2dx_Component_isEnabled);
    to_squirrel_function(vm, "update", squirrel_cocos2dx_Component_update);
    to_squirrel_function(vm, "getOwner", squirrel_cocos2dx_Component_getOwner);
    to_squirrel_function(vm, "init", squirrel_cocos2dx_Component_init);
    to_squirrel_function(vm, "setOwner", squirrel_cocos2dx_Component_setOwner);
    to_squirrel_function(vm, "getName", squirrel_cocos2dx_Component_getName);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_Component_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_Component_typeof_meta);



    squirrel_cocos2dx_Component_push_c_class(vm);

    std::string typeName = typeid(cocos2d::Component).name();
    g_sqType[typeName] = "cc.Component";

    return 1;
}
SQInteger squirrel_cocos2dx_FadeOutUpTiles_transformTile(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::FadeOutUpTiles* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_FadeOutUpTiles_transformTile'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        cocos2d::Vec2 arg0;
        float arg1;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;

        ok &= sqval_to_float(vm, 3, &arg1);
        if (!ok)
            return 0;
        cobj->transformTile(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "transformTile", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_FadeOutUpTiles_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        float arg0;
        cocos2d::Size arg1;
        ok &= sqval_to_float(vm, 2, &arg0);
        cocos2d::Size* ptr3 = nullptr; ok &= sqval_to_size(vm, 3, ptr3); arg1 = *ptr3;
        if(!ok)
            return 0;
        cocos2d::FadeOutUpTiles* ret = cocos2d::FadeOutUpTiles::create(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.FadeOutUpTiles");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_FadeOutUpTiles_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.FadeOutUpTiles", -1);
    return 1;
}

void squirrel_cocos2dx_FadeOutUpTiles_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::FadeOutUpTiles", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::FadeOutTRTiles", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TiledGrid3DAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::GridAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_FadeOutUpTiles(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("FadeOutUpTiles"), -1);


    sq_pushstring(vm, _SC("FadeOutTRTiles"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "transformTile", squirrel_cocos2dx_FadeOutUpTiles_transformTile);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_FadeOutUpTiles_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_FadeOutUpTiles_typeof_meta);



    squirrel_cocos2dx_FadeOutUpTiles_push_c_class(vm);

    std::string typeName = typeid(cocos2d::FadeOutUpTiles).name();
    g_sqType[typeName] = "cc.FadeOutUpTiles";

    return 1;
}
SQInteger squirrel_cocos2dx_EaseCubicActionOut_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        cocos2d::ActionInterval* arg0;
        ok &= sqval_to_object<cocos2d::ActionInterval>(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::EaseCubicActionOut* ret = cocos2d::EaseCubicActionOut::create(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.EaseCubicActionOut");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_EaseCubicActionOut_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.EaseCubicActionOut", -1);
    return 1;
}

void squirrel_cocos2dx_EaseCubicActionOut_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::EaseCubicActionOut", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionEase", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_EaseCubicActionOut(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("EaseCubicActionOut"), -1);


    sq_pushstring(vm, _SC("ActionEase"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_EaseCubicActionOut_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_EaseCubicActionOut_typeof_meta);



    squirrel_cocos2dx_EaseCubicActionOut_push_c_class(vm);

    std::string typeName = typeid(cocos2d::EaseCubicActionOut).name();
    g_sqType[typeName] = "cc.EaseCubicActionOut";

    return 1;
}
SQInteger squirrel_cocos2dx_EventListenerTouchOneByOne_isSwallowTouches(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::EventListenerTouchOneByOne* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_EventListenerTouchOneByOne_isSwallowTouches'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isSwallowTouches();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isSwallowTouches", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_EventListenerTouchOneByOne_setSwallowTouches(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::EventListenerTouchOneByOne* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_EventListenerTouchOneByOne_setSwallowTouches'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setSwallowTouches(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setSwallowTouches", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_EventListenerTouchOneByOne_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        cocos2d::EventListenerTouchOneByOne* ret = cocos2d::EventListenerTouchOneByOne::create();
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.EventListenerTouchOneByOne");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 0);
    return 0;
}

SQInteger squirrel_cocos2dx_EventListenerTouchOneByOne_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.EventListenerTouchOneByOne", -1);
    return 1;
}

SQInteger squirrel_cocos2dx_EventListenerTouchOneByOne_get_meta(HSQUIRRELVM vm)
{
    cocos2d::EventListenerTouchOneByOne *cobj = nullptr;
    if (SQ_FAILED(sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0))) {
        CCLOG("cocos2d::EventListenerTouchOneByOne sq_getinstanceup failed.");
        sq_pushnull(vm);
        return 1;
    }

    const char *varName = nullptr;
    sq_getstring(vm, 2, &varName);
    
    do {
        if (strcmp(varName, "onTouchBegan") == 0) {
            ccfunction_to_sqval(vm, cobj, "onTouchBegan");
            break;
        }
        if (strcmp(varName, "onTouchMoved") == 0) {
            ccfunction_to_sqval(vm, cobj, "onTouchMoved");
            break;
        }
        if (strcmp(varName, "onTouchEnded") == 0) {
            ccfunction_to_sqval(vm, cobj, "onTouchEnded");
            break;
        }
        if (strcmp(varName, "onTouchCancelled") == 0) {
            ccfunction_to_sqval(vm, cobj, "onTouchCancelled");
            break;
        }

        return 0;
        
    } while(0);

    return 1;
}

SQInteger squirrel_cocos2dx_EventListenerTouchOneByOne_set_meta(HSQUIRRELVM vm)
{
    cocos2d::EventListenerTouchOneByOne *cobj = nullptr;
    if (SQ_FAILED(sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0))) {
        CCLOG("cocos2d::EventListenerTouchOneByOne sq_getinstanceup failed.");
        return 0;
    }

    bool ok  = true;
    const char *varName = nullptr;
    sq_getstring(vm, 2, &varName);
    
    do {
        if (strcmp(varName, "onTouchBegan") == 0) {
            HSQOBJECT callback3;
            sq_getstackobj(vm, 3, &callback3);
            do {
			    // Lambda binding for squirrel
			    cobj->onTouchBegan = [vm, callback3](cocos2d::Touch* larg0, cocos2d::Event* larg1) -> bool {
			        if (sq_getrefcount(vm, (HSQOBJECT *)&callback3) > 0) {
			            sq_pushobject(vm, callback3);
			            sq_push(vm, 1);
			            object_to_sqval<cocos2d::Touch>(vm, "cc.Touch", (cocos2d::Touch*)larg0);
			            object_to_sqval<cocos2d::Event>(vm, "cc.Event", (cocos2d::Event*)larg1);
			            sq_call(vm, 3, SQTrue, SQTrue);
			            sq_remove(vm, -2);
			            bool ok = true;
			            bool ret;
			            ok &= sqval_to_boolean(vm, -1, &ret);
			            return ret;
			        }
			    };
			} while(0);
            if (! ok) {
                return 0;
            }
            _SquirrelObject *sqobj = (_SquirrelObject *)cobj->_scriptObject;
            sqobj->addClosure("onTouchBegan", callback3);
            break;
        }
        if (strcmp(varName, "onTouchMoved") == 0) {
            HSQOBJECT callback3;
            sq_getstackobj(vm, 3, &callback3);
            do {
			    // Lambda binding for squirrel
			    cobj->onTouchMoved = [vm, callback3](cocos2d::Touch* larg0, cocos2d::Event* larg1) -> void {
			        if (sq_getrefcount(vm, (HSQOBJECT *)&callback3) > 0) {
			            sq_pushobject(vm, callback3);
			            sq_push(vm, 1);
			            object_to_sqval<cocos2d::Touch>(vm, "cc.Touch", (cocos2d::Touch*)larg0);
			            object_to_sqval<cocos2d::Event>(vm, "cc.Event", (cocos2d::Event*)larg1);
			            sq_call(vm, 3, SQFalse, SQTrue);
			            sq_poptop(vm);
			        }
			    };
			} while(0);
            if (! ok) {
                return 0;
            }
            _SquirrelObject *sqobj = (_SquirrelObject *)cobj->_scriptObject;
            sqobj->addClosure("onTouchMoved", callback3);
            break;
        }
        if (strcmp(varName, "onTouchEnded") == 0) {
            HSQOBJECT callback3;
            sq_getstackobj(vm, 3, &callback3);
            do {
			    // Lambda binding for squirrel
			    cobj->onTouchEnded = [vm, callback3](cocos2d::Touch* larg0, cocos2d::Event* larg1) -> void {
			        if (sq_getrefcount(vm, (HSQOBJECT *)&callback3) > 0) {
			            sq_pushobject(vm, callback3);
			            sq_push(vm, 1);
			            object_to_sqval<cocos2d::Touch>(vm, "cc.Touch", (cocos2d::Touch*)larg0);
			            object_to_sqval<cocos2d::Event>(vm, "cc.Event", (cocos2d::Event*)larg1);
			            sq_call(vm, 3, SQFalse, SQTrue);
			            sq_poptop(vm);
			        }
			    };
			} while(0);
            if (! ok) {
                return 0;
            }
            _SquirrelObject *sqobj = (_SquirrelObject *)cobj->_scriptObject;
            sqobj->addClosure("onTouchEnded", callback3);
            break;
        }
        if (strcmp(varName, "onTouchCancelled") == 0) {
            HSQOBJECT callback3;
            sq_getstackobj(vm, 3, &callback3);
            do {
			    // Lambda binding for squirrel
			    cobj->onTouchCancelled = [vm, callback3](cocos2d::Touch* larg0, cocos2d::Event* larg1) -> void {
			        if (sq_getrefcount(vm, (HSQOBJECT *)&callback3) > 0) {
			            sq_pushobject(vm, callback3);
			            sq_push(vm, 1);
			            object_to_sqval<cocos2d::Touch>(vm, "cc.Touch", (cocos2d::Touch*)larg0);
			            object_to_sqval<cocos2d::Event>(vm, "cc.Event", (cocos2d::Event*)larg1);
			            sq_call(vm, 3, SQFalse, SQTrue);
			            sq_poptop(vm);
			        }
			    };
			} while(0);
            if (! ok) {
                return 0;
            }
            _SquirrelObject *sqobj = (_SquirrelObject *)cobj->_scriptObject;
            sqobj->addClosure("onTouchCancelled", callback3);
            break;
        }

        CCLOG("specified variable is not found in cocos2d::EventListenerTouchOneByOne");
    } while(0);

    return 0;
}

void squirrel_cocos2dx_EventListenerTouchOneByOne_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::EventListenerTouchOneByOne", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::EventListener", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_EventListenerTouchOneByOne(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("EventListenerTouchOneByOne"), -1);


    sq_pushstring(vm, _SC("EventListener"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "isSwallowTouches", squirrel_cocos2dx_EventListenerTouchOneByOne_isSwallowTouches);
    to_squirrel_function(vm, "setSwallowTouches", squirrel_cocos2dx_EventListenerTouchOneByOne_setSwallowTouches);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_EventListenerTouchOneByOne_create_static, SQTrue);

    to_squirrel_function(vm, "_get", squirrel_cocos2dx_EventListenerTouchOneByOne_get_meta);
    to_squirrel_function(vm, "_set", squirrel_cocos2dx_EventListenerTouchOneByOne_set_meta);
    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_EventListenerTouchOneByOne_typeof_meta);

    to_squirrel_variable_string(vm, "LISTENER_ID", cocos2d::EventListenerTouchOneByOne::LISTENER_ID, SQTrue);


    squirrel_cocos2dx_EventListenerTouchOneByOne_push_c_class(vm);

    std::string typeName = typeid(cocos2d::EventListenerTouchOneByOne).name();
    g_sqType[typeName] = "cc.EventListenerTouchOneByOne";

    return 1;
}
SQInteger squirrel_cocos2dx_ParticleRain_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        cocos2d::ParticleRain* ret = cocos2d::ParticleRain::create();
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.ParticleRain");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ParticleRain_createWithTotalParticles_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if(!ok)
            return 0;
        cocos2d::ParticleRain* ret = cocos2d::ParticleRain::createWithTotalParticles(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.ParticleRain");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "createWithTotalParticles", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_ParticleRain_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.ParticleRain", -1);
    return 1;
}

void squirrel_cocos2dx_ParticleRain_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::ParticleRain", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ParticleSystemQuad", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ParticleSystem", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TextureProtocol", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::BlendProtocol", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_ParticleRain(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("ParticleRain"), -1);


    sq_pushstring(vm, _SC("ParticleSystemQuad"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_ParticleRain_create_static, SQTrue);
    to_squirrel_function(vm, "createWithTotalParticles", squirrel_cocos2dx_ParticleRain_createWithTotalParticles_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_ParticleRain_typeof_meta);



    squirrel_cocos2dx_ParticleRain_push_c_class(vm);

    std::string typeName = typeid(cocos2d::ParticleRain).name();
    g_sqType[typeName] = "cc.ParticleRain";

    return 1;
}
SQInteger squirrel_cocos2dx_Waves_getAmplitudeRate(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Waves* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Waves_getAmplitudeRate'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getAmplitudeRate();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getAmplitudeRate", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Waves_setAmplitude(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Waves* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Waves_setAmplitude'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setAmplitude(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setAmplitude", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Waves_setAmplitudeRate(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Waves* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Waves_setAmplitudeRate'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setAmplitudeRate(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setAmplitudeRate", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Waves_getAmplitude(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Waves* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Waves_getAmplitude'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getAmplitude();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getAmplitude", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Waves_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 6)
    {
        float arg0;
        cocos2d::Size arg1;
        unsigned int arg2;
        float arg3;
        bool arg4;
        bool arg5;
        ok &= sqval_to_float(vm, 2, &arg0);
        cocos2d::Size* ptr3 = nullptr; ok &= sqval_to_size(vm, 3, ptr3); arg1 = *ptr3;
        ok &= sqval_to_uint32(vm, 4, &arg2);
        ok &= sqval_to_float(vm, 5, &arg3);
        ok &= sqval_to_boolean(vm, 6, &arg4);
        ok &= sqval_to_boolean(vm, 7, &arg5);
        if(!ok)
            return 0;
        cocos2d::Waves* ret = cocos2d::Waves::create(arg0, arg1, arg2, arg3, arg4, arg5);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.Waves");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 6);
    return 0;
}

SQInteger squirrel_cocos2dx_Waves_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.Waves", -1);
    return 1;
}

void squirrel_cocos2dx_Waves_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::Waves", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Grid3DAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::GridAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_Waves(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("Waves"), -1);


    sq_pushstring(vm, _SC("Grid3DAction"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "getAmplitudeRate", squirrel_cocos2dx_Waves_getAmplitudeRate);
    to_squirrel_function(vm, "setAmplitude", squirrel_cocos2dx_Waves_setAmplitude);
    to_squirrel_function(vm, "setAmplitudeRate", squirrel_cocos2dx_Waves_setAmplitudeRate);
    to_squirrel_function(vm, "getAmplitude", squirrel_cocos2dx_Waves_getAmplitude);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_Waves_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_Waves_typeof_meta);



    squirrel_cocos2dx_Waves_push_c_class(vm);

    std::string typeName = typeid(cocos2d::Waves).name();
    g_sqType[typeName] = "cc.Waves";

    return 1;
}
SQInteger squirrel_cocos2dx_AtlasNode_updateAtlasValues(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::AtlasNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_AtlasNode_updateAtlasValues'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->updateAtlasValues();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "updateAtlasValues", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_AtlasNode_getTexture(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::AtlasNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_AtlasNode_getTexture'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Texture2D* ret = cobj->getTexture();
        object_to_sqval<cocos2d::Texture2D>(vm, "cc.Texture2D", (cocos2d::Texture2D*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getTexture", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_AtlasNode_setTextureAtlas(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::AtlasNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_AtlasNode_setTextureAtlas'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::TextureAtlas* arg0;

        ok &= sqval_to_object<cocos2d::TextureAtlas>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setTextureAtlas(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setTextureAtlas", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_AtlasNode_getTextureAtlas(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::AtlasNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_AtlasNode_getTextureAtlas'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::TextureAtlas* ret = cobj->getTextureAtlas();
        object_to_sqval<cocos2d::TextureAtlas>(vm, "cc.TextureAtlas", (cocos2d::TextureAtlas*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getTextureAtlas", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_AtlasNode_getQuadsToDraw(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::AtlasNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_AtlasNode_getQuadsToDraw'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        ssize_t ret = cobj->getQuadsToDraw();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getQuadsToDraw", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_AtlasNode_setTexture(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::AtlasNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_AtlasNode_setTexture'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Texture2D* arg0;

        ok &= sqval_to_object<cocos2d::Texture2D>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setTexture(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setTexture", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_AtlasNode_setQuadsToDraw(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::AtlasNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_AtlasNode_setQuadsToDraw'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        ssize_t arg0;

        ok &= sqval_to_ssize(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setQuadsToDraw(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setQuadsToDraw", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_AtlasNode_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 4)
    {
        std::string arg0;
        int arg1;
        int arg2;
        int arg3;
        ok &= sqval_to_std_string(vm, 2, &arg0);
        ok &= sqval_to_int32(vm, 3, (int *)&arg1);
        ok &= sqval_to_int32(vm, 4, (int *)&arg2);
        ok &= sqval_to_int32(vm, 5, (int *)&arg3);
        if(!ok)
            return 0;
        cocos2d::AtlasNode* ret = cocos2d::AtlasNode::create(arg0, arg1, arg2, arg3);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.AtlasNode");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 4);
    return 0;
}

SQInteger squirrel_cocos2dx_AtlasNode_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.AtlasNode", -1);
    return 1;
}

void squirrel_cocos2dx_AtlasNode_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::AtlasNode", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TextureProtocol", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::BlendProtocol", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_AtlasNode(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("AtlasNode"), -1);


    sq_pushstring(vm, _SC("Node"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "updateAtlasValues", squirrel_cocos2dx_AtlasNode_updateAtlasValues);
    to_squirrel_function(vm, "getTexture", squirrel_cocos2dx_AtlasNode_getTexture);
    to_squirrel_function(vm, "setTextureAtlas", squirrel_cocos2dx_AtlasNode_setTextureAtlas);
    to_squirrel_function(vm, "getTextureAtlas", squirrel_cocos2dx_AtlasNode_getTextureAtlas);
    to_squirrel_function(vm, "getQuadsToDraw", squirrel_cocos2dx_AtlasNode_getQuadsToDraw);
    to_squirrel_function(vm, "setTexture", squirrel_cocos2dx_AtlasNode_setTexture);
    to_squirrel_function(vm, "setQuadsToDraw", squirrel_cocos2dx_AtlasNode_setQuadsToDraw);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_AtlasNode_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_AtlasNode_typeof_meta);



    squirrel_cocos2dx_AtlasNode_push_c_class(vm);

    std::string typeName = typeid(cocos2d::AtlasNode).name();
    g_sqType[typeName] = "cc.AtlasNode";

    return 1;
}
SQInteger squirrel_cocos2dx_EaseOut_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        cocos2d::ActionInterval* arg0;
        float arg1;
        ok &= sqval_to_object<cocos2d::ActionInterval>(vm, 2, &arg0);
        ok &= sqval_to_float(vm, 3, &arg1);
        if(!ok)
            return 0;
        cocos2d::EaseOut* ret = cocos2d::EaseOut::create(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.EaseOut");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_EaseOut_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.EaseOut", -1);
    return 1;
}

void squirrel_cocos2dx_EaseOut_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::EaseOut", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::EaseRateAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionEase", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_EaseOut(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("EaseOut"), -1);


    sq_pushstring(vm, _SC("EaseRateAction"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_EaseOut_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_EaseOut_typeof_meta);



    squirrel_cocos2dx_EaseOut_push_c_class(vm);

    std::string typeName = typeid(cocos2d::EaseOut).name();
    g_sqType[typeName] = "cc.EaseOut";

    return 1;
}
SQInteger squirrel_cocos2dx_TransitionSlideInL_action(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TransitionSlideInL* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TransitionSlideInL_action'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::ActionInterval* ret = cobj->action();
        object_to_sqval<cocos2d::ActionInterval>(vm, "cc.ActionInterval", (cocos2d::ActionInterval*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "action", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_TransitionSlideInL_easeActionWithAction(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TransitionSlideInL* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TransitionSlideInL_easeActionWithAction'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::ActionInterval* arg0;

        ok &= sqval_to_object<cocos2d::ActionInterval>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cocos2d::ActionInterval* ret = cobj->easeActionWithAction(arg0);
        object_to_sqval<cocos2d::ActionInterval>(vm, "cc.ActionInterval", (cocos2d::ActionInterval*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "easeActionWithAction", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_TransitionSlideInL_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        float arg0;
        cocos2d::Scene* arg1;
        ok &= sqval_to_float(vm, 2, &arg0);
        ok &= sqval_to_object<cocos2d::Scene>(vm, 3, &arg1);
        if(!ok)
            return 0;
        cocos2d::TransitionSlideInL* ret = cocos2d::TransitionSlideInL::create(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.TransitionSlideInL");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_TransitionSlideInL_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.TransitionSlideInL", -1);
    return 1;
}

void squirrel_cocos2dx_TransitionSlideInL_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::TransitionSlideInL", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::TransitionScene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Scene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TransitionEaseScene", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_TransitionSlideInL(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("TransitionSlideInL"), -1);


    sq_pushstring(vm, _SC("TransitionScene"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "action", squirrel_cocos2dx_TransitionSlideInL_action);
    to_squirrel_function(vm, "easeActionWithAction", squirrel_cocos2dx_TransitionSlideInL_easeActionWithAction);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_TransitionSlideInL_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_TransitionSlideInL_typeof_meta);



    squirrel_cocos2dx_TransitionSlideInL_push_c_class(vm);

    std::string typeName = typeid(cocos2d::TransitionSlideInL).name();
    g_sqType[typeName] = "cc.TransitionSlideInL";

    return 1;
}
SQInteger squirrel_cocos2dx_Animate3D_setSpeed(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Animate3D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Animate3D_setSpeed'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setSpeed(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setSpeed", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Animate3D_setWeight(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Animate3D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Animate3D_setWeight'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setWeight(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setWeight", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Animate3D_getSpeed(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Animate3D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Animate3D_getSpeed'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getSpeed();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getSpeed", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Animate3D_getWeight(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Animate3D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Animate3D_getWeight'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getWeight();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getWeight", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Animate3D_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 3)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Animation3D")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }

            cocos2d::Animation3D* arg0;
            ok &= sqval_to_object<cocos2d::Animation3D>(vm, 2, &arg0);
            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);
            if (!ok) { break; }
            float arg2;
            ok &= sqval_to_float(vm, 4, &arg2);
            if (!ok) { break; }
            cocos2d::Animate3D* ret = cocos2d::Animate3D::create(arg0, arg1, arg2);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.Animate3D");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 1)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Animation3D")) {
                break;
            }

            cocos2d::Animation3D* arg0;
            ok &= sqval_to_object<cocos2d::Animation3D>(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::Animate3D* ret = cocos2d::Animate3D::create(arg0);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.Animate3D");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d", "create", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Animate3D_getTransitionTime_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        float ret = cocos2d::Animate3D::getTransitionTime();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "getTransitionTime", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Animate3D_createWithFrames_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 3)
    {
        cocos2d::Animation3D* arg0;
        int arg1;
        int arg2;
        ok &= sqval_to_object<cocos2d::Animation3D>(vm, 2, &arg0);
        ok &= sqval_to_int32(vm, 3, (int *)&arg1);
        ok &= sqval_to_int32(vm, 4, (int *)&arg2);
        if(!ok)
            return 0;
        cocos2d::Animate3D* ret = cocos2d::Animate3D::createWithFrames(arg0, arg1, arg2);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.Animate3D");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    if (argc == 4)
    {
        cocos2d::Animation3D* arg0;
        int arg1;
        int arg2;
        float arg3;
        ok &= sqval_to_object<cocos2d::Animation3D>(vm, 2, &arg0);
        ok &= sqval_to_int32(vm, 3, (int *)&arg1);
        ok &= sqval_to_int32(vm, 4, (int *)&arg2);
        ok &= sqval_to_float(vm, 5, &arg3);
        if(!ok)
            return 0;
        cocos2d::Animate3D* ret = cocos2d::Animate3D::createWithFrames(arg0, arg1, arg2, arg3);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.Animate3D");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "createWithFrames", (int)argc, 3);
    return 0;
}

SQInteger squirrel_cocos2dx_Animate3D_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.Animate3D", -1);
    return 1;
}

void squirrel_cocos2dx_Animate3D_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::Animate3D", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_Animate3D(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("Animate3D"), -1);


    sq_pushstring(vm, _SC("ActionInterval"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "setSpeed", squirrel_cocos2dx_Animate3D_setSpeed);
    to_squirrel_function(vm, "setWeight", squirrel_cocos2dx_Animate3D_setWeight);
    to_squirrel_function(vm, "getSpeed", squirrel_cocos2dx_Animate3D_getSpeed);
    to_squirrel_function(vm, "getWeight", squirrel_cocos2dx_Animate3D_getWeight);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_Animate3D_create_static, SQTrue);
    to_squirrel_function(vm, "getTransitionTime", squirrel_cocos2dx_Animate3D_getTransitionTime_static, SQTrue);
    to_squirrel_function(vm, "createWithFrames", squirrel_cocos2dx_Animate3D_createWithFrames_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_Animate3D_typeof_meta);



    squirrel_cocos2dx_Animate3D_push_c_class(vm);

    std::string typeName = typeid(cocos2d::Animate3D).name();
    g_sqType[typeName] = "cc.Animate3D";

    return 1;
}
SQInteger squirrel_cocos2dx_MenuItemFont_getFontSizeObj(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::MenuItemFont* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_MenuItemFont_getFontSizeObj'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        int ret = cobj->getFontSizeObj();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getFontSizeObj", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_MenuItemFont_getFontNameObj(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::MenuItemFont* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_MenuItemFont_getFontNameObj'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const std::string& ret = cobj->getFontNameObj();
        sq_pushstring(vm, (const SQChar *)ret.c_str(), -1);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getFontNameObj", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_MenuItemFont_setFontSizeObj(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::MenuItemFont* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_MenuItemFont_setFontSizeObj'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        int arg0;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if (!ok)
            return 0;
        cobj->setFontSizeObj(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setFontSizeObj", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_MenuItemFont_setFontNameObj(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::MenuItemFont* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_MenuItemFont_setFontNameObj'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setFontNameObj(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setFontNameObj", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_MenuItemFont_setFontName_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        std::string arg0;
        ok &= sqval_to_std_string(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::MenuItemFont::setFontName(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "setFontName", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_MenuItemFont_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 2)
        {

            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_CLOSURE) {
                break;
            }
            HSQOBJECT callback3;
            sq_getstackobj(vm, 3, &callback3);

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);
            if (!ok) { break; }
            std::function<void (cocos2d::Ref *)> arg1;
            do {
			    // Lambda binding for squirrel
			    arg1 = [vm, callback3](cocos2d::Ref* larg0) -> void {
			        if (sq_getrefcount(vm, (HSQOBJECT *)&callback3) > 0) {
			            sq_pushobject(vm, callback3);
			            sq_push(vm, 1);
			            object_to_sqval<cocos2d::Ref>(vm, "cc.Ref", (cocos2d::Ref*)larg0);
			            sq_call(vm, 2, SQFalse, SQTrue);
			            sq_poptop(vm);
			        }
			    };
			} while(0);
            if (!ok) { break; }
            cocos2d::MenuItemFont* ret = cocos2d::MenuItemFont::create(arg0, arg1);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.MenuItemFont");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            _SquirrelObject *sqobj = (_SquirrelObject *)ret->_scriptObject;
            sqobj->addClosure("callback3", callback3);
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 0)
        {


            cocos2d::MenuItemFont* ret = cocos2d::MenuItemFont::create();
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.MenuItemFont");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 1)
        {

            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::MenuItemFont* ret = cocos2d::MenuItemFont::create(arg0);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.MenuItemFont");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d", "create", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_MenuItemFont_getFontSize_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        int ret = cocos2d::MenuItemFont::getFontSize();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "getFontSize", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_MenuItemFont_getFontName_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        const std::string& ret = cocos2d::MenuItemFont::getFontName();
        sq_pushstring(vm, (const SQChar *)ret.c_str(), -1);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "getFontName", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_MenuItemFont_setFontSize_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        int arg0;
        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if(!ok)
            return 0;
        cocos2d::MenuItemFont::setFontSize(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "setFontSize", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_MenuItemFont_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.MenuItemFont", -1);
    return 1;
}

void squirrel_cocos2dx_MenuItemFont_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::MenuItemFont", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::MenuItemLabel", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::MenuItem", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_MenuItemFont(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("MenuItemFont"), -1);


    sq_pushstring(vm, _SC("MenuItemLabel"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "getFontSizeObj", squirrel_cocos2dx_MenuItemFont_getFontSizeObj);
    to_squirrel_function(vm, "getFontNameObj", squirrel_cocos2dx_MenuItemFont_getFontNameObj);
    to_squirrel_function(vm, "setFontSizeObj", squirrel_cocos2dx_MenuItemFont_setFontSizeObj);
    to_squirrel_function(vm, "setFontNameObj", squirrel_cocos2dx_MenuItemFont_setFontNameObj);
    to_squirrel_function(vm, "setFontName", squirrel_cocos2dx_MenuItemFont_setFontName_static, SQTrue);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_MenuItemFont_create_static, SQTrue);
    to_squirrel_function(vm, "getFontSize", squirrel_cocos2dx_MenuItemFont_getFontSize_static, SQTrue);
    to_squirrel_function(vm, "getFontName", squirrel_cocos2dx_MenuItemFont_getFontName_static, SQTrue);
    to_squirrel_function(vm, "setFontSize", squirrel_cocos2dx_MenuItemFont_setFontSize_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_MenuItemFont_typeof_meta);



    squirrel_cocos2dx_MenuItemFont_push_c_class(vm);

    std::string typeName = typeid(cocos2d::MenuItemFont).name();
    g_sqType[typeName] = "cc.MenuItemFont";

    return 1;
}
SQInteger squirrel_cocos2dx_TransitionFadeUp_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        float arg0;
        cocos2d::Scene* arg1;
        ok &= sqval_to_float(vm, 2, &arg0);
        ok &= sqval_to_object<cocos2d::Scene>(vm, 3, &arg1);
        if(!ok)
            return 0;
        cocos2d::TransitionFadeUp* ret = cocos2d::TransitionFadeUp::create(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.TransitionFadeUp");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_TransitionFadeUp_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.TransitionFadeUp", -1);
    return 1;
}

void squirrel_cocos2dx_TransitionFadeUp_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::TransitionFadeUp", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::TransitionFadeTR", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TransitionScene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Scene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TransitionEaseScene", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_TransitionFadeUp(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("TransitionFadeUp"), -1);


    sq_pushstring(vm, _SC("TransitionFadeTR"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_TransitionFadeUp_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_TransitionFadeUp_typeof_meta);



    squirrel_cocos2dx_TransitionFadeUp_push_c_class(vm);

    std::string typeName = typeid(cocos2d::TransitionFadeUp).name();
    g_sqType[typeName] = "cc.TransitionFadeUp";

    return 1;
}
SQInteger squirrel_cocos2dx_EaseSineOut_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        cocos2d::ActionInterval* arg0;
        ok &= sqval_to_object<cocos2d::ActionInterval>(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::EaseSineOut* ret = cocos2d::EaseSineOut::create(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.EaseSineOut");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_EaseSineOut_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.EaseSineOut", -1);
    return 1;
}

void squirrel_cocos2dx_EaseSineOut_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::EaseSineOut", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionEase", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_EaseSineOut(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("EaseSineOut"), -1);


    sq_pushstring(vm, _SC("ActionEase"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_EaseSineOut_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_EaseSineOut_typeof_meta);



    squirrel_cocos2dx_EaseSineOut_push_c_class(vm);

    std::string typeName = typeid(cocos2d::EaseSineOut).name();
    g_sqType[typeName] = "cc.EaseSineOut";

    return 1;
}
SQInteger squirrel_cocos2dx_JumpTiles3D_getAmplitudeRate(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::JumpTiles3D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_JumpTiles3D_getAmplitudeRate'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getAmplitudeRate();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getAmplitudeRate", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_JumpTiles3D_setAmplitude(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::JumpTiles3D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_JumpTiles3D_setAmplitude'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setAmplitude(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setAmplitude", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_JumpTiles3D_setAmplitudeRate(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::JumpTiles3D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_JumpTiles3D_setAmplitudeRate'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setAmplitudeRate(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setAmplitudeRate", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_JumpTiles3D_getAmplitude(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::JumpTiles3D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_JumpTiles3D_getAmplitude'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getAmplitude();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getAmplitude", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_JumpTiles3D_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 4)
    {
        float arg0;
        cocos2d::Size arg1;
        unsigned int arg2;
        float arg3;
        ok &= sqval_to_float(vm, 2, &arg0);
        cocos2d::Size* ptr3 = nullptr; ok &= sqval_to_size(vm, 3, ptr3); arg1 = *ptr3;
        ok &= sqval_to_uint32(vm, 4, &arg2);
        ok &= sqval_to_float(vm, 5, &arg3);
        if(!ok)
            return 0;
        cocos2d::JumpTiles3D* ret = cocos2d::JumpTiles3D::create(arg0, arg1, arg2, arg3);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.JumpTiles3D");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 4);
    return 0;
}

SQInteger squirrel_cocos2dx_JumpTiles3D_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.JumpTiles3D", -1);
    return 1;
}

void squirrel_cocos2dx_JumpTiles3D_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::JumpTiles3D", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::TiledGrid3DAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::GridAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_JumpTiles3D(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("JumpTiles3D"), -1);


    sq_pushstring(vm, _SC("TiledGrid3DAction"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "getAmplitudeRate", squirrel_cocos2dx_JumpTiles3D_getAmplitudeRate);
    to_squirrel_function(vm, "setAmplitude", squirrel_cocos2dx_JumpTiles3D_setAmplitude);
    to_squirrel_function(vm, "setAmplitudeRate", squirrel_cocos2dx_JumpTiles3D_setAmplitudeRate);
    to_squirrel_function(vm, "getAmplitude", squirrel_cocos2dx_JumpTiles3D_getAmplitude);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_JumpTiles3D_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_JumpTiles3D_typeof_meta);



    squirrel_cocos2dx_JumpTiles3D_push_c_class(vm);

    std::string typeName = typeid(cocos2d::JumpTiles3D).name();
    g_sqType[typeName] = "cc.JumpTiles3D";

    return 1;
}
SQInteger squirrel_cocos2dx_MenuItemToggle_setSubItems(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::MenuItemToggle* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_MenuItemToggle_setSubItems'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vector<cocos2d::MenuItem *> arg0;

        ok &= sqval_to_ccvector(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setSubItems(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setSubItems", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_MenuItemToggle_getSubItems(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::MenuItemToggle* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_MenuItemToggle_getSubItems'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 0) {

            cocos2d::Vector<cocos2d::MenuItem *>& ret = cobj->getSubItems();
            ccvector_to_sqval(vm, ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 0) {

            const cocos2d::Vector<cocos2d::MenuItem *>& ret = cobj->getSubItems();
            ccvector_to_sqval(vm, ret);
            return 1;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getSubItems", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_MenuItemToggle_getSelectedIndex(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::MenuItemToggle* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_MenuItemToggle_getSelectedIndex'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        unsigned int ret = cobj->getSelectedIndex();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getSelectedIndex", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_MenuItemToggle_addSubItem(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::MenuItemToggle* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_MenuItemToggle_addSubItem'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::MenuItem* arg0;

        ok &= sqval_to_object<cocos2d::MenuItem>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->addSubItem(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "addSubItem", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_MenuItemToggle_getSelectedItem(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::MenuItemToggle* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_MenuItemToggle_getSelectedItem'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::MenuItem* ret = cobj->getSelectedItem();
        object_to_sqval<cocos2d::MenuItem>(vm, "cc.MenuItem", (cocos2d::MenuItem*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getSelectedItem", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_MenuItemToggle_setSelectedIndex(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::MenuItemToggle* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_MenuItemToggle_setSelectedIndex'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        unsigned int arg0;

        ok &= sqval_to_uint32(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setSelectedIndex(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setSelectedIndex", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_MenuItemToggle_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 1)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::MenuItem")) {
                break;
            }

            cocos2d::MenuItem* arg0;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::MenuItemToggle* ret = cocos2d::MenuItemToggle::create(arg0);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.MenuItemToggle");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 0)
        {


            cocos2d::MenuItemToggle* ret = cocos2d::MenuItemToggle::create();
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.MenuItemToggle");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d", "create", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_MenuItemToggle_createWithCallback_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 2)
        {

            if (sq_gettype(vm, 2) != OT_CLOSURE) {
                break;
            }
            HSQOBJECT callback2;
            sq_getstackobj(vm, 2, &callback2);
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::MenuItem")) {
                break;
            }

            std::function<void (cocos2d::Ref *)> arg0;
            do {
			    // Lambda binding for squirrel
			    arg0 = [vm, callback2](cocos2d::Ref* larg0) -> void {
			        if (sq_getrefcount(vm, (HSQOBJECT *)&callback2) > 0) {
			            sq_pushobject(vm, callback2);
			            sq_push(vm, 1);
			            object_to_sqval<cocos2d::Ref>(vm, "cc.Ref", (cocos2d::Ref*)larg0);
			            sq_call(vm, 2, SQFalse, SQTrue);
			            sq_poptop(vm);
			        }
			    };
			} while(0);
            if (!ok) { break; }
            cocos2d::MenuItem* arg1;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 3, &arg1);
            if (!ok) { break; }
            cocos2d::MenuItemToggle* ret = cocos2d::MenuItemToggle::createWithCallback(arg0, arg1, NULL);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.MenuItemToggle");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            _SquirrelObject *sqobj = (_SquirrelObject *)ret->_scriptObject;
            sqobj->addClosure("callback2", callback2);
            return 1;
        }
        if (argc == 3)
        {

            if (sq_gettype(vm, 2) != OT_CLOSURE) {
                break;
            }
            HSQOBJECT callback2;
            sq_getstackobj(vm, 2, &callback2);
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INSTANCE || ! instanceof_cclass(vm, 4, "cocos2d::MenuItem")) {
                break;
            }

            std::function<void (cocos2d::Ref *)> arg0;
            do {
			    // Lambda binding for squirrel
			    arg0 = [vm, callback2](cocos2d::Ref* larg0) -> void {
			        if (sq_getrefcount(vm, (HSQOBJECT *)&callback2) > 0) {
			            sq_pushobject(vm, callback2);
			            sq_push(vm, 1);
			            object_to_sqval<cocos2d::Ref>(vm, "cc.Ref", (cocos2d::Ref*)larg0);
			            sq_call(vm, 2, SQFalse, SQTrue);
			            sq_poptop(vm);
			        }
			    };
			} while(0);
            if (!ok) { break; }
            cocos2d::MenuItem* arg1;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 3, &arg1);
            if (!ok) { break; }
            cocos2d::MenuItem* arg2;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 4, &arg2);
            if (!ok) { break; }
            cocos2d::MenuItemToggle* ret = cocos2d::MenuItemToggle::createWithCallback(arg0, arg1, arg2, NULL);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.MenuItemToggle");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            _SquirrelObject *sqobj = (_SquirrelObject *)ret->_scriptObject;
            sqobj->addClosure("callback2", callback2);
            return 1;
        }
        if (argc == 4)
        {

            if (sq_gettype(vm, 2) != OT_CLOSURE) {
                break;
            }
            HSQOBJECT callback2;
            sq_getstackobj(vm, 2, &callback2);
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INSTANCE || ! instanceof_cclass(vm, 4, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INSTANCE || ! instanceof_cclass(vm, 5, "cocos2d::MenuItem")) {
                break;
            }

            std::function<void (cocos2d::Ref *)> arg0;
            do {
			    // Lambda binding for squirrel
			    arg0 = [vm, callback2](cocos2d::Ref* larg0) -> void {
			        if (sq_getrefcount(vm, (HSQOBJECT *)&callback2) > 0) {
			            sq_pushobject(vm, callback2);
			            sq_push(vm, 1);
			            object_to_sqval<cocos2d::Ref>(vm, "cc.Ref", (cocos2d::Ref*)larg0);
			            sq_call(vm, 2, SQFalse, SQTrue);
			            sq_poptop(vm);
			        }
			    };
			} while(0);
            if (!ok) { break; }
            cocos2d::MenuItem* arg1;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 3, &arg1);
            if (!ok) { break; }
            cocos2d::MenuItem* arg2;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 4, &arg2);
            if (!ok) { break; }
            cocos2d::MenuItem* arg3;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 5, &arg3);
            if (!ok) { break; }
            cocos2d::MenuItemToggle* ret = cocos2d::MenuItemToggle::createWithCallback(arg0, arg1, arg2, arg3, NULL);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.MenuItemToggle");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            _SquirrelObject *sqobj = (_SquirrelObject *)ret->_scriptObject;
            sqobj->addClosure("callback2", callback2);
            return 1;
        }
        if (argc == 5)
        {

            if (sq_gettype(vm, 2) != OT_CLOSURE) {
                break;
            }
            HSQOBJECT callback2;
            sq_getstackobj(vm, 2, &callback2);
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INSTANCE || ! instanceof_cclass(vm, 4, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INSTANCE || ! instanceof_cclass(vm, 5, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 6) != OT_INSTANCE || ! instanceof_cclass(vm, 6, "cocos2d::MenuItem")) {
                break;
            }

            std::function<void (cocos2d::Ref *)> arg0;
            do {
			    // Lambda binding for squirrel
			    arg0 = [vm, callback2](cocos2d::Ref* larg0) -> void {
			        if (sq_getrefcount(vm, (HSQOBJECT *)&callback2) > 0) {
			            sq_pushobject(vm, callback2);
			            sq_push(vm, 1);
			            object_to_sqval<cocos2d::Ref>(vm, "cc.Ref", (cocos2d::Ref*)larg0);
			            sq_call(vm, 2, SQFalse, SQTrue);
			            sq_poptop(vm);
			        }
			    };
			} while(0);
            if (!ok) { break; }
            cocos2d::MenuItem* arg1;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 3, &arg1);
            if (!ok) { break; }
            cocos2d::MenuItem* arg2;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 4, &arg2);
            if (!ok) { break; }
            cocos2d::MenuItem* arg3;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 5, &arg3);
            if (!ok) { break; }
            cocos2d::MenuItem* arg4;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 6, &arg4);
            if (!ok) { break; }
            cocos2d::MenuItemToggle* ret = cocos2d::MenuItemToggle::createWithCallback(arg0, arg1, arg2, arg3, arg4, NULL);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.MenuItemToggle");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            _SquirrelObject *sqobj = (_SquirrelObject *)ret->_scriptObject;
            sqobj->addClosure("callback2", callback2);
            return 1;
        }
        if (argc == 6)
        {

            if (sq_gettype(vm, 2) != OT_CLOSURE) {
                break;
            }
            HSQOBJECT callback2;
            sq_getstackobj(vm, 2, &callback2);
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INSTANCE || ! instanceof_cclass(vm, 4, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INSTANCE || ! instanceof_cclass(vm, 5, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 6) != OT_INSTANCE || ! instanceof_cclass(vm, 6, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 7) != OT_INSTANCE || ! instanceof_cclass(vm, 7, "cocos2d::MenuItem")) {
                break;
            }

            std::function<void (cocos2d::Ref *)> arg0;
            do {
			    // Lambda binding for squirrel
			    arg0 = [vm, callback2](cocos2d::Ref* larg0) -> void {
			        if (sq_getrefcount(vm, (HSQOBJECT *)&callback2) > 0) {
			            sq_pushobject(vm, callback2);
			            sq_push(vm, 1);
			            object_to_sqval<cocos2d::Ref>(vm, "cc.Ref", (cocos2d::Ref*)larg0);
			            sq_call(vm, 2, SQFalse, SQTrue);
			            sq_poptop(vm);
			        }
			    };
			} while(0);
            if (!ok) { break; }
            cocos2d::MenuItem* arg1;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 3, &arg1);
            if (!ok) { break; }
            cocos2d::MenuItem* arg2;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 4, &arg2);
            if (!ok) { break; }
            cocos2d::MenuItem* arg3;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 5, &arg3);
            if (!ok) { break; }
            cocos2d::MenuItem* arg4;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 6, &arg4);
            if (!ok) { break; }
            cocos2d::MenuItem* arg5;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 7, &arg5);
            if (!ok) { break; }
            cocos2d::MenuItemToggle* ret = cocos2d::MenuItemToggle::createWithCallback(arg0, arg1, arg2, arg3, arg4, arg5, NULL);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.MenuItemToggle");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            _SquirrelObject *sqobj = (_SquirrelObject *)ret->_scriptObject;
            sqobj->addClosure("callback2", callback2);
            return 1;
        }
        if (argc == 7)
        {

            if (sq_gettype(vm, 2) != OT_CLOSURE) {
                break;
            }
            HSQOBJECT callback2;
            sq_getstackobj(vm, 2, &callback2);
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INSTANCE || ! instanceof_cclass(vm, 4, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INSTANCE || ! instanceof_cclass(vm, 5, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 6) != OT_INSTANCE || ! instanceof_cclass(vm, 6, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 7) != OT_INSTANCE || ! instanceof_cclass(vm, 7, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 8) != OT_INSTANCE || ! instanceof_cclass(vm, 8, "cocos2d::MenuItem")) {
                break;
            }

            std::function<void (cocos2d::Ref *)> arg0;
            do {
			    // Lambda binding for squirrel
			    arg0 = [vm, callback2](cocos2d::Ref* larg0) -> void {
			        if (sq_getrefcount(vm, (HSQOBJECT *)&callback2) > 0) {
			            sq_pushobject(vm, callback2);
			            sq_push(vm, 1);
			            object_to_sqval<cocos2d::Ref>(vm, "cc.Ref", (cocos2d::Ref*)larg0);
			            sq_call(vm, 2, SQFalse, SQTrue);
			            sq_poptop(vm);
			        }
			    };
			} while(0);
            if (!ok) { break; }
            cocos2d::MenuItem* arg1;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 3, &arg1);
            if (!ok) { break; }
            cocos2d::MenuItem* arg2;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 4, &arg2);
            if (!ok) { break; }
            cocos2d::MenuItem* arg3;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 5, &arg3);
            if (!ok) { break; }
            cocos2d::MenuItem* arg4;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 6, &arg4);
            if (!ok) { break; }
            cocos2d::MenuItem* arg5;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 7, &arg5);
            if (!ok) { break; }
            cocos2d::MenuItem* arg6;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 8, &arg6);
            if (!ok) { break; }
            cocos2d::MenuItemToggle* ret = cocos2d::MenuItemToggle::createWithCallback(arg0, arg1, arg2, arg3, arg4, arg5, arg6, NULL);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.MenuItemToggle");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            _SquirrelObject *sqobj = (_SquirrelObject *)ret->_scriptObject;
            sqobj->addClosure("callback2", callback2);
            return 1;
        }
        if (argc == 8)
        {

            if (sq_gettype(vm, 2) != OT_CLOSURE) {
                break;
            }
            HSQOBJECT callback2;
            sq_getstackobj(vm, 2, &callback2);
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INSTANCE || ! instanceof_cclass(vm, 4, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INSTANCE || ! instanceof_cclass(vm, 5, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 6) != OT_INSTANCE || ! instanceof_cclass(vm, 6, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 7) != OT_INSTANCE || ! instanceof_cclass(vm, 7, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 8) != OT_INSTANCE || ! instanceof_cclass(vm, 8, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 9) != OT_INSTANCE || ! instanceof_cclass(vm, 9, "cocos2d::MenuItem")) {
                break;
            }

            std::function<void (cocos2d::Ref *)> arg0;
            do {
			    // Lambda binding for squirrel
			    arg0 = [vm, callback2](cocos2d::Ref* larg0) -> void {
			        if (sq_getrefcount(vm, (HSQOBJECT *)&callback2) > 0) {
			            sq_pushobject(vm, callback2);
			            sq_push(vm, 1);
			            object_to_sqval<cocos2d::Ref>(vm, "cc.Ref", (cocos2d::Ref*)larg0);
			            sq_call(vm, 2, SQFalse, SQTrue);
			            sq_poptop(vm);
			        }
			    };
			} while(0);
            if (!ok) { break; }
            cocos2d::MenuItem* arg1;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 3, &arg1);
            if (!ok) { break; }
            cocos2d::MenuItem* arg2;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 4, &arg2);
            if (!ok) { break; }
            cocos2d::MenuItem* arg3;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 5, &arg3);
            if (!ok) { break; }
            cocos2d::MenuItem* arg4;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 6, &arg4);
            if (!ok) { break; }
            cocos2d::MenuItem* arg5;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 7, &arg5);
            if (!ok) { break; }
            cocos2d::MenuItem* arg6;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 8, &arg6);
            if (!ok) { break; }
            cocos2d::MenuItem* arg7;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 9, &arg7);
            if (!ok) { break; }
            cocos2d::MenuItemToggle* ret = cocos2d::MenuItemToggle::createWithCallback(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, NULL);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.MenuItemToggle");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            _SquirrelObject *sqobj = (_SquirrelObject *)ret->_scriptObject;
            sqobj->addClosure("callback2", callback2);
            return 1;
        }
        if (argc == 9)
        {

            if (sq_gettype(vm, 2) != OT_CLOSURE) {
                break;
            }
            HSQOBJECT callback2;
            sq_getstackobj(vm, 2, &callback2);
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INSTANCE || ! instanceof_cclass(vm, 4, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INSTANCE || ! instanceof_cclass(vm, 5, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 6) != OT_INSTANCE || ! instanceof_cclass(vm, 6, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 7) != OT_INSTANCE || ! instanceof_cclass(vm, 7, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 8) != OT_INSTANCE || ! instanceof_cclass(vm, 8, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 9) != OT_INSTANCE || ! instanceof_cclass(vm, 9, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 10) != OT_INSTANCE || ! instanceof_cclass(vm, 10, "cocos2d::MenuItem")) {
                break;
            }

            std::function<void (cocos2d::Ref *)> arg0;
            do {
			    // Lambda binding for squirrel
			    arg0 = [vm, callback2](cocos2d::Ref* larg0) -> void {
			        if (sq_getrefcount(vm, (HSQOBJECT *)&callback2) > 0) {
			            sq_pushobject(vm, callback2);
			            sq_push(vm, 1);
			            object_to_sqval<cocos2d::Ref>(vm, "cc.Ref", (cocos2d::Ref*)larg0);
			            sq_call(vm, 2, SQFalse, SQTrue);
			            sq_poptop(vm);
			        }
			    };
			} while(0);
            if (!ok) { break; }
            cocos2d::MenuItem* arg1;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 3, &arg1);
            if (!ok) { break; }
            cocos2d::MenuItem* arg2;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 4, &arg2);
            if (!ok) { break; }
            cocos2d::MenuItem* arg3;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 5, &arg3);
            if (!ok) { break; }
            cocos2d::MenuItem* arg4;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 6, &arg4);
            if (!ok) { break; }
            cocos2d::MenuItem* arg5;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 7, &arg5);
            if (!ok) { break; }
            cocos2d::MenuItem* arg6;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 8, &arg6);
            if (!ok) { break; }
            cocos2d::MenuItem* arg7;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 9, &arg7);
            if (!ok) { break; }
            cocos2d::MenuItem* arg8;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 10, &arg8);
            if (!ok) { break; }
            cocos2d::MenuItemToggle* ret = cocos2d::MenuItemToggle::createWithCallback(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, NULL);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.MenuItemToggle");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            _SquirrelObject *sqobj = (_SquirrelObject *)ret->_scriptObject;
            sqobj->addClosure("callback2", callback2);
            return 1;
        }
        if (argc == 10)
        {

            if (sq_gettype(vm, 2) != OT_CLOSURE) {
                break;
            }
            HSQOBJECT callback2;
            sq_getstackobj(vm, 2, &callback2);
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INSTANCE || ! instanceof_cclass(vm, 4, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INSTANCE || ! instanceof_cclass(vm, 5, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 6) != OT_INSTANCE || ! instanceof_cclass(vm, 6, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 7) != OT_INSTANCE || ! instanceof_cclass(vm, 7, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 8) != OT_INSTANCE || ! instanceof_cclass(vm, 8, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 9) != OT_INSTANCE || ! instanceof_cclass(vm, 9, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 10) != OT_INSTANCE || ! instanceof_cclass(vm, 10, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 11) != OT_INSTANCE || ! instanceof_cclass(vm, 11, "cocos2d::MenuItem")) {
                break;
            }

            std::function<void (cocos2d::Ref *)> arg0;
            do {
			    // Lambda binding for squirrel
			    arg0 = [vm, callback2](cocos2d::Ref* larg0) -> void {
			        if (sq_getrefcount(vm, (HSQOBJECT *)&callback2) > 0) {
			            sq_pushobject(vm, callback2);
			            sq_push(vm, 1);
			            object_to_sqval<cocos2d::Ref>(vm, "cc.Ref", (cocos2d::Ref*)larg0);
			            sq_call(vm, 2, SQFalse, SQTrue);
			            sq_poptop(vm);
			        }
			    };
			} while(0);
            if (!ok) { break; }
            cocos2d::MenuItem* arg1;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 3, &arg1);
            if (!ok) { break; }
            cocos2d::MenuItem* arg2;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 4, &arg2);
            if (!ok) { break; }
            cocos2d::MenuItem* arg3;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 5, &arg3);
            if (!ok) { break; }
            cocos2d::MenuItem* arg4;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 6, &arg4);
            if (!ok) { break; }
            cocos2d::MenuItem* arg5;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 7, &arg5);
            if (!ok) { break; }
            cocos2d::MenuItem* arg6;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 8, &arg6);
            if (!ok) { break; }
            cocos2d::MenuItem* arg7;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 9, &arg7);
            if (!ok) { break; }
            cocos2d::MenuItem* arg8;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 10, &arg8);
            if (!ok) { break; }
            cocos2d::MenuItem* arg9;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 11, &arg9);
            if (!ok) { break; }
            cocos2d::MenuItemToggle* ret = cocos2d::MenuItemToggle::createWithCallback(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, NULL);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.MenuItemToggle");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            _SquirrelObject *sqobj = (_SquirrelObject *)ret->_scriptObject;
            sqobj->addClosure("callback2", callback2);
            return 1;
        }
        if (argc == 11)
        {

            if (sq_gettype(vm, 2) != OT_CLOSURE) {
                break;
            }
            HSQOBJECT callback2;
            sq_getstackobj(vm, 2, &callback2);
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INSTANCE || ! instanceof_cclass(vm, 4, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INSTANCE || ! instanceof_cclass(vm, 5, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 6) != OT_INSTANCE || ! instanceof_cclass(vm, 6, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 7) != OT_INSTANCE || ! instanceof_cclass(vm, 7, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 8) != OT_INSTANCE || ! instanceof_cclass(vm, 8, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 9) != OT_INSTANCE || ! instanceof_cclass(vm, 9, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 10) != OT_INSTANCE || ! instanceof_cclass(vm, 10, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 11) != OT_INSTANCE || ! instanceof_cclass(vm, 11, "cocos2d::MenuItem")) {
                break;
            }
            if (sq_gettype(vm, 12) != OT_INSTANCE || ! instanceof_cclass(vm, 12, "cocos2d::MenuItem")) {
                break;
            }

            std::function<void (cocos2d::Ref *)> arg0;
            do {
			    // Lambda binding for squirrel
			    arg0 = [vm, callback2](cocos2d::Ref* larg0) -> void {
			        if (sq_getrefcount(vm, (HSQOBJECT *)&callback2) > 0) {
			            sq_pushobject(vm, callback2);
			            sq_push(vm, 1);
			            object_to_sqval<cocos2d::Ref>(vm, "cc.Ref", (cocos2d::Ref*)larg0);
			            sq_call(vm, 2, SQFalse, SQTrue);
			            sq_poptop(vm);
			        }
			    };
			} while(0);
            if (!ok) { break; }
            cocos2d::MenuItem* arg1;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 3, &arg1);
            if (!ok) { break; }
            cocos2d::MenuItem* arg2;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 4, &arg2);
            if (!ok) { break; }
            cocos2d::MenuItem* arg3;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 5, &arg3);
            if (!ok) { break; }
            cocos2d::MenuItem* arg4;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 6, &arg4);
            if (!ok) { break; }
            cocos2d::MenuItem* arg5;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 7, &arg5);
            if (!ok) { break; }
            cocos2d::MenuItem* arg6;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 8, &arg6);
            if (!ok) { break; }
            cocos2d::MenuItem* arg7;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 9, &arg7);
            if (!ok) { break; }
            cocos2d::MenuItem* arg8;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 10, &arg8);
            if (!ok) { break; }
            cocos2d::MenuItem* arg9;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 11, &arg9);
            if (!ok) { break; }
            cocos2d::MenuItem* arg10;
            ok &= sqval_to_object<cocos2d::MenuItem>(vm, 12, &arg10);
            if (!ok) { break; }
            cocos2d::MenuItemToggle* ret = cocos2d::MenuItemToggle::createWithCallback(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, NULL);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.MenuItemToggle");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            _SquirrelObject *sqobj = (_SquirrelObject *)ret->_scriptObject;
            sqobj->addClosure("callback2", callback2);
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 2)
        {

            if (sq_gettype(vm, 2) != OT_CLOSURE) {
                break;
            }
            HSQOBJECT callback2;
            sq_getstackobj(vm, 2, &callback2);
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Vector<cocos2d::MenuItem >")) {
                break;
            }

            std::function<void (cocos2d::Ref *)> arg0;
            do {
			    // Lambda binding for squirrel
			    arg0 = [vm, callback2](cocos2d::Ref* larg0) -> void {
			        if (sq_getrefcount(vm, (HSQOBJECT *)&callback2) > 0) {
			            sq_pushobject(vm, callback2);
			            sq_push(vm, 1);
			            object_to_sqval<cocos2d::Ref>(vm, "cc.Ref", (cocos2d::Ref*)larg0);
			            sq_call(vm, 2, SQFalse, SQTrue);
			            sq_poptop(vm);
			        }
			    };
			} while(0);
            if (!ok) { break; }
            cocos2d::Vector<cocos2d::MenuItem *> arg1;
            ok &= sqval_to_ccvector(vm, 3, &arg1);
            if (!ok) { break; }
            cocos2d::MenuItemToggle* ret = cocos2d::MenuItemToggle::createWithCallback(arg0, arg1);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.MenuItemToggle");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            _SquirrelObject *sqobj = (_SquirrelObject *)ret->_scriptObject;
            sqobj->addClosure("callback2", callback2);
            return 1;
        }
    } while (0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d", "createWithCallback", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_MenuItemToggle_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.MenuItemToggle", -1);
    return 1;
}

void squirrel_cocos2dx_MenuItemToggle_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::MenuItemToggle", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::MenuItem", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_MenuItemToggle(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("MenuItemToggle"), -1);


    sq_pushstring(vm, _SC("MenuItem"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "setSubItems", squirrel_cocos2dx_MenuItemToggle_setSubItems);
    to_squirrel_function(vm, "getSubItems", squirrel_cocos2dx_MenuItemToggle_getSubItems);
    to_squirrel_function(vm, "getSelectedIndex", squirrel_cocos2dx_MenuItemToggle_getSelectedIndex);
    to_squirrel_function(vm, "addSubItem", squirrel_cocos2dx_MenuItemToggle_addSubItem);
    to_squirrel_function(vm, "getSelectedItem", squirrel_cocos2dx_MenuItemToggle_getSelectedItem);
    to_squirrel_function(vm, "setSelectedIndex", squirrel_cocos2dx_MenuItemToggle_setSelectedIndex);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_MenuItemToggle_create_static, SQTrue);
    to_squirrel_function(vm, "createWithCallback", squirrel_cocos2dx_MenuItemToggle_createWithCallback_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_MenuItemToggle_typeof_meta);



    squirrel_cocos2dx_MenuItemToggle_push_c_class(vm);

    std::string typeName = typeid(cocos2d::MenuItemToggle).name();
    g_sqType[typeName] = "cc.MenuItemToggle";

    return 1;
}
SQInteger squirrel_cocos2dx_RemoveSelf_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        cocos2d::RemoveSelf* ret = cocos2d::RemoveSelf::create();
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.RemoveSelf");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    if (argc == 1)
    {
        bool arg0;
        ok &= sqval_to_boolean(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::RemoveSelf* ret = cocos2d::RemoveSelf::create(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.RemoveSelf");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 0);
    return 0;
}

SQInteger squirrel_cocos2dx_RemoveSelf_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.RemoveSelf", -1);
    return 1;
}

void squirrel_cocos2dx_RemoveSelf_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::RemoveSelf", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionInstant", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_RemoveSelf(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("RemoveSelf"), -1);


    sq_pushstring(vm, _SC("ActionInstant"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_RemoveSelf_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_RemoveSelf_typeof_meta);



    squirrel_cocos2dx_RemoveSelf_push_c_class(vm);

    std::string typeName = typeid(cocos2d::RemoveSelf).name();
    g_sqType[typeName] = "cc.RemoveSelf";

    return 1;
}
SQInteger squirrel_cocos2dx_SplitCols_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        float arg0;
        unsigned int arg1;
        ok &= sqval_to_float(vm, 2, &arg0);
        ok &= sqval_to_uint32(vm, 3, &arg1);
        if(!ok)
            return 0;
        cocos2d::SplitCols* ret = cocos2d::SplitCols::create(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.SplitCols");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_SplitCols_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.SplitCols", -1);
    return 1;
}

void squirrel_cocos2dx_SplitCols_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::SplitCols", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::TiledGrid3DAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::GridAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_SplitCols(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("SplitCols"), -1);


    sq_pushstring(vm, _SC("TiledGrid3DAction"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_SplitCols_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_SplitCols_typeof_meta);



    squirrel_cocos2dx_SplitCols_push_c_class(vm);

    std::string typeName = typeid(cocos2d::SplitCols).name();
    g_sqType[typeName] = "cc.SplitCols";

    return 1;
}
SQInteger squirrel_cocos2dx_TransitionProgressVertical_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        float arg0;
        cocos2d::Scene* arg1;
        ok &= sqval_to_float(vm, 2, &arg0);
        ok &= sqval_to_object<cocos2d::Scene>(vm, 3, &arg1);
        if(!ok)
            return 0;
        cocos2d::TransitionProgressVertical* ret = cocos2d::TransitionProgressVertical::create(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.TransitionProgressVertical");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_TransitionProgressVertical_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.TransitionProgressVertical", -1);
    return 1;
}

void squirrel_cocos2dx_TransitionProgressVertical_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::TransitionProgressVertical", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::TransitionProgress", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TransitionScene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Scene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_TransitionProgressVertical(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("TransitionProgressVertical"), -1);


    sq_pushstring(vm, _SC("TransitionProgress"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_TransitionProgressVertical_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_TransitionProgressVertical_typeof_meta);



    squirrel_cocos2dx_TransitionProgressVertical_push_c_class(vm);

    std::string typeName = typeid(cocos2d::TransitionProgressVertical).name();
    g_sqType[typeName] = "cc.TransitionProgressVertical";

    return 1;
}
SQInteger squirrel_cocos2dx_MoveBy_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        float arg0;
        cocos2d::Vec2 arg1;
        ok &= sqval_to_float(vm, 2, &arg0);
        cocos2d::Vec2* ptr3 = nullptr; ok &= sqval_to_vec2(vm, 3, ptr3); arg1 = *ptr3;
        if(!ok)
            return 0;
        cocos2d::MoveBy* ret = cocos2d::MoveBy::create(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.MoveBy");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_MoveBy_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.MoveBy", -1);
    return 1;
}

void squirrel_cocos2dx_MoveBy_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::MoveBy", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_MoveBy(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("MoveBy"), -1);


    sq_pushstring(vm, _SC("ActionInterval"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_MoveBy_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_MoveBy_typeof_meta);



    squirrel_cocos2dx_MoveBy_push_c_class(vm);

    std::string typeName = typeid(cocos2d::MoveBy).name();
    g_sqType[typeName] = "cc.MoveBy";

    return 1;
}
SQInteger squirrel_cocos2dx_ProtectedNode_addProtectedChild(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ProtectedNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ProtectedNode_addProtectedChild'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 2) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Node")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }

            cocos2d::Node* arg0;
            ok &= sqval_to_object<cocos2d::Node>(vm, 2, &arg0);

            if (!ok) { break; }
            int arg1;
            ok &= sqval_to_int32(vm, 3, (int *)&arg1);

            if (!ok) { break; }
            cobj->addProtectedChild(arg0, arg1);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Node")) {
                break;
            }

            cocos2d::Node* arg0;
            ok &= sqval_to_object<cocos2d::Node>(vm, 2, &arg0);

            if (!ok) { break; }
            cobj->addProtectedChild(arg0);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 3) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Node")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }

            cocos2d::Node* arg0;
            ok &= sqval_to_object<cocos2d::Node>(vm, 2, &arg0);

            if (!ok) { break; }
            int arg1;
            ok &= sqval_to_int32(vm, 3, (int *)&arg1);

            if (!ok) { break; }
            int arg2;
            ok &= sqval_to_int32(vm, 4, (int *)&arg2);

            if (!ok) { break; }
            cobj->addProtectedChild(arg0, arg1, arg2);
            return 0;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "addProtectedChild", (int)argc, 3);
    return 0;
}
SQInteger squirrel_cocos2dx_ProtectedNode_disableCascadeColor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ProtectedNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ProtectedNode_disableCascadeColor'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->disableCascadeColor();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "disableCascadeColor", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ProtectedNode_removeProtectedChildByTag(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ProtectedNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ProtectedNode_removeProtectedChildByTag'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        int arg0;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if (!ok)
            return 0;
        cobj->removeProtectedChildByTag(arg0);
        return 0;
    }
    if (argc == 2) 
    {
        int arg0;
        bool arg1;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);

        ok &= sqval_to_boolean(vm, 3, &arg1);
        if (!ok)
            return 0;
        cobj->removeProtectedChildByTag(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "removeProtectedChildByTag", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ProtectedNode_reorderProtectedChild(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ProtectedNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ProtectedNode_reorderProtectedChild'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        cocos2d::Node* arg0;
        int arg1;

        ok &= sqval_to_object<cocos2d::Node>(vm, 2, &arg0);

        ok &= sqval_to_int32(vm, 3, (int *)&arg1);
        if (!ok)
            return 0;
        cobj->reorderProtectedChild(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "reorderProtectedChild", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_ProtectedNode_removeAllProtectedChildrenWithCleanup(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ProtectedNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ProtectedNode_removeAllProtectedChildrenWithCleanup'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->removeAllProtectedChildrenWithCleanup(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "removeAllProtectedChildrenWithCleanup", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ProtectedNode_disableCascadeOpacity(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ProtectedNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ProtectedNode_disableCascadeOpacity'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->disableCascadeOpacity();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "disableCascadeOpacity", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ProtectedNode_sortAllProtectedChildren(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ProtectedNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ProtectedNode_sortAllProtectedChildren'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->sortAllProtectedChildren();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "sortAllProtectedChildren", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ProtectedNode_getProtectedChildByTag(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ProtectedNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ProtectedNode_getProtectedChildByTag'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        int arg0;

        ok &= sqval_to_int32(vm, 2, (int *)&arg0);
        if (!ok)
            return 0;
        cocos2d::Node* ret = cobj->getProtectedChildByTag(arg0);
        object_to_sqval<cocos2d::Node>(vm, "cc.Node", (cocos2d::Node*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getProtectedChildByTag", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ProtectedNode_removeProtectedChild(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ProtectedNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ProtectedNode_removeProtectedChild'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Node* arg0;

        ok &= sqval_to_object<cocos2d::Node>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->removeProtectedChild(arg0);
        return 0;
    }
    if (argc == 2) 
    {
        cocos2d::Node* arg0;
        bool arg1;

        ok &= sqval_to_object<cocos2d::Node>(vm, 2, &arg0);

        ok &= sqval_to_boolean(vm, 3, &arg1);
        if (!ok)
            return 0;
        cobj->removeProtectedChild(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "removeProtectedChild", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_ProtectedNode_removeAllProtectedChildren(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::ProtectedNode* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_ProtectedNode_removeAllProtectedChildren'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->removeAllProtectedChildren();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "removeAllProtectedChildren", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_ProtectedNode_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        cocos2d::ProtectedNode* ret = cocos2d::ProtectedNode::create();
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.ProtectedNode");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 0);
    return 0;
}

SQInteger squirrel_cocos2dx_ProtectedNode_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.ProtectedNode", -1);
    return 1;
}

void squirrel_cocos2dx_ProtectedNode_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::ProtectedNode", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_ProtectedNode(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("ProtectedNode"), -1);


    sq_pushstring(vm, _SC("Node"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "addProtectedChild", squirrel_cocos2dx_ProtectedNode_addProtectedChild);
    to_squirrel_function(vm, "disableCascadeColor", squirrel_cocos2dx_ProtectedNode_disableCascadeColor);
    to_squirrel_function(vm, "removeProtectedChildByTag", squirrel_cocos2dx_ProtectedNode_removeProtectedChildByTag);
    to_squirrel_function(vm, "reorderProtectedChild", squirrel_cocos2dx_ProtectedNode_reorderProtectedChild);
    to_squirrel_function(vm, "removeAllProtectedChildrenWithCleanup", squirrel_cocos2dx_ProtectedNode_removeAllProtectedChildrenWithCleanup);
    to_squirrel_function(vm, "disableCascadeOpacity", squirrel_cocos2dx_ProtectedNode_disableCascadeOpacity);
    to_squirrel_function(vm, "sortAllProtectedChildren", squirrel_cocos2dx_ProtectedNode_sortAllProtectedChildren);
    to_squirrel_function(vm, "getProtectedChildByTag", squirrel_cocos2dx_ProtectedNode_getProtectedChildByTag);
    to_squirrel_function(vm, "removeProtectedChild", squirrel_cocos2dx_ProtectedNode_removeProtectedChild);
    to_squirrel_function(vm, "removeAllProtectedChildren", squirrel_cocos2dx_ProtectedNode_removeAllProtectedChildren);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_ProtectedNode_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_ProtectedNode_typeof_meta);



    squirrel_cocos2dx_ProtectedNode_push_c_class(vm);

    std::string typeName = typeid(cocos2d::ProtectedNode).name();
    g_sqType[typeName] = "cc.ProtectedNode";

    return 1;
}
SQInteger squirrel_cocos2dx_MotionStreak_reset(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::MotionStreak* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_MotionStreak_reset'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->reset();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "reset", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_MotionStreak_setTexture(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::MotionStreak* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_MotionStreak_setTexture'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Texture2D* arg0;

        ok &= sqval_to_object<cocos2d::Texture2D>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setTexture(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setTexture", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_MotionStreak_getTexture(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::MotionStreak* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_MotionStreak_getTexture'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Texture2D* ret = cobj->getTexture();
        object_to_sqval<cocos2d::Texture2D>(vm, "cc.Texture2D", (cocos2d::Texture2D*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getTexture", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_MotionStreak_tintWithColor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::MotionStreak* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_MotionStreak_tintWithColor'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Color3B arg0;

        cocos2d::Color3B *ptr2 = nullptr; ok &= sqval_to_color3b(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->tintWithColor(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "tintWithColor", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_MotionStreak_setStartingPositionInitialized(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::MotionStreak* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_MotionStreak_setStartingPositionInitialized'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setStartingPositionInitialized(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setStartingPositionInitialized", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_MotionStreak_isStartingPositionInitialized(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::MotionStreak* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_MotionStreak_isStartingPositionInitialized'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isStartingPositionInitialized();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isStartingPositionInitialized", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_MotionStreak_isFastMode(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::MotionStreak* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_MotionStreak_isFastMode'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isFastMode();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isFastMode", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_MotionStreak_setFastMode(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::MotionStreak* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_MotionStreak_setFastMode'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setFastMode(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setFastMode", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_MotionStreak_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 5)
        {

            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INSTANCE || ! instanceof_cclass(vm, 5, "cocos2d::Color3B")) {
                break;
            }
            if (sq_gettype(vm, 6) != OT_INSTANCE || ! instanceof_cclass(vm, 6, "cocos2d::Texture2D")) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);
            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);
            if (!ok) { break; }
            float arg2;
            ok &= sqval_to_float(vm, 4, &arg2);
            if (!ok) { break; }
            cocos2d::Color3B arg3;
            cocos2d::Color3B *ptr5 = nullptr; ok &= sqval_to_color3b(vm, 5, ptr5); arg3 = *ptr5;
            if (!ok) { break; }
            cocos2d::Texture2D* arg4;
            ok &= sqval_to_object<cocos2d::Texture2D>(vm, 6, &arg4);
            if (!ok) { break; }
            cocos2d::MotionStreak* ret = cocos2d::MotionStreak::create(arg0, arg1, arg2, arg3, arg4);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.MotionStreak");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 5)
        {

            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 5) != OT_INSTANCE || ! instanceof_cclass(vm, 5, "cocos2d::Color3B")) {
                break;
            }
            if (sq_gettype(vm, 6) != OT_STRING) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);
            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);
            if (!ok) { break; }
            float arg2;
            ok &= sqval_to_float(vm, 4, &arg2);
            if (!ok) { break; }
            cocos2d::Color3B arg3;
            cocos2d::Color3B *ptr5 = nullptr; ok &= sqval_to_color3b(vm, 5, ptr5); arg3 = *ptr5;
            if (!ok) { break; }
            std::string arg4;
            ok &= sqval_to_std_string(vm, 6, &arg4);
            if (!ok) { break; }
            cocos2d::MotionStreak* ret = cocos2d::MotionStreak::create(arg0, arg1, arg2, arg3, arg4);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.MotionStreak");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d", "create", (int)argc, 5);
    return 0;
}

SQInteger squirrel_cocos2dx_MotionStreak_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.MotionStreak", -1);
    return 1;
}

void squirrel_cocos2dx_MotionStreak_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::MotionStreak", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TextureProtocol", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::BlendProtocol", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_MotionStreak(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("MotionStreak"), -1);


    sq_pushstring(vm, _SC("Node"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "reset", squirrel_cocos2dx_MotionStreak_reset);
    to_squirrel_function(vm, "setTexture", squirrel_cocos2dx_MotionStreak_setTexture);
    to_squirrel_function(vm, "getTexture", squirrel_cocos2dx_MotionStreak_getTexture);
    to_squirrel_function(vm, "tintWithColor", squirrel_cocos2dx_MotionStreak_tintWithColor);
    to_squirrel_function(vm, "setStartingPositionInitialized", squirrel_cocos2dx_MotionStreak_setStartingPositionInitialized);
    to_squirrel_function(vm, "isStartingPositionInitialized", squirrel_cocos2dx_MotionStreak_isStartingPositionInitialized);
    to_squirrel_function(vm, "isFastMode", squirrel_cocos2dx_MotionStreak_isFastMode);
    to_squirrel_function(vm, "setFastMode", squirrel_cocos2dx_MotionStreak_setFastMode);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_MotionStreak_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_MotionStreak_typeof_meta);



    squirrel_cocos2dx_MotionStreak_push_c_class(vm);

    std::string typeName = typeid(cocos2d::MotionStreak).name();
    g_sqType[typeName] = "cc.MotionStreak";

    return 1;
}
SQInteger squirrel_cocos2dx_RotateBy_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 3)
        {

            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INTEGER && sq_gettype(vm, 4) != OT_FLOAT) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);
            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);
            if (!ok) { break; }
            float arg2;
            ok &= sqval_to_float(vm, 4, &arg2);
            if (!ok) { break; }
            cocos2d::RotateBy* ret = cocos2d::RotateBy::create(arg0, arg1, arg2);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.RotateBy");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 2)
        {

            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INTEGER && sq_gettype(vm, 3) != OT_FLOAT) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);
            if (!ok) { break; }
            float arg1;
            ok &= sqval_to_float(vm, 3, &arg1);
            if (!ok) { break; }
            cocos2d::RotateBy* ret = cocos2d::RotateBy::create(arg0, arg1);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.RotateBy");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 2)
        {

            if (sq_gettype(vm, 2) != OT_INTEGER && sq_gettype(vm, 2) != OT_FLOAT) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Vec3")) {
                break;
            }

            float arg0;
            ok &= sqval_to_float(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::Vec3 arg1;
            cocos2d::Vec3* ptr3 = nullptr; ok &= sqval_to_vec3(vm, 3, ptr3); arg1 = *ptr3;
            if (!ok) { break; }
            cocos2d::RotateBy* ret = cocos2d::RotateBy::create(arg0, arg1);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.RotateBy");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d", "create", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_RotateBy_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.RotateBy", -1);
    return 1;
}

void squirrel_cocos2dx_RotateBy_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::RotateBy", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_RotateBy(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("RotateBy"), -1);


    sq_pushstring(vm, _SC("ActionInterval"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_RotateBy_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_RotateBy_typeof_meta);



    squirrel_cocos2dx_RotateBy_push_c_class(vm);

    std::string typeName = typeid(cocos2d::RotateBy).name();
    g_sqType[typeName] = "cc.RotateBy";

    return 1;
}
SQInteger squirrel_cocos2dx_FileUtils_fullPathForFilename(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::FileUtils* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_FileUtils_fullPathForFilename'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        std::string ret = cobj->fullPathForFilename(arg0);
        sq_pushstring(vm, (const SQChar *)ret.c_str(), -1);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "fullPathForFilename", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_FileUtils_getStringFromFile(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::FileUtils* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_FileUtils_getStringFromFile'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        std::string ret = cobj->getStringFromFile(arg0);
        sq_pushstring(vm, (const SQChar *)ret.c_str(), -1);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getStringFromFile", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_FileUtils_setFilenameLookupDictionary(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::FileUtils* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_FileUtils_setFilenameLookupDictionary'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::ValueMap arg0;

        ok &= sqval_to_ccvaluemap(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setFilenameLookupDictionary(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setFilenameLookupDictionary", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_FileUtils_removeFile(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::FileUtils* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_FileUtils_removeFile'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        bool ret = cobj->removeFile(arg0);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "removeFile", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_FileUtils_isAbsolutePath(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::FileUtils* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_FileUtils_isAbsolutePath'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        bool ret = cobj->isAbsolutePath(arg0);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isAbsolutePath", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_FileUtils_renameFile(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::FileUtils* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_FileUtils_renameFile'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 3) 
    {
        std::string arg0;
        std::string arg1;
        std::string arg2;

        ok &= sqval_to_std_string(vm, 2, &arg0);

        ok &= sqval_to_std_string(vm, 3, &arg1);

        ok &= sqval_to_std_string(vm, 4, &arg2);
        if (!ok)
            return 0;
        bool ret = cobj->renameFile(arg0, arg1, arg2);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "renameFile", (int)argc, 3);
    return 0;
}
SQInteger squirrel_cocos2dx_FileUtils_isPopupNotify(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::FileUtils* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_FileUtils_isPopupNotify'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isPopupNotify();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isPopupNotify", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_FileUtils_getValueVectorFromFile(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::FileUtils* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_FileUtils_getValueVectorFromFile'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        cocos2d::ValueVector ret = cobj->getValueVectorFromFile(arg0);
        ccvaluevector_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getValueVectorFromFile", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_FileUtils_getSearchPaths(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::FileUtils* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_FileUtils_getSearchPaths'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const std::vector<std::string>& ret = cobj->getSearchPaths();
        ccvector_string_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getSearchPaths", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_FileUtils_writeToFile(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::FileUtils* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_FileUtils_writeToFile'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        cocos2d::ValueMap arg0;
        std::string arg1;

        ok &= sqval_to_ccvaluemap(vm, 2, &arg0);

        ok &= sqval_to_std_string(vm, 3, &arg1);
        if (!ok)
            return 0;
        bool ret = cobj->writeToFile(arg0, arg1);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "writeToFile", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_FileUtils_getValueMapFromFile(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::FileUtils* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_FileUtils_getValueMapFromFile'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        cocos2d::ValueMap ret = cobj->getValueMapFromFile(arg0);
        ccvaluemap_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getValueMapFromFile", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_FileUtils_getValueMapFromData(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::FileUtils* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_FileUtils_getValueMapFromData'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        const char* arg0;
        int arg1;

        std::string arg0_tmp; ok &= sqval_to_std_string(vm, 2, &arg0_tmp); arg0 = arg0_tmp.c_str();

        ok &= sqval_to_int32(vm, 3, (int *)&arg1);
        if (!ok)
            return 0;
        cocos2d::ValueMap ret = cobj->getValueMapFromData(arg0, arg1);
        ccvaluemap_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getValueMapFromData", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_FileUtils_removeDirectory(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::FileUtils* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_FileUtils_removeDirectory'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        bool ret = cobj->removeDirectory(arg0);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "removeDirectory", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_FileUtils_setSearchPaths(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::FileUtils* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_FileUtils_setSearchPaths'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::vector<std::string> arg0;

        ok &= sqval_to_std_vector_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setSearchPaths(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setSearchPaths", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_FileUtils_getFileSize(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::FileUtils* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_FileUtils_getFileSize'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        long ret = cobj->getFileSize(arg0);
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getFileSize", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_FileUtils_setSearchResolutionsOrder(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::FileUtils* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_FileUtils_setSearchResolutionsOrder'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::vector<std::string> arg0;

        ok &= sqval_to_std_vector_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setSearchResolutionsOrder(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setSearchResolutionsOrder", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_FileUtils_addSearchResolutionsOrder(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::FileUtils* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_FileUtils_addSearchResolutionsOrder'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->addSearchResolutionsOrder(arg0);
        return 0;
    }
    if (argc == 2) 
    {
        std::string arg0;
        bool arg1;

        ok &= sqval_to_std_string(vm, 2, &arg0);

        ok &= sqval_to_boolean(vm, 3, &arg1);
        if (!ok)
            return 0;
        cobj->addSearchResolutionsOrder(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "addSearchResolutionsOrder", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_FileUtils_addSearchPath(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::FileUtils* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_FileUtils_addSearchPath'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->addSearchPath(arg0);
        return 0;
    }
    if (argc == 2) 
    {
        std::string arg0;
        bool arg1;

        ok &= sqval_to_std_string(vm, 2, &arg0);

        ok &= sqval_to_boolean(vm, 3, &arg1);
        if (!ok)
            return 0;
        cobj->addSearchPath(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "addSearchPath", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_FileUtils_isFileExist(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::FileUtils* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_FileUtils_isFileExist'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        bool ret = cobj->isFileExist(arg0);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isFileExist", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_FileUtils_purgeCachedEntries(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::FileUtils* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_FileUtils_purgeCachedEntries'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->purgeCachedEntries();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "purgeCachedEntries", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_FileUtils_fullPathFromRelativeFile(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::FileUtils* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_FileUtils_fullPathFromRelativeFile'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        std::string arg0;
        std::string arg1;

        ok &= sqval_to_std_string(vm, 2, &arg0);

        ok &= sqval_to_std_string(vm, 3, &arg1);
        if (!ok)
            return 0;
        std::string ret = cobj->fullPathFromRelativeFile(arg0, arg1);
        sq_pushstring(vm, (const SQChar *)ret.c_str(), -1);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "fullPathFromRelativeFile", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_FileUtils_setPopupNotify(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::FileUtils* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_FileUtils_setPopupNotify'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setPopupNotify(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setPopupNotify", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_FileUtils_isDirectoryExist(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::FileUtils* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_FileUtils_isDirectoryExist'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        bool ret = cobj->isDirectoryExist(arg0);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isDirectoryExist", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_FileUtils_getSearchResolutionsOrder(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::FileUtils* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_FileUtils_getSearchResolutionsOrder'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const std::vector<std::string>& ret = cobj->getSearchResolutionsOrder();
        ccvector_string_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getSearchResolutionsOrder", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_FileUtils_createDirectory(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::FileUtils* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_FileUtils_createDirectory'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        bool ret = cobj->createDirectory(arg0);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "createDirectory", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_FileUtils_loadFilenameLookupDictionaryFromFile(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::FileUtils* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_FileUtils_loadFilenameLookupDictionaryFromFile'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->loadFilenameLookupDictionaryFromFile(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "loadFilenameLookupDictionaryFromFile", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_FileUtils_getWritablePath(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::FileUtils* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_FileUtils_getWritablePath'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        std::string ret = cobj->getWritablePath();
        sq_pushstring(vm, (const SQChar *)ret.c_str(), -1);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getWritablePath", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_FileUtils_destroyInstance_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        cocos2d::FileUtils::destroyInstance();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "destroyInstance", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_FileUtils_getInstance_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        cocos2d::FileUtils* ret = cocos2d::FileUtils::getInstance();
        object_to_sqval<cocos2d::FileUtils>(vm, "cc.FileUtils", (cocos2d::FileUtils*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "getInstance", (int)argc, 0);
    return 0;
}

SQInteger squirrel_cocos2dx_FileUtils_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.FileUtils", -1);
    return 1;
}

void squirrel_cocos2dx_FileUtils_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::FileUtils", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_FileUtils(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("FileUtils"), -1);

    sq_newclass(vm, SQFalse);

    to_squirrel_function(vm, "fullPathForFilename", squirrel_cocos2dx_FileUtils_fullPathForFilename);
    to_squirrel_function(vm, "getStringFromFile", squirrel_cocos2dx_FileUtils_getStringFromFile);
    to_squirrel_function(vm, "setFilenameLookupDictionary", squirrel_cocos2dx_FileUtils_setFilenameLookupDictionary);
    to_squirrel_function(vm, "removeFile", squirrel_cocos2dx_FileUtils_removeFile);
    to_squirrel_function(vm, "isAbsolutePath", squirrel_cocos2dx_FileUtils_isAbsolutePath);
    to_squirrel_function(vm, "renameFile", squirrel_cocos2dx_FileUtils_renameFile);
    to_squirrel_function(vm, "isPopupNotify", squirrel_cocos2dx_FileUtils_isPopupNotify);
    to_squirrel_function(vm, "getValueVectorFromFile", squirrel_cocos2dx_FileUtils_getValueVectorFromFile);
    to_squirrel_function(vm, "getSearchPaths", squirrel_cocos2dx_FileUtils_getSearchPaths);
    to_squirrel_function(vm, "writeToFile", squirrel_cocos2dx_FileUtils_writeToFile);
    to_squirrel_function(vm, "getValueMapFromFile", squirrel_cocos2dx_FileUtils_getValueMapFromFile);
    to_squirrel_function(vm, "getValueMapFromData", squirrel_cocos2dx_FileUtils_getValueMapFromData);
    to_squirrel_function(vm, "removeDirectory", squirrel_cocos2dx_FileUtils_removeDirectory);
    to_squirrel_function(vm, "setSearchPaths", squirrel_cocos2dx_FileUtils_setSearchPaths);
    to_squirrel_function(vm, "getFileSize", squirrel_cocos2dx_FileUtils_getFileSize);
    to_squirrel_function(vm, "setSearchResolutionsOrder", squirrel_cocos2dx_FileUtils_setSearchResolutionsOrder);
    to_squirrel_function(vm, "addSearchResolutionsOrder", squirrel_cocos2dx_FileUtils_addSearchResolutionsOrder);
    to_squirrel_function(vm, "addSearchPath", squirrel_cocos2dx_FileUtils_addSearchPath);
    to_squirrel_function(vm, "isFileExist", squirrel_cocos2dx_FileUtils_isFileExist);
    to_squirrel_function(vm, "purgeCachedEntries", squirrel_cocos2dx_FileUtils_purgeCachedEntries);
    to_squirrel_function(vm, "fullPathFromRelativeFile", squirrel_cocos2dx_FileUtils_fullPathFromRelativeFile);
    to_squirrel_function(vm, "setPopupNotify", squirrel_cocos2dx_FileUtils_setPopupNotify);
    to_squirrel_function(vm, "isDirectoryExist", squirrel_cocos2dx_FileUtils_isDirectoryExist);
    to_squirrel_function(vm, "getSearchResolutionsOrder", squirrel_cocos2dx_FileUtils_getSearchResolutionsOrder);
    to_squirrel_function(vm, "createDirectory", squirrel_cocos2dx_FileUtils_createDirectory);
    to_squirrel_function(vm, "loadFilenameLookupDictionaryFromFile", squirrel_cocos2dx_FileUtils_loadFilenameLookupDictionaryFromFile);
    to_squirrel_function(vm, "getWritablePath", squirrel_cocos2dx_FileUtils_getWritablePath);
    to_squirrel_function(vm, "destroyInstance", squirrel_cocos2dx_FileUtils_destroyInstance_static, SQTrue);
    to_squirrel_function(vm, "getInstance", squirrel_cocos2dx_FileUtils_getInstance_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_FileUtils_typeof_meta);



    squirrel_cocos2dx_FileUtils_push_c_class(vm);

    std::string typeName = typeid(cocos2d::FileUtils).name();
    g_sqType[typeName] = "cc.FileUtils";

    return 1;
}

SQInteger squirrel_cocos2dx_BezierBy_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.BezierBy", -1);
    return 1;
}

void squirrel_cocos2dx_BezierBy_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::BezierBy", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_BezierBy(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("BezierBy"), -1);


    sq_pushstring(vm, _SC("ActionInterval"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }


    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_BezierBy_typeof_meta);



    squirrel_cocos2dx_BezierBy_push_c_class(vm);

    std::string typeName = typeid(cocos2d::BezierBy).name();
    g_sqType[typeName] = "cc.BezierBy";

    return 1;
}
SQInteger squirrel_cocos2dx_Sprite_setSpriteFrame(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Sprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Sprite_setSpriteFrame'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::SpriteFrame")) {
                break;
            }

            cocos2d::SpriteFrame* arg0;
            ok &= sqval_to_object<cocos2d::SpriteFrame>(vm, 2, &arg0);

            if (!ok) { break; }
            cobj->setSpriteFrame(arg0);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);

            if (!ok) { break; }
            cobj->setSpriteFrame(arg0);
            return 0;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setSpriteFrame", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Sprite_setTexture(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Sprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Sprite_setTexture'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Texture2D")) {
                break;
            }

            cocos2d::Texture2D* arg0;
            ok &= sqval_to_object<cocos2d::Texture2D>(vm, 2, &arg0);

            if (!ok) { break; }
            cobj->setTexture(arg0);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);

            if (!ok) { break; }
            cobj->setTexture(arg0);
            return 0;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setTexture", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Sprite_getTexture(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Sprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Sprite_getTexture'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::Texture2D* ret = cobj->getTexture();
        object_to_sqval<cocos2d::Texture2D>(vm, "cc.Texture2D", (cocos2d::Texture2D*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getTexture", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Sprite_setFlippedY(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Sprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Sprite_setFlippedY'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setFlippedY(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setFlippedY", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Sprite_setFlippedX(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Sprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Sprite_setFlippedX'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setFlippedX(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setFlippedX", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Sprite_getBatchNode(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Sprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Sprite_getBatchNode'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::SpriteBatchNode* ret = cobj->getBatchNode();
        object_to_sqval<cocos2d::SpriteBatchNode>(vm, "cc.SpriteBatchNode", (cocos2d::SpriteBatchNode*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getBatchNode", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Sprite_getOffsetPosition(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Sprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Sprite_getOffsetPosition'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::Vec2& ret = cobj->getOffsetPosition();
        vec2_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getOffsetPosition", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Sprite_updateTransform(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Sprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Sprite_updateTransform'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->updateTransform();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "updateTransform", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Sprite_setTextureRect(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Sprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj)
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Sprite_setTextureRect'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    do {
        if (argc == 3) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Rect")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_BOOL) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_INSTANCE || ! instanceof_cclass(vm, 4, "cocos2d::Size")) {
                break;
            }

            cocos2d::Rect arg0;
            cocos2d::Rect* ptr2 = nullptr; ok &= sqval_to_rect(vm, 2, ptr2); arg0 = *ptr2;

            if (!ok) { break; }
            bool arg1;
            ok &= sqval_to_boolean(vm, 3, &arg1);

            if (!ok) { break; }
            cocos2d::Size arg2;
            cocos2d::Size* ptr4 = nullptr; ok &= sqval_to_size(vm, 4, ptr4); arg2 = *ptr4;

            if (!ok) { break; }
            cobj->setTextureRect(arg0, arg1, arg2);
            return 0;
        }
    }while(0);
    ok  = true;
    do {
        if (argc == 1) {
            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Rect")) {
                break;
            }

            cocos2d::Rect arg0;
            cocos2d::Rect* ptr2 = nullptr; ok &= sqval_to_rect(vm, 2, ptr2); arg0 = *ptr2;

            if (!ok) { break; }
            cobj->setTextureRect(arg0);
            return 0;
        }
    }while(0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setTextureRect", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Sprite_isFrameDisplayed(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Sprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Sprite_isFrameDisplayed'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::SpriteFrame* arg0;

        ok &= sqval_to_object<cocos2d::SpriteFrame>(vm, 2, &arg0);
        if (!ok)
            return 0;
        bool ret = cobj->isFrameDisplayed(arg0);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isFrameDisplayed", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Sprite_getAtlasIndex(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Sprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Sprite_getAtlasIndex'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        ssize_t ret = cobj->getAtlasIndex();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getAtlasIndex", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Sprite_setBatchNode(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Sprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Sprite_setBatchNode'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::SpriteBatchNode* arg0;

        ok &= sqval_to_object<cocos2d::SpriteBatchNode>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setBatchNode(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setBatchNode", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Sprite_setDisplayFrameWithAnimationName(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Sprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Sprite_setDisplayFrameWithAnimationName'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        std::string arg0;
        ssize_t arg1;

        ok &= sqval_to_std_string(vm, 2, &arg0);

        ok &= sqval_to_ssize(vm, 3, &arg1);
        if (!ok)
            return 0;
        cobj->setDisplayFrameWithAnimationName(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setDisplayFrameWithAnimationName", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_Sprite_setTextureAtlas(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Sprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Sprite_setTextureAtlas'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::TextureAtlas* arg0;

        ok &= sqval_to_object<cocos2d::TextureAtlas>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setTextureAtlas(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setTextureAtlas", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Sprite_getSpriteFrame(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Sprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Sprite_getSpriteFrame'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::SpriteFrame* ret = cobj->getSpriteFrame();
        object_to_sqval<cocos2d::SpriteFrame>(vm, "cc.SpriteFrame", (cocos2d::SpriteFrame*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getSpriteFrame", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Sprite_isDirty(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Sprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Sprite_isDirty'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isDirty();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isDirty", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Sprite_setAtlasIndex(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Sprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Sprite_setAtlasIndex'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        ssize_t arg0;

        ok &= sqval_to_ssize(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setAtlasIndex(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setAtlasIndex", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Sprite_setDirty(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Sprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Sprite_setDirty'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= sqval_to_boolean(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setDirty(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setDirty", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Sprite_isTextureRectRotated(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Sprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Sprite_isTextureRectRotated'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isTextureRectRotated();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isTextureRectRotated", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Sprite_getTextureRect(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Sprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Sprite_getTextureRect'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const cocos2d::Rect& ret = cobj->getTextureRect();
        rect_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getTextureRect", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Sprite_getTextureAtlas(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Sprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Sprite_getTextureAtlas'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::TextureAtlas* ret = cobj->getTextureAtlas();
        object_to_sqval<cocos2d::TextureAtlas>(vm, "cc.TextureAtlas", (cocos2d::TextureAtlas*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getTextureAtlas", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Sprite_isFlippedX(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Sprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Sprite_isFlippedX'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isFlippedX();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isFlippedX", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Sprite_isFlippedY(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Sprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Sprite_isFlippedY'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        bool ret = cobj->isFlippedY();
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "isFlippedY", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Sprite_setVertexRect(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Sprite* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Sprite_setVertexRect'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Rect arg0;

        cocos2d::Rect* ptr2 = nullptr; ok &= sqval_to_rect(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->setVertexRect(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setVertexRect", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Sprite_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 1)
        {

            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::Sprite* ret = cocos2d::Sprite::create(arg0);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.Sprite");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 0)
        {


            cocos2d::Sprite* ret = cocos2d::Sprite::create();
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.Sprite");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 2)
        {

            if (sq_gettype(vm, 2) != OT_STRING) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Rect")) {
                break;
            }

            std::string arg0;
            ok &= sqval_to_std_string(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::Rect arg1;
            cocos2d::Rect* ptr3 = nullptr; ok &= sqval_to_rect(vm, 3, ptr3); arg1 = *ptr3;
            if (!ok) { break; }
            cocos2d::Sprite* ret = cocos2d::Sprite::create(arg0, arg1);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.Sprite");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d", "create", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_Sprite_createWithTexture_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 2)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Texture2D")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Rect")) {
                break;
            }

            cocos2d::Texture2D* arg0;
            ok &= sqval_to_object<cocos2d::Texture2D>(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::Rect arg1;
            cocos2d::Rect* ptr3 = nullptr; ok &= sqval_to_rect(vm, 3, ptr3); arg1 = *ptr3;
            if (!ok) { break; }
            cocos2d::Sprite* ret = cocos2d::Sprite::createWithTexture(arg0, arg1);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.Sprite");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 3)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Texture2D")) {
                break;
            }
            if (sq_gettype(vm, 3) != OT_INSTANCE || ! instanceof_cclass(vm, 3, "cocos2d::Rect")) {
                break;
            }
            if (sq_gettype(vm, 4) != OT_BOOL) {
                break;
            }

            cocos2d::Texture2D* arg0;
            ok &= sqval_to_object<cocos2d::Texture2D>(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::Rect arg1;
            cocos2d::Rect* ptr3 = nullptr; ok &= sqval_to_rect(vm, 3, ptr3); arg1 = *ptr3;
            if (!ok) { break; }
            bool arg2;
            ok &= sqval_to_boolean(vm, 4, &arg2);
            if (!ok) { break; }
            cocos2d::Sprite* ret = cocos2d::Sprite::createWithTexture(arg0, arg1, arg2);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.Sprite");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (sq_gettype(vm, 1) != OT_CLASS) {
            break;
        }
        if (argc == 1)
        {

            if (sq_gettype(vm, 2) != OT_INSTANCE || ! instanceof_cclass(vm, 2, "cocos2d::Texture2D")) {
                break;
            }

            cocos2d::Texture2D* arg0;
            ok &= sqval_to_object<cocos2d::Texture2D>(vm, 2, &arg0);
            if (!ok) { break; }
            cocos2d::Sprite* ret = cocos2d::Sprite::createWithTexture(arg0);
            if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
                sq_setinstanceup(vm, -1, (SQUserPointer)ret);
                set_squirrel_object(vm, -1, ret, "cc.Sprite");
                call_squirrel_closure(vm, - 1, "constructor", false);
            }
            return 1;
        }
    } while (0);
    ok  = true;
    CCLOG("%s has wrong number of arguments: %d, was expecting %d", "createWithTexture", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Sprite_createWithSpriteFrameName_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        std::string arg0;
        ok &= sqval_to_std_string(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::Sprite* ret = cocos2d::Sprite::createWithSpriteFrameName(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.Sprite");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "createWithSpriteFrameName", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Sprite_createWithSpriteFrame_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        cocos2d::SpriteFrame* arg0;
        ok &= sqval_to_object<cocos2d::SpriteFrame>(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::Sprite* ret = cocos2d::Sprite::createWithSpriteFrame(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.Sprite");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "createWithSpriteFrame", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_Sprite_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.Sprite", -1);
    return 1;
}

void squirrel_cocos2dx_Sprite_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::Sprite", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TextureProtocol", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::BlendProtocol", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_Sprite(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("Sprite"), -1);


    sq_pushstring(vm, _SC("Node"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "setSpriteFrame", squirrel_cocos2dx_Sprite_setSpriteFrame);
    to_squirrel_function(vm, "setTexture", squirrel_cocos2dx_Sprite_setTexture);
    to_squirrel_function(vm, "getTexture", squirrel_cocos2dx_Sprite_getTexture);
    to_squirrel_function(vm, "setFlippedY", squirrel_cocos2dx_Sprite_setFlippedY);
    to_squirrel_function(vm, "setFlippedX", squirrel_cocos2dx_Sprite_setFlippedX);
    to_squirrel_function(vm, "getBatchNode", squirrel_cocos2dx_Sprite_getBatchNode);
    to_squirrel_function(vm, "getOffsetPosition", squirrel_cocos2dx_Sprite_getOffsetPosition);
    to_squirrel_function(vm, "updateTransform", squirrel_cocos2dx_Sprite_updateTransform);
    to_squirrel_function(vm, "setTextureRect", squirrel_cocos2dx_Sprite_setTextureRect);
    to_squirrel_function(vm, "isFrameDisplayed", squirrel_cocos2dx_Sprite_isFrameDisplayed);
    to_squirrel_function(vm, "getAtlasIndex", squirrel_cocos2dx_Sprite_getAtlasIndex);
    to_squirrel_function(vm, "setBatchNode", squirrel_cocos2dx_Sprite_setBatchNode);
    to_squirrel_function(vm, "setDisplayFrameWithAnimationName", squirrel_cocos2dx_Sprite_setDisplayFrameWithAnimationName);
    to_squirrel_function(vm, "setTextureAtlas", squirrel_cocos2dx_Sprite_setTextureAtlas);
    to_squirrel_function(vm, "getSpriteFrame", squirrel_cocos2dx_Sprite_getSpriteFrame);
    to_squirrel_function(vm, "isDirty", squirrel_cocos2dx_Sprite_isDirty);
    to_squirrel_function(vm, "setAtlasIndex", squirrel_cocos2dx_Sprite_setAtlasIndex);
    to_squirrel_function(vm, "setDirty", squirrel_cocos2dx_Sprite_setDirty);
    to_squirrel_function(vm, "isTextureRectRotated", squirrel_cocos2dx_Sprite_isTextureRectRotated);
    to_squirrel_function(vm, "getTextureRect", squirrel_cocos2dx_Sprite_getTextureRect);
    to_squirrel_function(vm, "getTextureAtlas", squirrel_cocos2dx_Sprite_getTextureAtlas);
    to_squirrel_function(vm, "isFlippedX", squirrel_cocos2dx_Sprite_isFlippedX);
    to_squirrel_function(vm, "isFlippedY", squirrel_cocos2dx_Sprite_isFlippedY);
    to_squirrel_function(vm, "setVertexRect", squirrel_cocos2dx_Sprite_setVertexRect);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_Sprite_create_static, SQTrue);
    to_squirrel_function(vm, "createWithTexture", squirrel_cocos2dx_Sprite_createWithTexture_static, SQTrue);
    to_squirrel_function(vm, "createWithSpriteFrameName", squirrel_cocos2dx_Sprite_createWithSpriteFrameName_static, SQTrue);
    to_squirrel_function(vm, "createWithSpriteFrame", squirrel_cocos2dx_Sprite_createWithSpriteFrame_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_Sprite_typeof_meta);

    to_squirrel_variable_integer(vm, "INDEX_NOT_INITIALIZED", (SQInteger)cocos2d::Sprite::INDEX_NOT_INITIALIZED, SQTrue);


    squirrel_cocos2dx_Sprite_push_c_class(vm);

    std::string typeName = typeid(cocos2d::Sprite).name();
    g_sqType[typeName] = "cc.Sprite";

    return 1;
}
SQInteger squirrel_cocos2dx_ProgressTo_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        float arg0;
        float arg1;
        ok &= sqval_to_float(vm, 2, &arg0);
        ok &= sqval_to_float(vm, 3, &arg1);
        if(!ok)
            return 0;
        cocos2d::ProgressTo* ret = cocos2d::ProgressTo::create(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.ProgressTo");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_ProgressTo_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.ProgressTo", -1);
    return 1;
}

void squirrel_cocos2dx_ProgressTo_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::ProgressTo", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_ProgressTo(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("ProgressTo"), -1);


    sq_pushstring(vm, _SC("ActionInterval"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_ProgressTo_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_ProgressTo_typeof_meta);



    squirrel_cocos2dx_ProgressTo_push_c_class(vm);

    std::string typeName = typeid(cocos2d::ProgressTo).name();
    g_sqType[typeName] = "cc.ProgressTo";

    return 1;
}
SQInteger squirrel_cocos2dx_TransitionProgressOutIn_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        float arg0;
        cocos2d::Scene* arg1;
        ok &= sqval_to_float(vm, 2, &arg0);
        ok &= sqval_to_object<cocos2d::Scene>(vm, 3, &arg1);
        if(!ok)
            return 0;
        cocos2d::TransitionProgressOutIn* ret = cocos2d::TransitionProgressOutIn::create(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.TransitionProgressOutIn");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_TransitionProgressOutIn_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.TransitionProgressOutIn", -1);
    return 1;
}

void squirrel_cocos2dx_TransitionProgressOutIn_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::TransitionProgressOutIn", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::TransitionProgress", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TransitionScene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Scene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_TransitionProgressOutIn(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("TransitionProgressOutIn"), -1);


    sq_pushstring(vm, _SC("TransitionProgress"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_TransitionProgressOutIn_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_TransitionProgressOutIn_typeof_meta);



    squirrel_cocos2dx_TransitionProgressOutIn_push_c_class(vm);

    std::string typeName = typeid(cocos2d::TransitionProgressOutIn).name();
    g_sqType[typeName] = "cc.TransitionProgressOutIn";

    return 1;
}
SQInteger squirrel_cocos2dx_CatmullRomBy_initWithDuration(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::CatmullRomBy* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_CatmullRomBy_initWithDuration'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        float arg0;
        cocos2d::PointArray* arg1;

        ok &= sqval_to_float(vm, 2, &arg0);

        ok &= sqval_to_object<cocos2d::PointArray>(vm, 3, &arg1);
        if (!ok)
            return 0;
        bool ret = cobj->initWithDuration(arg0, arg1);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "initWithDuration", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_CatmullRomBy_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.CatmullRomBy", -1);
    return 1;
}

void squirrel_cocos2dx_CatmullRomBy_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::CatmullRomBy", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::CardinalSplineBy", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::CardinalSplineTo", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_CatmullRomBy(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("CatmullRomBy"), -1);


    sq_pushstring(vm, _SC("CardinalSplineBy"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "initWithDuration", squirrel_cocos2dx_CatmullRomBy_initWithDuration);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_CatmullRomBy_typeof_meta);



    squirrel_cocos2dx_CatmullRomBy_push_c_class(vm);

    std::string typeName = typeid(cocos2d::CatmullRomBy).name();
    g_sqType[typeName] = "cc.CatmullRomBy";

    return 1;
}
SQInteger squirrel_cocos2dx_GridAction_getGrid(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GridAction* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GridAction_getGrid'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::GridBase* ret = cobj->getGrid();
        object_to_sqval<cocos2d::GridBase>(vm, "cc.GridBase", (cocos2d::GridBase*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getGrid", (int)argc, 0);
    return 0;
}

SQInteger squirrel_cocos2dx_GridAction_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.GridAction", -1);
    return 1;
}

void squirrel_cocos2dx_GridAction_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::GridAction", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_GridAction(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("GridAction"), -1);


    sq_pushstring(vm, _SC("ActionInterval"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "getGrid", squirrel_cocos2dx_GridAction_getGrid);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_GridAction_typeof_meta);



    squirrel_cocos2dx_GridAction_push_c_class(vm);

    std::string typeName = typeid(cocos2d::GridAction).name();
    g_sqType[typeName] = "cc.GridAction";

    return 1;
}
SQInteger squirrel_cocos2dx_TransitionEaseScene_easeActionWithAction(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TransitionEaseScene* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TransitionEaseScene_easeActionWithAction'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::ActionInterval* arg0;

        ok &= sqval_to_object<cocos2d::ActionInterval>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cocos2d::ActionInterval* ret = cobj->easeActionWithAction(arg0);
        object_to_sqval<cocos2d::ActionInterval>(vm, "cc.ActionInterval", (cocos2d::ActionInterval*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "easeActionWithAction", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_TransitionEaseScene_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.TransitionEaseScene", -1);
    return 1;
}

void squirrel_cocos2dx_TransitionEaseScene_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::TransitionEaseScene", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_TransitionEaseScene(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("TransitionEaseScene"), -1);

    sq_newclass(vm, SQFalse);

    to_squirrel_function(vm, "easeActionWithAction", squirrel_cocos2dx_TransitionEaseScene_easeActionWithAction);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_TransitionEaseScene_typeof_meta);



    squirrel_cocos2dx_TransitionEaseScene_push_c_class(vm);

    std::string typeName = typeid(cocos2d::TransitionEaseScene).name();
    g_sqType[typeName] = "cc.TransitionEaseScene";

    return 1;
}

SQInteger squirrel_cocos2dx_Sequence_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.Sequence", -1);
    return 1;
}

void squirrel_cocos2dx_Sequence_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::Sequence", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_Sequence(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("Sequence"), -1);


    sq_pushstring(vm, _SC("ActionInterval"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }


    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_Sequence_typeof_meta);



    squirrel_cocos2dx_Sequence_push_c_class(vm);

    std::string typeName = typeid(cocos2d::Sequence).name();
    g_sqType[typeName] = "cc.Sequence";

    return 1;
}
SQInteger squirrel_cocos2dx_Shaky3D_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 4)
    {
        float arg0;
        cocos2d::Size arg1;
        int arg2;
        bool arg3;
        ok &= sqval_to_float(vm, 2, &arg0);
        cocos2d::Size* ptr3 = nullptr; ok &= sqval_to_size(vm, 3, ptr3); arg1 = *ptr3;
        ok &= sqval_to_int32(vm, 4, (int *)&arg2);
        ok &= sqval_to_boolean(vm, 5, &arg3);
        if(!ok)
            return 0;
        cocos2d::Shaky3D* ret = cocos2d::Shaky3D::create(arg0, arg1, arg2, arg3);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.Shaky3D");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 4);
    return 0;
}

SQInteger squirrel_cocos2dx_Shaky3D_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.Shaky3D", -1);
    return 1;
}

void squirrel_cocos2dx_Shaky3D_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::Shaky3D", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Grid3DAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::GridAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_Shaky3D(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("Shaky3D"), -1);


    sq_pushstring(vm, _SC("Grid3DAction"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_Shaky3D_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_Shaky3D_typeof_meta);



    squirrel_cocos2dx_Shaky3D_push_c_class(vm);

    std::string typeName = typeid(cocos2d::Shaky3D).name();
    g_sqType[typeName] = "cc.Shaky3D";

    return 1;
}
SQInteger squirrel_cocos2dx_TransitionProgressRadialCW_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        float arg0;
        cocos2d::Scene* arg1;
        ok &= sqval_to_float(vm, 2, &arg0);
        ok &= sqval_to_object<cocos2d::Scene>(vm, 3, &arg1);
        if(!ok)
            return 0;
        cocos2d::TransitionProgressRadialCW* ret = cocos2d::TransitionProgressRadialCW::create(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.TransitionProgressRadialCW");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_TransitionProgressRadialCW_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.TransitionProgressRadialCW", -1);
    return 1;
}

void squirrel_cocos2dx_TransitionProgressRadialCW_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::TransitionProgressRadialCW", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::TransitionProgress", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TransitionScene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Scene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_TransitionProgressRadialCW(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("TransitionProgressRadialCW"), -1);


    sq_pushstring(vm, _SC("TransitionProgress"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_TransitionProgressRadialCW_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_TransitionProgressRadialCW_typeof_meta);



    squirrel_cocos2dx_TransitionProgressRadialCW_push_c_class(vm);

    std::string typeName = typeid(cocos2d::TransitionProgressRadialCW).name();
    g_sqType[typeName] = "cc.TransitionProgressRadialCW";

    return 1;
}
SQInteger squirrel_cocos2dx_EaseBounceInOut_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        cocos2d::ActionInterval* arg0;
        ok &= sqval_to_object<cocos2d::ActionInterval>(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::EaseBounceInOut* ret = cocos2d::EaseBounceInOut::create(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.EaseBounceInOut");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_EaseBounceInOut_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.EaseBounceInOut", -1);
    return 1;
}

void squirrel_cocos2dx_EaseBounceInOut_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::EaseBounceInOut", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::EaseBounce", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionEase", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_EaseBounceInOut(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("EaseBounceInOut"), -1);


    sq_pushstring(vm, _SC("EaseBounce"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_EaseBounceInOut_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_EaseBounceInOut_typeof_meta);



    squirrel_cocos2dx_EaseBounceInOut_push_c_class(vm);

    std::string typeName = typeid(cocos2d::EaseBounceInOut).name();
    g_sqType[typeName] = "cc.EaseBounceInOut";

    return 1;
}
SQInteger squirrel_cocos2dx_TransitionSlideInR_action(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TransitionSlideInR* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TransitionSlideInR_action'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::ActionInterval* ret = cobj->action();
        object_to_sqval<cocos2d::ActionInterval>(vm, "cc.ActionInterval", (cocos2d::ActionInterval*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "action", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_TransitionSlideInR_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        float arg0;
        cocos2d::Scene* arg1;
        ok &= sqval_to_float(vm, 2, &arg0);
        ok &= sqval_to_object<cocos2d::Scene>(vm, 3, &arg1);
        if(!ok)
            return 0;
        cocos2d::TransitionSlideInR* ret = cocos2d::TransitionSlideInR::create(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.TransitionSlideInR");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_TransitionSlideInR_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.TransitionSlideInR", -1);
    return 1;
}

void squirrel_cocos2dx_TransitionSlideInR_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::TransitionSlideInR", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::TransitionSlideInL", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TransitionScene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Scene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TransitionEaseScene", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_TransitionSlideInR(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("TransitionSlideInR"), -1);


    sq_pushstring(vm, _SC("TransitionSlideInL"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "action", squirrel_cocos2dx_TransitionSlideInR_action);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_TransitionSlideInR_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_TransitionSlideInR_typeof_meta);



    squirrel_cocos2dx_TransitionSlideInR_push_c_class(vm);

    std::string typeName = typeid(cocos2d::TransitionSlideInR).name();
    g_sqType[typeName] = "cc.TransitionSlideInR";

    return 1;
}
SQInteger squirrel_cocos2dx_Scene_getPhysicsWorld(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Scene* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Scene_getPhysicsWorld'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::PhysicsWorld* ret = cobj->getPhysicsWorld();
        object_to_sqval<cocos2d::PhysicsWorld>(vm, "cc.PhysicsWorld", (cocos2d::PhysicsWorld*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getPhysicsWorld", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Scene_getCameras(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Scene* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Scene_getCameras'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const std::vector<cocos2d::Camera *>& ret = cobj->getCameras();
        ccvector_object_to_sqval<cocos2d::Camera >(vm, "td::vector<cc.Camera", ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getCameras", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Scene_getLights(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Scene* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Scene_getLights'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        const std::vector<cocos2d::BaseLight *>& ret = cobj->getLights();
        ccvector_object_to_sqval<cocos2d::BaseLight >(vm, "td::vector<cc.BaseLight", ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getLights", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Scene_render(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Scene* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Scene_render'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Renderer* arg0;

        ok &= sqval_to_object<cocos2d::Renderer>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->render(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "render", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Scene_createWithSize_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        cocos2d::Size arg0;
        cocos2d::Size* ptr2 = nullptr; ok &= sqval_to_size(vm, 2, ptr2); arg0 = *ptr2;
        if(!ok)
            return 0;
        cocos2d::Scene* ret = cocos2d::Scene::createWithSize(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.Scene");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "createWithSize", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Scene_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        cocos2d::Scene* ret = cocos2d::Scene::create();
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.Scene");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Scene_createWithPhysics_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        cocos2d::Scene* ret = cocos2d::Scene::createWithPhysics();
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.Scene");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "createWithPhysics", (int)argc, 0);
    return 0;
}

SQInteger squirrel_cocos2dx_Scene_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.Scene", -1);
    return 1;
}

void squirrel_cocos2dx_Scene_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::Scene", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_Scene(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("Scene"), -1);


    sq_pushstring(vm, _SC("Node"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "getPhysicsWorld", squirrel_cocos2dx_Scene_getPhysicsWorld);
    to_squirrel_function(vm, "getCameras", squirrel_cocos2dx_Scene_getCameras);
    to_squirrel_function(vm, "getLights", squirrel_cocos2dx_Scene_getLights);
    to_squirrel_function(vm, "render", squirrel_cocos2dx_Scene_render);
    to_squirrel_function(vm, "createWithSize", squirrel_cocos2dx_Scene_createWithSize_static, SQTrue);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_Scene_create_static, SQTrue);
    to_squirrel_function(vm, "createWithPhysics", squirrel_cocos2dx_Scene_createWithPhysics_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_Scene_typeof_meta);



    squirrel_cocos2dx_Scene_push_c_class(vm);

    std::string typeName = typeid(cocos2d::Scene).name();
    g_sqType[typeName] = "cc.Scene";

    return 1;
}
SQInteger squirrel_cocos2dx_NodeDatas_resetData(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::NodeDatas* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_NodeDatas_resetData'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->resetData();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "resetData", (int)argc, 0);
    return 0;
}

SQInteger squirrel_cocos2dx_NodeDatas_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.NodeDatas", -1);
    return 1;
}

SQInteger squirrel_cocos2dx_NodeDatas_get_meta(HSQUIRRELVM vm)
{
    cocos2d::NodeDatas *cobj = nullptr;
    if (SQ_FAILED(sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0))) {
        CCLOG("cocos2d::NodeDatas sq_getinstanceup failed.");
        sq_pushnull(vm);
        return 1;
    }

    const char *varName = nullptr;
    sq_getstring(vm, 2, &varName);
    
    do {
        if (strcmp(varName, "skeleton") == 0) {
            ccvector_object_to_sqval<cocos2d::NodeData >(vm, "td::vector<cc.NodeData", cobj->skeleton);
            break;
        }
        if (strcmp(varName, "nodes") == 0) {
            ccvector_object_to_sqval<cocos2d::NodeData >(vm, "td::vector<cc.NodeData", cobj->nodes);
            break;
        }

        return 0;
        
    } while(0);

    return 1;
}

SQInteger squirrel_cocos2dx_NodeDatas_set_meta(HSQUIRRELVM vm)
{
    cocos2d::NodeDatas *cobj = nullptr;
    if (SQ_FAILED(sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0))) {
        CCLOG("cocos2d::NodeDatas sq_getinstanceup failed.");
        return 0;
    }

    bool ok  = true;
    const char *varName = nullptr;
    sq_getstring(vm, 2, &varName);
    
    do {
        if (strcmp(varName, "skeleton") == 0) {
            ok &= sqval_to_ccvector_object<cocos2d::NodeData >(vm, 3, cobj->skeleton);
            if (! ok) {
                return 0;
            }
            break;
        }
        if (strcmp(varName, "nodes") == 0) {
            ok &= sqval_to_ccvector_object<cocos2d::NodeData >(vm, 3, cobj->nodes);
            if (! ok) {
                return 0;
            }
            break;
        }

        CCLOG("specified variable is not found in cocos2d::NodeDatas");
    } while(0);

    return 0;
}

void squirrel_cocos2dx_NodeDatas_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::NodeDatas", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_NodeDatas(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("NodeDatas"), -1);

    sq_newclass(vm, SQFalse);

    to_squirrel_function(vm, "resetData", squirrel_cocos2dx_NodeDatas_resetData);

    to_squirrel_function(vm, "_get", squirrel_cocos2dx_NodeDatas_get_meta);
    to_squirrel_function(vm, "_set", squirrel_cocos2dx_NodeDatas_set_meta);
    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_NodeDatas_typeof_meta);



    squirrel_cocos2dx_NodeDatas_push_c_class(vm);

    std::string typeName = typeid(cocos2d::NodeDatas).name();
    g_sqType[typeName] = "cc.NodeDatas";

    return 1;
}
SQInteger squirrel_cocos2dx_GLProgramCache_addGLProgram(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLProgramCache* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLProgramCache_addGLProgram'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        cocos2d::GLProgram* arg0;
        std::string arg1;

        ok &= sqval_to_object<cocos2d::GLProgram>(vm, 2, &arg0);

        ok &= sqval_to_std_string(vm, 3, &arg1);
        if (!ok)
            return 0;
        cobj->addGLProgram(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "addGLProgram", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_GLProgramCache_getGLProgram(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLProgramCache* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLProgramCache_getGLProgram'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= sqval_to_std_string(vm, 2, &arg0);
        if (!ok)
            return 0;
        cocos2d::GLProgram* ret = cobj->getGLProgram(arg0);
        object_to_sqval<cocos2d::GLProgram>(vm, "cc.GLProgram", (cocos2d::GLProgram*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getGLProgram", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_GLProgramCache_reloadDefaultGLPrograms(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLProgramCache* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLProgramCache_reloadDefaultGLPrograms'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->reloadDefaultGLPrograms();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "reloadDefaultGLPrograms", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_GLProgramCache_loadDefaultGLPrograms(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLProgramCache* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_GLProgramCache_loadDefaultGLPrograms'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->loadDefaultGLPrograms();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "loadDefaultGLPrograms", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_GLProgramCache_destroyInstance_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        cocos2d::GLProgramCache::destroyInstance();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "destroyInstance", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_GLProgramCache_getInstance_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        cocos2d::GLProgramCache* ret = cocos2d::GLProgramCache::getInstance();
        object_to_sqval<cocos2d::GLProgramCache>(vm, "cc.GLProgramCache", (cocos2d::GLProgramCache*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "getInstance", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_GLProgramCache_constructor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::GLProgramCache* cobj = nullptr;
    bool ok  = true;

    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj = new cocos2d::GLProgramCache();
        sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
        cobj->retain();
        sq_setreleasehook(vm, 1, squirrel_releasehook_Ref);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "GLProgramCache", (int)argc, 0);
    return 0;
}


SQInteger squirrel_cocos2dx_GLProgramCache_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.GLProgramCache", -1);
    return 1;
}

void squirrel_cocos2dx_GLProgramCache_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::GLProgramCache", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_GLProgramCache(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("GLProgramCache"), -1);


    sq_pushstring(vm, _SC("Ref"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "constructor", squirrel_cocos2dx_GLProgramCache_constructor);
    to_squirrel_function(vm, "addGLProgram", squirrel_cocos2dx_GLProgramCache_addGLProgram);
    to_squirrel_function(vm, "getGLProgram", squirrel_cocos2dx_GLProgramCache_getGLProgram);
    to_squirrel_function(vm, "reloadDefaultGLPrograms", squirrel_cocos2dx_GLProgramCache_reloadDefaultGLPrograms);
    to_squirrel_function(vm, "loadDefaultGLPrograms", squirrel_cocos2dx_GLProgramCache_loadDefaultGLPrograms);
    to_squirrel_function(vm, "destroyInstance", squirrel_cocos2dx_GLProgramCache_destroyInstance_static, SQTrue);
    to_squirrel_function(vm, "getInstance", squirrel_cocos2dx_GLProgramCache_getInstance_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_GLProgramCache_typeof_meta);



    squirrel_cocos2dx_GLProgramCache_push_c_class(vm);

    std::string typeName = typeid(cocos2d::GLProgramCache).name();
    g_sqType[typeName] = "cc.GLProgramCache";

    return 1;
}
SQInteger squirrel_cocos2dx_TiledGrid3DAction_getGrid(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TiledGrid3DAction* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TiledGrid3DAction_getGrid'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::GridBase* ret = cobj->getGrid();
        object_to_sqval<cocos2d::GridBase>(vm, "cc.GridBase", (cocos2d::GridBase*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getGrid", (int)argc, 0);
    return 0;
}

SQInteger squirrel_cocos2dx_TiledGrid3DAction_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.TiledGrid3DAction", -1);
    return 1;
}

void squirrel_cocos2dx_TiledGrid3DAction_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::TiledGrid3DAction", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::GridAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_TiledGrid3DAction(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("TiledGrid3DAction"), -1);


    sq_pushstring(vm, _SC("GridAction"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "getGrid", squirrel_cocos2dx_TiledGrid3DAction_getGrid);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_TiledGrid3DAction_typeof_meta);



    squirrel_cocos2dx_TiledGrid3DAction_push_c_class(vm);

    std::string typeName = typeid(cocos2d::TiledGrid3DAction).name();
    g_sqType[typeName] = "cc.TiledGrid3DAction";

    return 1;
}
SQInteger squirrel_cocos2dx_EaseQuadraticActionIn_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        cocos2d::ActionInterval* arg0;
        ok &= sqval_to_object<cocos2d::ActionInterval>(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::EaseQuadraticActionIn* ret = cocos2d::EaseQuadraticActionIn::create(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.EaseQuadraticActionIn");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 1);
    return 0;
}

SQInteger squirrel_cocos2dx_EaseQuadraticActionIn_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.EaseQuadraticActionIn", -1);
    return 1;
}

void squirrel_cocos2dx_EaseQuadraticActionIn_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::EaseQuadraticActionIn", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::ActionEase", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_EaseQuadraticActionIn(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("EaseQuadraticActionIn"), -1);


    sq_pushstring(vm, _SC("ActionEase"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_EaseQuadraticActionIn_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_EaseQuadraticActionIn_typeof_meta);



    squirrel_cocos2dx_EaseQuadraticActionIn_push_c_class(vm);

    std::string typeName = typeid(cocos2d::EaseQuadraticActionIn).name();
    g_sqType[typeName] = "cc.EaseQuadraticActionIn";

    return 1;
}
SQInteger squirrel_cocos2dx_WavesTiles3D_getAmplitudeRate(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::WavesTiles3D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_WavesTiles3D_getAmplitudeRate'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getAmplitudeRate();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getAmplitudeRate", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_WavesTiles3D_setAmplitude(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::WavesTiles3D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_WavesTiles3D_setAmplitude'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setAmplitude(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setAmplitude", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_WavesTiles3D_setAmplitudeRate(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::WavesTiles3D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_WavesTiles3D_setAmplitudeRate'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setAmplitudeRate(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setAmplitudeRate", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_WavesTiles3D_getAmplitude(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::WavesTiles3D* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_WavesTiles3D_getAmplitude'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getAmplitude();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getAmplitude", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_WavesTiles3D_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 4)
    {
        float arg0;
        cocos2d::Size arg1;
        unsigned int arg2;
        float arg3;
        ok &= sqval_to_float(vm, 2, &arg0);
        cocos2d::Size* ptr3 = nullptr; ok &= sqval_to_size(vm, 3, ptr3); arg1 = *ptr3;
        ok &= sqval_to_uint32(vm, 4, &arg2);
        ok &= sqval_to_float(vm, 5, &arg3);
        if(!ok)
            return 0;
        cocos2d::WavesTiles3D* ret = cocos2d::WavesTiles3D::create(arg0, arg1, arg2, arg3);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.WavesTiles3D");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 4);
    return 0;
}

SQInteger squirrel_cocos2dx_WavesTiles3D_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.WavesTiles3D", -1);
    return 1;
}

void squirrel_cocos2dx_WavesTiles3D_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::WavesTiles3D", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::TiledGrid3DAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::GridAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_WavesTiles3D(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("WavesTiles3D"), -1);


    sq_pushstring(vm, _SC("TiledGrid3DAction"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "getAmplitudeRate", squirrel_cocos2dx_WavesTiles3D_getAmplitudeRate);
    to_squirrel_function(vm, "setAmplitude", squirrel_cocos2dx_WavesTiles3D_setAmplitude);
    to_squirrel_function(vm, "setAmplitudeRate", squirrel_cocos2dx_WavesTiles3D_setAmplitudeRate);
    to_squirrel_function(vm, "getAmplitude", squirrel_cocos2dx_WavesTiles3D_getAmplitude);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_WavesTiles3D_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_WavesTiles3D_typeof_meta);



    squirrel_cocos2dx_WavesTiles3D_push_c_class(vm);

    std::string typeName = typeid(cocos2d::WavesTiles3D).name();
    g_sqType[typeName] = "cc.WavesTiles3D";

    return 1;
}
SQInteger squirrel_cocos2dx_PointArray_count(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::PointArray* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_PointArray_count'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        ssize_t ret = cobj->count();
        sq_pushinteger(vm, (SQInteger)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "count", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_PointArray_insertControlPoint(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::PointArray* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_PointArray_insertControlPoint'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        cocos2d::Vec2 arg0;
        ssize_t arg1;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;

        ok &= sqval_to_ssize(vm, 3, &arg1);
        if (!ok)
            return 0;
        cobj->insertControlPoint(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "insertControlPoint", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_PointArray_reverse(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::PointArray* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_PointArray_reverse'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::PointArray* ret = cobj->reverse();
        object_to_sqval<cocos2d::PointArray>(vm, "cc.PointArray", (cocos2d::PointArray*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "reverse", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_PointArray_initWithCapacity(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::PointArray* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_PointArray_initWithCapacity'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        ssize_t arg0;

        ok &= sqval_to_ssize(vm, 2, &arg0);
        if (!ok)
            return 0;
        bool ret = cobj->initWithCapacity(arg0);
        sq_pushbool(vm, (SQBool)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "initWithCapacity", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_PointArray_removeControlPointAtIndex(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::PointArray* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_PointArray_removeControlPointAtIndex'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        ssize_t arg0;

        ok &= sqval_to_ssize(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->removeControlPointAtIndex(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "removeControlPointAtIndex", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_PointArray_clone(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::PointArray* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_PointArray_clone'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::PointArray* ret = cobj->clone();
        object_to_sqval<cocos2d::PointArray>(vm, "cc.PointArray", (cocos2d::PointArray*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "clone", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_PointArray_replaceControlPoint(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::PointArray* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_PointArray_replaceControlPoint'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 2) 
    {
        cocos2d::Vec2 arg0;
        ssize_t arg1;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;

        ok &= sqval_to_ssize(vm, 3, &arg1);
        if (!ok)
            return 0;
        cobj->replaceControlPoint(arg0, arg1);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "replaceControlPoint", (int)argc, 2);
    return 0;
}
SQInteger squirrel_cocos2dx_PointArray_addControlPoint(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::PointArray* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_PointArray_addControlPoint'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::Vec2 arg0;

        cocos2d::Vec2* ptr2 = nullptr; ok &= sqval_to_vec2(vm, 2, ptr2); arg0 = *ptr2;
        if (!ok)
            return 0;
        cobj->addControlPoint(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "addControlPoint", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_PointArray_getControlPointAtIndex(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::PointArray* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_PointArray_getControlPointAtIndex'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        ssize_t arg0;

        ok &= sqval_to_ssize(vm, 2, &arg0);
        if (!ok)
            return 0;
        cocos2d::Vec2 ret = cobj->getControlPointAtIndex(arg0);
        vec2_to_sqval(vm, ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getControlPointAtIndex", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_PointArray_reverseInline(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::PointArray* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_PointArray_reverseInline'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj->reverseInline();
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "reverseInline", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_PointArray_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 1)
    {
        ssize_t arg0;
        ok &= sqval_to_ssize(vm, 2, &arg0);
        if(!ok)
            return 0;
        cocos2d::PointArray* ret = cocos2d::PointArray::create(arg0);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.PointArray");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_PointArray_constructor(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::PointArray* cobj = nullptr;
    bool ok  = true;

    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cobj = new cocos2d::PointArray();
        sq_setinstanceup(vm, 1, (SQUserPointer)cobj);
        cobj->retain();
        sq_setreleasehook(vm, 1, squirrel_releasehook_Ref);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "PointArray", (int)argc, 0);
    return 0;
}


SQInteger squirrel_cocos2dx_PointArray_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.PointArray", -1);
    return 1;
}

void squirrel_cocos2dx_PointArray_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::PointArray", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_PointArray(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("PointArray"), -1);


    sq_pushstring(vm, _SC("Ref"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "constructor", squirrel_cocos2dx_PointArray_constructor);
    to_squirrel_function(vm, "count", squirrel_cocos2dx_PointArray_count);
    to_squirrel_function(vm, "insertControlPoint", squirrel_cocos2dx_PointArray_insertControlPoint);
    to_squirrel_function(vm, "reverse", squirrel_cocos2dx_PointArray_reverse);
    to_squirrel_function(vm, "initWithCapacity", squirrel_cocos2dx_PointArray_initWithCapacity);
    to_squirrel_function(vm, "removeControlPointAtIndex", squirrel_cocos2dx_PointArray_removeControlPointAtIndex);
    to_squirrel_function(vm, "clone", squirrel_cocos2dx_PointArray_clone);
    to_squirrel_function(vm, "replaceControlPoint", squirrel_cocos2dx_PointArray_replaceControlPoint);
    to_squirrel_function(vm, "addControlPoint", squirrel_cocos2dx_PointArray_addControlPoint);
    to_squirrel_function(vm, "getControlPointAtIndex", squirrel_cocos2dx_PointArray_getControlPointAtIndex);
    to_squirrel_function(vm, "reverseInline", squirrel_cocos2dx_PointArray_reverseInline);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_PointArray_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_PointArray_typeof_meta);



    squirrel_cocos2dx_PointArray_push_c_class(vm);

    std::string typeName = typeid(cocos2d::PointArray).name();
    g_sqType[typeName] = "cc.PointArray";

    return 1;
}
SQInteger squirrel_cocos2dx_TransitionSlideInB_action(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::TransitionSlideInB* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_TransitionSlideInB_action'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::ActionInterval* ret = cobj->action();
        object_to_sqval<cocos2d::ActionInterval>(vm, "cc.ActionInterval", (cocos2d::ActionInterval*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "action", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_TransitionSlideInB_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        float arg0;
        cocos2d::Scene* arg1;
        ok &= sqval_to_float(vm, 2, &arg0);
        ok &= sqval_to_object<cocos2d::Scene>(vm, 3, &arg1);
        if(!ok)
            return 0;
        cocos2d::TransitionSlideInB* ret = cocos2d::TransitionSlideInB::create(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.TransitionSlideInB");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_TransitionSlideInB_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.TransitionSlideInB", -1);
    return 1;
}

void squirrel_cocos2dx_TransitionSlideInB_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::TransitionSlideInB", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::TransitionSlideInL", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TransitionScene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Scene", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Node", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::TransitionEaseScene", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_TransitionSlideInB(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("TransitionSlideInB"), -1);


    sq_pushstring(vm, _SC("TransitionSlideInL"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "action", squirrel_cocos2dx_TransitionSlideInB_action);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_TransitionSlideInB_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_TransitionSlideInB_typeof_meta);



    squirrel_cocos2dx_TransitionSlideInB_push_c_class(vm);

    std::string typeName = typeid(cocos2d::TransitionSlideInB).name();
    g_sqType[typeName] = "cc.TransitionSlideInB";

    return 1;
}
SQInteger squirrel_cocos2dx_Speed_setInnerAction(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Speed* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Speed_setInnerAction'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        cocos2d::ActionInterval* arg0;

        ok &= sqval_to_object<cocos2d::ActionInterval>(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setInnerAction(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setInnerAction", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Speed_setSpeed(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Speed* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Speed_setSpeed'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 1) 
    {
        float arg0;

        ok &= sqval_to_float(vm, 2, &arg0);
        if (!ok)
            return 0;
        cobj->setSpeed(arg0);
        return 0;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "setSpeed", (int)argc, 1);
    return 0;
}
SQInteger squirrel_cocos2dx_Speed_getInnerAction(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Speed* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Speed_getInnerAction'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        cocos2d::ActionInterval* ret = cobj->getInnerAction();
        object_to_sqval<cocos2d::ActionInterval>(vm, "cc.ActionInterval", (cocos2d::ActionInterval*)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getInnerAction", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Speed_getSpeed(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    cocos2d::Speed* cobj = nullptr;
    bool ok  = true;

    sq_getinstanceup(vm, 1, (SQUserPointer *)&cobj, 0);
#if COCOS2D_DEBUG >= 1
    if (!cobj) 
    {
        CCLOG("invalid 'cobj' in function 'squirrel_cocos2dx_Speed_getSpeed'");
        return 0;
    }
#endif
    argc = sq_gettop(vm) - 1;
    if (argc == 0) 
    {
        if (!ok)
            return 0;
        float ret = cobj->getSpeed();
        sq_pushfloat(vm, (SQFloat)ret);
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d \n", "getSpeed", (int)argc, 0);
    return 0;
}
SQInteger squirrel_cocos2dx_Speed_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 2)
    {
        cocos2d::ActionInterval* arg0;
        float arg1;
        ok &= sqval_to_object<cocos2d::ActionInterval>(vm, 2, &arg0);
        ok &= sqval_to_float(vm, 3, &arg1);
        if(!ok)
            return 0;
        cocos2d::Speed* ret = cocos2d::Speed::create(arg0, arg1);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.Speed");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 2);
    return 0;
}

SQInteger squirrel_cocos2dx_Speed_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.Speed", -1);
    return 1;
}

void squirrel_cocos2dx_Speed_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::Speed", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_Speed(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("Speed"), -1);


    sq_pushstring(vm, _SC("Action"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "setInnerAction", squirrel_cocos2dx_Speed_setInnerAction);
    to_squirrel_function(vm, "setSpeed", squirrel_cocos2dx_Speed_setSpeed);
    to_squirrel_function(vm, "getInnerAction", squirrel_cocos2dx_Speed_getInnerAction);
    to_squirrel_function(vm, "getSpeed", squirrel_cocos2dx_Speed_getSpeed);
    to_squirrel_function(vm, "create", squirrel_cocos2dx_Speed_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_Speed_typeof_meta);



    squirrel_cocos2dx_Speed_push_c_class(vm);

    std::string typeName = typeid(cocos2d::Speed).name();
    g_sqType[typeName] = "cc.Speed";

    return 1;
}
SQInteger squirrel_cocos2dx_ShatteredTiles3D_create_static(HSQUIRRELVM vm)
{
    SQInteger argc = 0;
    bool ok  = true;


    argc = sq_gettop(vm) - 1;

    if (argc == 4)
    {
        float arg0;
        cocos2d::Size arg1;
        int arg2;
        bool arg3;
        ok &= sqval_to_float(vm, 2, &arg0);
        cocos2d::Size* ptr3 = nullptr; ok &= sqval_to_size(vm, 3, ptr3); arg1 = *ptr3;
        ok &= sqval_to_int32(vm, 4, (int *)&arg2);
        ok &= sqval_to_boolean(vm, 5, &arg3);
        if(!ok)
            return 0;
        cocos2d::ShatteredTiles3D* ret = cocos2d::ShatteredTiles3D::create(arg0, arg1, arg2, arg3);
        if (SQ_SUCCEEDED(sq_createinstance(vm, 1))) {
            sq_setinstanceup(vm, -1, (SQUserPointer)ret);
            set_squirrel_object(vm, -1, ret, "cc.ShatteredTiles3D");
            call_squirrel_closure(vm, - 1, "constructor", false);
        }
        return 1;
    }
    CCLOG("%s has wrong number of arguments: %d, was expecting %d\n ", "create", (int)argc, 4);
    return 0;
}

SQInteger squirrel_cocos2dx_ShatteredTiles3D_typeof_meta(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "cc.ShatteredTiles3D", -1);
    return 1;
}

void squirrel_cocos2dx_ShatteredTiles3D_push_c_class(HSQUIRRELVM vm)
{
    sq_pushstring(vm, "_C_CLASS", -1);
    sq_pushstring(vm, "cocos2d::ShatteredTiles3D", -1);
    sq_newslot(vm, -3, SQTrue);

    sq_pushstring(vm, "_C_BASE_CLASSES", -1);
    sq_newarray(vm, 0);
    sq_pushstring(vm, "cocos2d::TiledGrid3DAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::GridAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::ActionInterval", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::FiniteTimeAction", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Action", -1);
    sq_arrayappend(vm, -2);
    sq_pushstring(vm, "cocos2d::Ref", -1);
    sq_arrayappend(vm, -2);
    sq_newslot(vm, -3, SQTrue);

    sq_newslot(vm, -3, SQFalse);
}

int squirrel_register_cocos2dx_ShatteredTiles3D(HSQUIRRELVM vm)
{
    sq_pushstring(vm, _SC("ShatteredTiles3D"), -1);


    sq_pushstring(vm, _SC("TiledGrid3DAction"), -1);
    if (SQ_SUCCEEDED(sq_get(vm, -3))) {
        sq_newclass(vm, SQTrue);
    } else {
        sq_newclass(vm, SQFalse);
    }

    to_squirrel_function(vm, "create", squirrel_cocos2dx_ShatteredTiles3D_create_static, SQTrue);

    to_squirrel_function(vm, "_typeof", squirrel_cocos2dx_ShatteredTiles3D_typeof_meta);



    squirrel_cocos2dx_ShatteredTiles3D_push_c_class(vm);

    std::string typeName = typeid(cocos2d::ShatteredTiles3D).name();
    g_sqType[typeName] = "cc.ShatteredTiles3D";

    return 1;
}
extern int register_all_cocos2dx(HSQUIRRELVM vm)
{
	sq_pushstring(vm, _SC("cc"), -1);
	sq_newtable(vm);

	squirrel_register_cocos2dx_Ref(vm);
	squirrel_register_cocos2dx_Action(vm);
	squirrel_register_cocos2dx_FiniteTimeAction(vm);
	squirrel_register_cocos2dx_ActionInterval(vm);
	squirrel_register_cocos2dx_ActionEase(vm);
	squirrel_register_cocos2dx_EaseSineIn(vm);
	squirrel_register_cocos2dx_ProgressTo(vm);
	squirrel_register_cocos2dx_Console(vm);
	squirrel_register_cocos2dx_Node(vm);
	squirrel_register_cocos2dx_Scene(vm);
	squirrel_register_cocos2dx_TransitionScene(vm);
	squirrel_register_cocos2dx_TransitionEaseScene(vm);
	squirrel_register_cocos2dx_TransitionMoveInL(vm);
	squirrel_register_cocos2dx_TransitionMoveInB(vm);
	squirrel_register_cocos2dx_EaseRateAction(vm);
	squirrel_register_cocos2dx_EaseInOut(vm);
	squirrel_register_cocos2dx_GridAction(vm);
	squirrel_register_cocos2dx_Grid3DAction(vm);
	squirrel_register_cocos2dx_Ripple3D(vm);
	squirrel_register_cocos2dx_EaseCubicActionInOut(vm);
	squirrel_register_cocos2dx_TransitionMoveInT(vm);
	squirrel_register_cocos2dx_TransitionMoveInR(vm);
	squirrel_register_cocos2dx_Color4F(vm);
	squirrel_register_cocos2dx_ActionInstant(vm);
	squirrel_register_cocos2dx_Hide(vm);
	squirrel_register_cocos2dx_ParticleSystem(vm);
	squirrel_register_cocos2dx_ParticleSystemQuad(vm);
	squirrel_register_cocos2dx_ParticleSnow(vm);
	squirrel_register_cocos2dx_Color4B(vm);
	squirrel_register_cocos2dx_AnimationCache(vm);
	squirrel_register_cocos2dx_ActionCamera(vm);
	squirrel_register_cocos2dx_ProgressFromTo(vm);
	squirrel_register_cocos2dx_MoveBy(vm);
	squirrel_register_cocos2dx_MoveTo(vm);
	squirrel_register_cocos2dx_JumpBy(vm);
	squirrel_register_cocos2dx_EventListener(vm);
	squirrel_register_cocos2dx_EventListenerKeyboard(vm);
	squirrel_register_cocos2dx_EventListenerMouse(vm);
	squirrel_register_cocos2dx_TransitionRotoZoom(vm);
	squirrel_register_cocos2dx_Director(vm);
	squirrel_register_cocos2dx_TiledGrid3DAction(vm);
	squirrel_register_cocos2dx_WavesTiles3D(vm);
	squirrel_register_cocos2dx_Scheduler(vm);
	squirrel_register_cocos2dx_EaseElastic(vm);
	squirrel_register_cocos2dx_EaseElasticOut(vm);
	squirrel_register_cocos2dx_EaseQuadraticActionInOut(vm);
	squirrel_register_cocos2dx_EaseBackOut(vm);
	squirrel_register_cocos2dx_Event(vm);
	squirrel_register_cocos2dx_EventAcceleration(vm);
	squirrel_register_cocos2dx_Spawn(vm);
	squirrel_register_cocos2dx_Mat4(vm);
	squirrel_register_cocos2dx_SkewTo(vm);
	squirrel_register_cocos2dx_SkewBy(vm);
	squirrel_register_cocos2dx_EaseQuadraticActionOut(vm);
	squirrel_register_cocos2dx_TransitionProgress(vm);
	squirrel_register_cocos2dx_TransitionProgressVertical(vm);
	squirrel_register_cocos2dx_EaseElasticInOut(vm);
	squirrel_register_cocos2dx_TMXTiledMap(vm);
	squirrel_register_cocos2dx_FadeTo(vm);
	squirrel_register_cocos2dx_FadeIn(vm);
	squirrel_register_cocos2dx_ShakyTiles3D(vm);
	squirrel_register_cocos2dx_EventListenerCustom(vm);
	squirrel_register_cocos2dx_FlipX3D(vm);
	squirrel_register_cocos2dx_FlipY3D(vm);
	squirrel_register_cocos2dx_EaseSineInOut(vm);
	squirrel_register_cocos2dx_TransitionSceneOriented(vm);
	squirrel_register_cocos2dx_TransitionFlipAngular(vm);
	squirrel_register_cocos2dx_Layer(vm);
	squirrel_register_cocos2dx_EaseBounce(vm);
	squirrel_register_cocos2dx_Show(vm);
	squirrel_register_cocos2dx_FadeOut(vm);
	squirrel_register_cocos2dx_CallFunc(vm);
	squirrel_register_cocos2dx_EventMouse(vm);
	squirrel_register_cocos2dx_GLView(vm);
	squirrel_register_cocos2dx_EaseOut(vm);
	squirrel_register_cocos2dx_ParticleFireworks(vm);
	squirrel_register_cocos2dx_MenuItem(vm);
	squirrel_register_cocos2dx_MenuItemSprite(vm);
	squirrel_register_cocos2dx_MenuItemImage(vm);
	squirrel_register_cocos2dx_EventTouch(vm);
	squirrel_register_cocos2dx_ParticleFire(vm);
	squirrel_register_cocos2dx_ParticleSmoke(vm);
	squirrel_register_cocos2dx_TransitionZoomFlipAngular(vm);
	squirrel_register_cocos2dx_EaseIn(vm);
	squirrel_register_cocos2dx_EaseExponentialInOut(vm);
	squirrel_register_cocos2dx_TransitionFlipX(vm);
	squirrel_register_cocos2dx_Waves3D(vm);
	squirrel_register_cocos2dx_EaseExponentialOut(vm);
	squirrel_register_cocos2dx_SpriteBatchNode(vm);
	squirrel_register_cocos2dx_Label(vm);
	squirrel_register_cocos2dx_Application(vm);
	squirrel_register_cocos2dx_DelayTime(vm);
	squirrel_register_cocos2dx_AtlasNode(vm);
	squirrel_register_cocos2dx_LabelAtlas(vm);
	squirrel_register_cocos2dx_Scale9Sprite(vm);
	squirrel_register_cocos2dx_TransitionFadeTR(vm);
	squirrel_register_cocos2dx_TransitionFadeBL(vm);
	squirrel_register_cocos2dx_EaseElasticIn(vm);
	squirrel_register_cocos2dx_MenuItemLabel(vm);
	squirrel_register_cocos2dx_MenuItemAtlasFont(vm);
	squirrel_register_cocos2dx_EaseCircleActionInOut(vm);
	squirrel_register_cocos2dx_ParticleSpiral(vm);
	squirrel_register_cocos2dx_Animation3DData(vm);
	squirrel_register_cocos2dx_FadeOutTRTiles(vm);
	squirrel_register_cocos2dx_FadeOutUpTiles(vm);
	squirrel_register_cocos2dx_FadeOutDownTiles(vm);
	squirrel_register_cocos2dx_EaseCubicActionIn(vm);
	squirrel_register_cocos2dx_JumpTiles3D(vm);
	squirrel_register_cocos2dx_ActionTween(vm);
	squirrel_register_cocos2dx_TransitionFadeDown(vm);
	squirrel_register_cocos2dx_ParticleSun(vm);
	squirrel_register_cocos2dx_TransitionProgressHorizontal(vm);
	squirrel_register_cocos2dx_TMXLayer(vm);
	squirrel_register_cocos2dx_FlipX(vm);
	squirrel_register_cocos2dx_FlipY(vm);
	squirrel_register_cocos2dx_EventKeyboard(vm);
	squirrel_register_cocos2dx_PhysicsMaterial(vm);
	squirrel_register_cocos2dx_TransitionSplitCols(vm);
	squirrel_register_cocos2dx_Timer(vm);
	squirrel_register_cocos2dx_Animate3D(vm);
	squirrel_register_cocos2dx_Repeat(vm);
	squirrel_register_cocos2dx_Place(vm);
	squirrel_register_cocos2dx_EventListenerAcceleration(vm);
	squirrel_register_cocos2dx_GridBase(vm);
	squirrel_register_cocos2dx_TiledGrid3D(vm);
	squirrel_register_cocos2dx_Color3B(vm);
	squirrel_register_cocos2dx_SpriteFrameCache(vm);
	squirrel_register_cocos2dx_TransitionShrinkGrow(vm);
	squirrel_register_cocos2dx_SplitCols(vm);
	squirrel_register_cocos2dx_ClippingNode(vm);
	squirrel_register_cocos2dx_EaseBounceInOut(vm);
	squirrel_register_cocos2dx_ParticleFlower(vm);
	squirrel_register_cocos2dx_EaseCircleActionIn(vm);
	squirrel_register_cocos2dx_Image(vm);
	squirrel_register_cocos2dx_TurnOffTiles(vm);
	squirrel_register_cocos2dx_JumpTo(vm);
	squirrel_register_cocos2dx_Vec4(vm);
	squirrel_register_cocos2dx_TransitionJumpZoom(vm);
	squirrel_register_cocos2dx_NodeData(vm);
	squirrel_register_cocos2dx_AnimationFrame(vm);
	squirrel_register_cocos2dx_NodeGrid(vm);
	squirrel_register_cocos2dx_TintTo(vm);
	squirrel_register_cocos2dx_Sprite3D(vm);
	squirrel_register_cocos2dx_TMXTilesetInfo(vm);
	squirrel_register_cocos2dx_Camera(vm);
	squirrel_register_cocos2dx_TMXObjectGroup(vm);
	squirrel_register_cocos2dx_ParticleGalaxy(vm);
	squirrel_register_cocos2dx_EaseBounceOut(vm);
	squirrel_register_cocos2dx_EaseQuinticActionIn(vm);
	squirrel_register_cocos2dx_LayerColor(vm);
	squirrel_register_cocos2dx_BezierBy(vm);
	squirrel_register_cocos2dx_BezierTo(vm);
	squirrel_register_cocos2dx_FadeOutBLTiles(vm);
	squirrel_register_cocos2dx_LayerGradient(vm);
	squirrel_register_cocos2dx_Twirl(vm);
	squirrel_register_cocos2dx_TargetedAction(vm);
	squirrel_register_cocos2dx_RepeatForever(vm);
	squirrel_register_cocos2dx_CardinalSplineTo(vm);
	squirrel_register_cocos2dx_CardinalSplineBy(vm);
	squirrel_register_cocos2dx_TransitionFlipY(vm);
	squirrel_register_cocos2dx_LayerMultiplex(vm);
	squirrel_register_cocos2dx_TMXLayerInfo(vm);
	squirrel_register_cocos2dx_EaseBackInOut(vm);
	squirrel_register_cocos2dx_Quaternion(vm);
	squirrel_register_cocos2dx_ToggleVisibility(vm);
	squirrel_register_cocos2dx_DrawNode(vm);
	squirrel_register_cocos2dx_Mesh(vm);
	squirrel_register_cocos2dx_TransitionTurnOffTiles(vm);
	squirrel_register_cocos2dx_RotateTo(vm);
	squirrel_register_cocos2dx_TransitionSplitRows(vm);
	squirrel_register_cocos2dx_TransitionProgressRadialCCW(vm);
	squirrel_register_cocos2dx_ScaleTo(vm);
	squirrel_register_cocos2dx_TransitionPageTurn(vm);
	squirrel_register_cocos2dx_ParticleExplosion(vm);
	squirrel_register_cocos2dx_Menu(vm);
	squirrel_register_cocos2dx_Texture2D(vm);
	squirrel_register_cocos2dx_ActionManager(vm);
	squirrel_register_cocos2dx_ParticleBatchNode(vm);
	squirrel_register_cocos2dx_TransitionZoomFlipX(vm);
	squirrel_register_cocos2dx_EventFocus(vm);
	squirrel_register_cocos2dx_EventListenerTouchAllAtOnce(vm);
	squirrel_register_cocos2dx_EaseQuinticActionInOut(vm);
	squirrel_register_cocos2dx_Skeleton3D(vm);
	squirrel_register_cocos2dx_Size(vm);
	squirrel_register_cocos2dx_ScaleBy(vm);
	squirrel_register_cocos2dx_TileMapAtlas(vm);
	squirrel_register_cocos2dx_Lens3D(vm);
	squirrel_register_cocos2dx_Animation(vm);
	squirrel_register_cocos2dx_EventListenerFocus(vm);
	squirrel_register_cocos2dx_GLProgram(vm);
	squirrel_register_cocos2dx_AnimationFrameData(vm);
	squirrel_register_cocos2dx_StopGrid(vm);
	squirrel_register_cocos2dx_BlendFunc(vm);
	squirrel_register_cocos2dx_EaseQuarticActionInOut(vm);
	squirrel_register_cocos2dx_GLProgramState(vm);
	squirrel_register_cocos2dx_PageTurn3D(vm);
	squirrel_register_cocos2dx_Grid3D(vm);
	squirrel_register_cocos2dx_Sequence(vm);
	squirrel_register_cocos2dx_EaseCircleActionOut(vm);
	squirrel_register_cocos2dx_TransitionProgressInOut(vm);
	squirrel_register_cocos2dx_EaseQuarticActionOut(vm);
	squirrel_register_cocos2dx_EaseBackIn(vm);
	squirrel_register_cocos2dx_Rect(vm);
	squirrel_register_cocos2dx_RenderTexture(vm);
	squirrel_register_cocos2dx_Follow(vm);
	squirrel_register_cocos2dx_TintBy(vm);
	squirrel_register_cocos2dx_Animate(vm);
	squirrel_register_cocos2dx_ProgressTimer(vm);
	squirrel_register_cocos2dx_ParticleMeteor(vm);
	squirrel_register_cocos2dx_EaseQuarticActionIn(vm);
	squirrel_register_cocos2dx_CatmullRomTo(vm);
	squirrel_register_cocos2dx_TransitionZoomFlipY(vm);
	squirrel_register_cocos2dx_TransitionCrossFade(vm);
	squirrel_register_cocos2dx_TMXMapInfo(vm);
	squirrel_register_cocos2dx_EaseExponentialIn(vm);
	squirrel_register_cocos2dx_ReuseGrid(vm);
	squirrel_register_cocos2dx_Blink(vm);
	squirrel_register_cocos2dx_SpriteFrame(vm);
	squirrel_register_cocos2dx_EventDispatcher(vm);
	squirrel_register_cocos2dx_SplitRows(vm);
	squirrel_register_cocos2dx_Liquid(vm);
	squirrel_register_cocos2dx_OrbitCamera(vm);
	squirrel_register_cocos2dx_GLProgramCache(vm);
	squirrel_register_cocos2dx_EventCustom(vm);
	squirrel_register_cocos2dx_UserDefault(vm);
	squirrel_register_cocos2dx_Component(vm);
	squirrel_register_cocos2dx_AffineTransform(vm);
	squirrel_register_cocos2dx_EventListenerTouchOneByOne(vm);
	squirrel_register_cocos2dx_ParticleRain(vm);
	squirrel_register_cocos2dx_Waves(vm);
	squirrel_register_cocos2dx_Vec2(vm);
	squirrel_register_cocos2dx_EaseQuinticActionOut(vm);
	squirrel_register_cocos2dx_EaseBezierAction(vm);
	squirrel_register_cocos2dx_Vec3(vm);
	squirrel_register_cocos2dx_EaseBounceIn(vm);
	squirrel_register_cocos2dx_MenuItemFont(vm);
	squirrel_register_cocos2dx_TransitionFadeUp(vm);
	squirrel_register_cocos2dx_EaseSineOut(vm);
	squirrel_register_cocos2dx_TextureCache(vm);
	squirrel_register_cocos2dx_MenuItemToggle(vm);
	squirrel_register_cocos2dx_RemoveSelf(vm);
	squirrel_register_cocos2dx_LabelTTF(vm);
	squirrel_register_cocos2dx_Touch(vm);
	squirrel_register_cocos2dx_ProtectedNode(vm);
	squirrel_register_cocos2dx_MotionStreak(vm);
	squirrel_register_cocos2dx_RotateBy(vm);
	squirrel_register_cocos2dx_FileUtils(vm);
	squirrel_register_cocos2dx_Sprite(vm);
	squirrel_register_cocos2dx_TransitionFade(vm);
	squirrel_register_cocos2dx_TransitionProgressOutIn(vm);
	squirrel_register_cocos2dx_CatmullRomBy(vm);
	squirrel_register_cocos2dx_Shaky3D(vm);
	squirrel_register_cocos2dx_TransitionSlideInL(vm);
	squirrel_register_cocos2dx_TransitionSlideInT(vm);
	squirrel_register_cocos2dx_EaseCubicActionOut(vm);
	squirrel_register_cocos2dx_TransitionProgressRadialCW(vm);
	squirrel_register_cocos2dx_ShuffleTiles(vm);
	squirrel_register_cocos2dx_TransitionSlideInR(vm);
	squirrel_register_cocos2dx_NodeDatas(vm);
	squirrel_register_cocos2dx_ParallaxNode(vm);
	squirrel_register_cocos2dx_EaseQuadraticActionIn(vm);
	squirrel_register_cocos2dx_Animation3D(vm);
	squirrel_register_cocos2dx_PointArray(vm);
	squirrel_register_cocos2dx_TransitionSlideInB(vm);
	squirrel_register_cocos2dx_Speed(vm);
	squirrel_register_cocos2dx_ShatteredTiles3D(vm);

	sq_newslot(vm, 1, SQFalse);

	return 1;
}

